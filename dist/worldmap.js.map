{"version":3,"sources":["../src/worldmap.js"],"names":["_","Highcharts","L","tileServers","dataTreatment","processData","getTimeSeries","getUpdatedChartSeries","drawPopups","renderChart","hideAllGraphPopups","getDataPointValues","getDataPointStickyInfo","filterEmptyAndZeroValues","currentTargetForChart","currentParameterForChart","DRAW_CHART","REDRAW_CHART","CIRCLE_RADIUS","POLYGON_MAGNIFY_RATIO","WorldMap","ctrl","mapContainer","circles","validated_pollutants","timeSeries","chartSeries","chartData","createMap","layerNames","map","layerGroup","mapCenter","latLng","parseFloat","panel","mapCenterLatitude","mapCenterLongitude","layers","getLayers","worldCopyJump","center","zoomControl","attributionControl","fitWorld","setZoom","initialZoom","panTo","control","zoom","position","addTo","addLayersToMap","on","e","selectedTileServer","tileServer","tileLayer","url","maxZoom","subdomains","reuseTiles","detectRetina","attribution","document","querySelector","addEventListener","event","currentTarget","value","drawChart","overlayMaps","i","length","forEach","layer","clearLayers","JSON","parse","pollutants","error","console","log","Error","data","hideEmpty","hideZero","addPointsToMap","Object","keys","key","newShape","createShape","type","addLayer","dataPoint","dataPointDetails","stickyPopupInfo","shape","circle","locationLatitude","locationLongitude","rectangle","color","polygon","setTarget","createPopup","bindPopup","point","stickyLabels","openPopup","closePopup","invalidateSize","isADiferentCity","setNewCoords","then","flyTo","catch","mapCenterMoved","legend","removeFrom","zoomFactor","parseInt","redrawChart","parameterUnit","title"],"mappings":"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","file":"worldmap.js","sourcesContent":["/* eslint-disable id-length, no-unused-vars */\n\n/* Vendor specific */\nimport _ from 'lodash';\nimport Highcharts from './vendor/highcharts/highstock';\nimport L from './vendor/leaflet/leaflet';\n\n/* App Specific */\nimport { tileServers } from './definitions';\nimport { \n  dataTreatment, processData, getTimeSeries, getUpdatedChartSeries,\n  drawPopups, renderChart, hideAllGraphPopups, getDataPointValues, getDataPointStickyInfo\n} from './utils/map_utils';\nimport { filterEmptyAndZeroValues } from './utils/data_formatter';\n\nlet currentTargetForChart = null;\nlet currentParameterForChart = 'AQI';\n\nconst DRAW_CHART = false\nconst REDRAW_CHART = true\n\nconst CIRCLE_RADIUS = 200\nconst POLYGON_MAGNIFY_RATIO = 3\n\nexport default class WorldMap {\n\n  constructor(ctrl, mapContainer) {\n    this.ctrl = ctrl;\n    this.mapContainer = mapContainer;\n    this.circles = [];\n    this.validated_pollutants = {}\n    this.timeSeries = {}\n    this.chartSeries = {}\n    this.chartData = []\n\n    this.createMap();   //only called once\n  }\n\n  getLayers() {\n    return this.ctrl.layerNames.map(elem => L.layerGroup())\n  }\n\n  createMap() {\n    const mapCenter = L.latLng(\n      parseFloat(this.ctrl.panel.mapCenterLatitude), \n      parseFloat(this.ctrl.panel.mapCenterLongitude)\n      );\n\n    this.layers = this.getLayers()\n\n    this.map = L.map(this.mapContainer, \n      {\n        worldCopyJump: true, \n        center: mapCenter, \n        zoomControl: false, \n        attributionControl: false, \n        layers: this.layers\n      })\n      .fitWorld()\n\n    this.map.setZoom(this.ctrl.panel.initialZoom);\n    this.map.panTo(mapCenter);\n    L.control.zoom({position: 'topright'}).addTo(this.map);\n    this.addLayersToMap();\n\n    // this.map.on('zoomstart', (e) => { mapZoom = this.map.getZoom() });\n    this.map.on('click', (e) => {\n      hideAllGraphPopups();\n      currentTargetForChart = null;\n    });\n\n    const selectedTileServer = tileServers[this.ctrl.tileServer];\n    L.tileLayer(selectedTileServer.url, {\n      maxZoom: 18,\n      subdomains: selectedTileServer.subdomains,\n      reuseTiles: true,\n      detectRetina: true,\n      attribution: selectedTileServer.attribution\n    }).addTo(this.map, true);\n\n    document.querySelector('#air_parameters_dropdown')\n      .addEventListener('change', (event) => {\n        currentParameterForChart = event.currentTarget.value;\n        this.drawChart(REDRAW_CHART);\n      });\n  }\n\n  addLayersToMap() {\n    this.overlayMaps = {};\n    for (let i=0; i<this.ctrl.layerNames.length; i++)\n      this.overlayMaps[this.ctrl.layerNames[i]]=this.layers[i]\n\n    L.control.layers({}, this.overlayMaps).addTo(this.map);\n  }\n\n  clearCircles() {\n    this.layers.forEach((layer)=>layer.clearLayers())\n  }\n\n  /* Validate pollutants for a given target*/\n  setPollutants() {\n    try {\n      this.validated_pollutants = JSON.parse(this.ctrl.panel.pollutants);\n    } catch(error) {\n      console.log(error)\n      throw new Error('Please insert a valid JSON in the Available Pollutants');\n    }\n  }\n\n  drawPoints() {\n    //console.log('striping unnecessary entries from recieved data...')\n    this.data = dataTreatment(\n                    filterEmptyAndZeroValues(this.ctrl.data, this.ctrl.panel.hideEmpty, this.ctrl.panel.hideZero)\n                )\n\n    this.addPointsToMap();\n  }\n\n  // Prepare series to show in chart\n  prepareSeries() {    \n    this.timeSeries = getTimeSeries(this.data);\n      if (currentTargetForChart === null) \n    return ;\n    this.chartSeries = getUpdatedChartSeries(this.chartSeries, this.timeSeries, currentTargetForChart, currentParameterForChart);\n  }\n\n  addPointsToMap() {\n    //console.log('addPointsToMap');\n    Object.keys(this.data).forEach((key) => {\n      const value = this.data[key][this.data[key].length - 1 ]; // Use the last data for each sensor to create on map -> avoid repeated markers on map and use just the last measurement (the one needed to show on marker)\n      const newShape = this.createShape(value);\n      try { this.overlayMaps[value.type].addLayer(newShape) } catch(error) { console.log(value); console.log(error) }\n    });\n  }\n\n  createShape(dataPoint) {\n    let dataPointDetails = getDataPointValues(dataPoint);\n    let stickyPopupInfo = getDataPointStickyInfo(dataPointDetails);\n    let shape;\n\n    switch(dataPoint.type) {\n      case 'AirQualityObserved':\n        shape = L.circle([dataPoint.locationLatitude, dataPoint.locationLongitude], CIRCLE_RADIUS, dataPointDetails)\n      break;\n      case 'TrafficFlowObserved':\n        shape = L.rectangle([\n            [dataPoint.locationLatitude-(0.001*POLYGON_MAGNIFY_RATIO), dataPoint.locationLongitude-(0.0015*POLYGON_MAGNIFY_RATIO)], \n            [dataPoint.locationLatitude+(0.001*POLYGON_MAGNIFY_RATIO), dataPoint.locationLongitude+(0.0015*POLYGON_MAGNIFY_RATIO)]\n          ], dataPointDetails)\n        //shape = L.circle([dataPoint.locationLatitude, dataPoint.locationLongitude], CIRCLE_RADIUS, dataPointDetails)\n      break;\n      default:\n        dataPointDetails.color='green'  //default color\n        shape = L.polygon([\n          [dataPoint.locationLatitude-(0.001*POLYGON_MAGNIFY_RATIO), dataPoint.locationLongitude-(0.0015*POLYGON_MAGNIFY_RATIO)], \n          [dataPoint.locationLatitude+(0.001*POLYGON_MAGNIFY_RATIO), dataPoint.locationLongitude],\n          [dataPoint.locationLatitude-(0.001*POLYGON_MAGNIFY_RATIO), dataPoint.locationLongitude+(0.0015*POLYGON_MAGNIFY_RATIO)],\n        ], dataPointDetails)\n    }\n\n    shape\n      .on('click', this.setTarget)\n      .on('click', () => this.drawChart(REDRAW_CHART))\n\n    this.createPopup(shape, stickyPopupInfo);\n\n    return shape;\n  }\n\n  createPopup(shape, stickyPopupInfo) {\n    shape.bindPopup(stickyPopupInfo, {'offset': L.point(0, -2), 'className': 'worldmap-popup', 'closeButton': this.ctrl.panel.stickyLabels});\n    shape.on('mouseover', function () { this.openPopup() });\n\n    if (!this.ctrl.panel.stickyLabels) { \n      shape.on('mouseout', function () { this.closePopup() });\n    }\n  }\n\n  setTarget(event) {\n    currentTargetForChart = event;\n  }\n\n  resize() {\n    this.map.invalidateSize();\n  }\n\n  panToMapCenter() {\n    if (this.ctrl.panel.mapCenter === 'cityenv' && this.ctrl.isADiferentCity()) {\n      this.ctrl.setNewCoords()\n        .then(() => this.map.flyTo([parseFloat(this.ctrl.panel.mapCenterLatitude), parseFloat(this.ctrl.panel.mapCenterLongitude)]))\n        .catch(error => console.log(error))\n      return ;\n    }\n    \n    this.map.panTo([parseFloat(this.ctrl.panel.mapCenterLatitude), parseFloat(this.ctrl.panel.mapCenterLongitude)]);\n    this.ctrl.mapCenterMoved = false;\n  }\n\n  removeLegend() {\n    this.legend.removeFrom(this.map);\n    this.legend = null;\n  }\n\n  setZoom(zoomFactor) {\n    this.map.setZoom(parseInt(zoomFactor, 10));\n  }\n\n  drawChart(redrawChart) {\n    if(currentTargetForChart==null || this.timeSeries==null ) {\n      console.log(\"unnable to drawChart\")\n      console.log(currentTargetForChart)\n      return;\n    }\n    \n    drawPopups(this.timeSeries, this.validated_pollutants, currentParameterForChart, currentTargetForChart)\n\n    // ------\n    let parameterUnit = ''\n    let title = ''\n\n    if (redrawChart) {\n      [this.chartData, parameterUnit, title] = processData(this.chartSeries, this.timeSeries, this.validated_pollutants, currentParameterForChart, currentTargetForChart )\n    }\n    \n    renderChart(this.chartSeries, this.chartData, parameterUnit, title)\n  }\n}\n"]}