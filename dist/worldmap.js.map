{"version":3,"sources":["../src/worldmap.js"],"names":["L","CIRCLE_RADIUS","POLYGON_MAGNIFY_RATIO","WorldMap","ctrl","mapContainer","validatedMetrics","timeSeries","chartSeries","chartData","currentTargetForChart","currentParameterForChart","map","events","on","flagChartRefresh","bind","refreshChart","layerNames","layerGroup","location","parseFloat","panel","mapCenterLatitude","mapCenterLongitude","layers","getLayers","sleepNote","sleepOpacity","hoverToWake","worldCopyJump","center","zoomControl","minZoom","attributionControl","setZoom","initialZoom","panTo","control","zoom","position","addTo","addLayersToMap","id","selectedTileServer","tileServer","tileLayer","url","maxZoom","subdomains","reuseTiles","detectRetina","attribution","document","querySelector","addEventListener","event","currentTarget","value","console","debug","drawPointDetails","overlayMaps","i","length","forEach","layer","clearLayers","metrics","error","warn","Error","Object","keys","data","layerKey","markers","markerClusterGroup","objectKey","lastObjectValues","type","newIcon","createIcon","addLayer","dataPoint","layerIcon","layersIcons","layerColor","layersColors","icon","createMarker","createShape","createPopup","associateEvents","dataPointExtraFields","shape","circle","latitude","longitude","rectangle","color","polygon","elementIcon","elementColor","markerProperties","AwesomeMarkers","prefix","markerColor","marker","stickyPopupInfo","bindPopup","point","stickyLabels","openPopup","closePopup","invalidateSize","mapCenter","isADiferentCity","setNewCoords","then","flyTo","refresh","catch","mapCenterMoved","legend","removeFrom","zoomFactor","parseInt","selectedPointValues","target","options","lastValueMeasure","isToRefreshChart","getTranslation","elem","created_at","currentChartData","measuresMetaInfo","measure","resp","filter","measure_","toLowerCase"],"mappings":"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","file":"worldmap.js","sourcesContent":["/* eslint-disable id-length, no-unused-vars */\n\n/* Vendor specific */\nimport { defaultsDeep, isEqual } from 'lodash';\n\nimport './vendor/leaflet.awesome-markers/leaflet.awesome-markers.css!';\n\nimport * as L from './vendor/leaflet/leaflet';\nimport './vendor/leaflet.awesome-markers/leaflet.awesome-markers';\nimport './vendor/leaflet-sleep/Leaflet.Sleep';\nimport './vendor/leaflet.markercluster/leaflet.markercluster';\nimport './vendor/leaflet.markercluster/MarkerCluster.Default.css!';\nimport './vendor/leaflet.markercluster/MarkerCluster.css!';\n\n/* App Specific */\nimport { TILE_SERVERS, PLUGIN_PATH } from './definitions';\nimport { \n  dataTreatment, processData, getTimeSeries, getUpdatedChartSeries,\n  drawSelect, drawPopups, renderChart, \n  hideAllGraphPopups, getDataPointExtraFields, getDataPointStickyInfo,\n  getMapMarkerClassName\n} from './utils/map_utils';\n\nconst CIRCLE_RADIUS = 200\nconst POLYGON_MAGNIFY_RATIO = 3\n\nexport default class WorldMap {\n\n  constructor(ctrl, mapContainer) {\n    this.ctrl = ctrl;\n    this.mapContainer = mapContainer;\n    this.validatedMetrics = {};\n    this.timeSeries = {};\n    this.chartSeries = {};\n    this.chartData = [];\n    this.currentTargetForChart = null;\n    this.currentParameterForChart = null;\n    this.map = null;\n\n    this.ctrl.events.on('panel-size-changed', this.flagChartRefresh.bind(this));\n  }\n\n  flagChartRefresh() {\n    this.refreshChart = true\n  }\n  getLayers() {\n    return this.ctrl.layerNames.map(elem => L.layerGroup())\n  }\n\n  createMap() {\n    let location = [ parseFloat(this.ctrl.panel.mapCenterLatitude), parseFloat(this.ctrl.panel.mapCenterLongitude) ]\n\n    this.layers = this.getLayers()\n\n    this.map = L.map(this.mapContainer, \n      {\n        sleepNote: false,\n        sleepOpacity: .8,\n        hoverToWake: false,\n        worldCopyJump: true, \n        center: location,\n        zoomControl: false, \n        minZoom: 3,\n        attributionControl: false,\n        layers: this.layers\n      })\n\n    this.map.setZoom(this.ctrl.panel.initialZoom);\n    this.map.panTo(location);\n    L.control.zoom({position: 'topright'}).addTo(this.map);\n    this.addLayersToMap();\n\n    // this.map.on('zoomstart', (e) => { mapZoom = this.map.getZoom() });\n    this.map.on('click', () => {\n      hideAllGraphPopups(this.ctrl.panel.id);\n      this.currentTargetForChart = null;\n    });\n\n    const selectedTileServer = TILE_SERVERS[this.ctrl.tileServer];\n    L.tileLayer(selectedTileServer.url, {\n      maxZoom: 18,\n      subdomains: selectedTileServer.subdomains,\n      reuseTiles: true,\n      detectRetina: true,\n      attribution: selectedTileServer.attribution\n    }).addTo(this.map, true);\n\n    document.querySelector('#parameters_dropdown_'+this.ctrl.panel.id)\n      .addEventListener('change', (event) => {\n        this.currentParameterForChart = event.currentTarget.value;\n        console.debug('selecting point for measure:')\n        console.debug(this.currentParameterForChart)\n        this.drawPointDetails();\n      }); //, {passive: true} <= to avoid blocking\n  }\n\n  addLayersToMap() {\n    this.overlayMaps = {};\n    for (let i=0; i<this.ctrl.layerNames.length; i++)\n      this.overlayMaps[this.ctrl.layerNames[i]]=this.layers[i]\n    L.control.layers({}, this.overlayMaps).addTo(this.map);\n  }\n\n  clearLayers() {\n    this.layers.forEach((layer)=>layer.clearLayers())\n  }\n\n  /* Validate metrics for a given target*/\n  setMetrics() {\n    try {\n      this.validatedMetrics = this.ctrl.panel.metrics;\n    } catch(error) {\n      console.warn(error)\n      throw new Error('Please insert a valid JSON in the Metrics field (Edit > Tab Worldmap > Section AirQualityObserved - Metrics field)');\n    }\n  }\n\n  drawPoints() {\n    \n\n    Object.keys(this.ctrl.data).forEach((layerKey) => {\n      let layer = this.ctrl.data[layerKey];\n      let markers = L.markerClusterGroup();\n\n      //for each layer\n      Object.keys(layer).forEach((objectKey) => {\n        let lastObjectValues = layer[objectKey][layer[objectKey].length-1];\n        lastObjectValues.type = layerKey;\n\n        let newIcon = this.createIcon(lastObjectValues);\n\n        try { \n          if(newIcon)\n            markers.addLayer(newIcon);            \n        } catch(error) { console.warn(layerKey); console.warn(error); }\n      })\n\n      this.overlayMaps[layerKey].addLayer(markers);\n    });\n  }\n\n  createIcon(dataPoint) {\n    //console.log(this.ctrl.panel.layersIcons)\n    if(!dataPoint || !dataPoint.type)\n      return null;\n    \n    let layerIcon = this.ctrl.panel.layersIcons[dataPoint.type];\n    let layerColor = this.ctrl.panel.layersColors[dataPoint.type];\n    let icon = layerIcon ? this.createMarker(dataPoint, layerIcon, layerColor) : this.createShape(dataPoint);\n\n    this.createPopup(\n      this.associateEvents(icon), \n      getDataPointStickyInfo(dataPoint, this.ctrl.panel.metrics)\n    );\n\n    return icon;\n  }\n\n  createShape(dataPoint) {\n    let dataPointExtraFields = getDataPointExtraFields(dataPoint);\n    let shape;\n\n    defaultsDeep(dataPointExtraFields, dataPoint)\n\n    switch(dataPoint.type) {\n      case 'AirQualityObserved':\n        shape = L.circle([dataPoint.latitude, dataPoint.longitude], CIRCLE_RADIUS, dataPointExtraFields)\n      break;\n      case 'TrafficFlowObserved':\n        shape = L.rectangle([\n            [dataPoint.latitude-(0.001*POLYGON_MAGNIFY_RATIO), dataPoint.longitude-(0.0015*POLYGON_MAGNIFY_RATIO)], \n            [dataPoint.latitude+(0.001*POLYGON_MAGNIFY_RATIO), dataPoint.longitude+(0.0015*POLYGON_MAGNIFY_RATIO)]\n          ], dataPointExtraFields)\n        //shape = L.circle([dataPoint.locationLatitude, dataPoint.locationLongitude], CIRCLE_RADIUS, dataPointExtraFields)\n      break;\n      default:\n        dataPointExtraFields.color='green'  //default color\n        shape = L.polygon([\n          [dataPoint.latitude-(0.001*POLYGON_MAGNIFY_RATIO), dataPoint.longitude-(0.0015*POLYGON_MAGNIFY_RATIO)], \n          [dataPoint.latitude+(0.001*POLYGON_MAGNIFY_RATIO), dataPoint.longitude],\n          [dataPoint.latitude-(0.001*POLYGON_MAGNIFY_RATIO), dataPoint.longitude+(0.0015*POLYGON_MAGNIFY_RATIO)],\n        ], dataPointExtraFields)\n    }\n\n    return shape;\n  }\n\n  createMarker(dataPoint, elementIcon, elementColor) {\n    let dataPointExtraFields = getDataPointExtraFields(dataPoint);\n    let location = [dataPoint.latitude, dataPoint.longitude];\n\n    let markerProperties = { \n      icon: L.AwesomeMarkers.icon(\n        { \n          icon: elementIcon,\n          prefix: 'fa',\n          markerColor: (elementColor ? elementColor : dataPointExtraFields.markerColor),\n          //spin: true,\n        }        \n      )\n    }\n    defaultsDeep(markerProperties, dataPoint)\n\n    return L.marker(location, markerProperties);\n  }\n\n  associateEvents(shape) {\n    return shape\n      .on('click', (event) => {this.currentTargetForChart = event})\n      .on('click', () => this.drawPointDetails())\n  }\n\n  createPopup(shape, stickyPopupInfo) {\n    shape.bindPopup(stickyPopupInfo, \n      {\n        'offset': L.point(0, -2), \n        'className': 'worldmap-popup', \n        'closeButton': this.ctrl.panel.stickyLabels\n      }\n    );\n    \n    if (!this.ctrl.panel.stickyLabels) { \n      shape.on('mouseover', function () { this.openPopup() });\n      shape.on('mouseout', function () { this.closePopup() });\n    }\n  }\n\n  setTarget(event) {\n    this.currentTargetForChart = event;\n  }\n\n  resize() {\n    this.map.invalidateSize();\n  }\n\n  panToMapCenter() {\n    let location = [parseFloat(this.ctrl.panel.mapCenterLatitude), parseFloat(this.ctrl.panel.mapCenterLongitude)]\n\n    if ( this.ctrl.panel.mapCenter === 'Location Variable' && this.ctrl.isADiferentCity() ) {\n      this.ctrl.setNewCoords()\n        .then(() => {\n          console.debug('flying to a new location')\n          console.debug(location)\n          this.map.flyTo(location)\n          this.ctrl.refresh();\n        })\n        .catch(error => console.warn(error))\n      return ;\n    }\n    \n    this.map.flyTo(location);\n    this.ctrl.mapCenterMoved = false;\n  }\n\n  removeLegend() {\n    this.legend.removeFrom(this.map);\n    this.legend = null;\n  }\n\n  setZoom(zoomFactor) {\n    this.map.setZoom(parseInt(zoomFactor, 10));\n  }\n\n  drawPointDetails() {\n    console.debug('drawPointDetails')\n    if(this.currentTargetForChart==null){\n      console.debug('no point selected in map')\n      return ;\n    }\n\n    let currentParameterForChart = this.currentParameterForChart || 'value'\n    let selectedPointValues = this.ctrl.data[this.currentTargetForChart.target.options.type][this.currentTargetForChart.target.options.id];\n    let lastValueMeasure = selectedPointValues[selectedPointValues.length - 1];\n\n    drawSelect(this.ctrl.panel.id, lastValueMeasure, this.validatedMetrics, currentParameterForChart)\n\n    drawPopups(this.ctrl.panel.id, lastValueMeasure, this.validatedMetrics)\n\n    //refresh chart only if new values arrived\n    if(!this.isToRefreshChart(selectedPointValues, currentParameterForChart))\n      return ;\n\n    renderChart(this.ctrl.panel.id, selectedPointValues, \n      getTranslation(this.validatedMetrics, currentParameterForChart),\n      [\n        this.currentTargetForChart.target.options.type,\n        this.currentTargetForChart.target.options.id,\n        currentParameterForChart\n      ]\n    )  \n\n    this.refreshChart = false\n  }\n\n\n  // helper method just to avoid unnecessary chart refresh\n  isToRefreshChart(selectedPointValues, currentParameterForChart) {\n    if(this.refreshChart)\n      return true;\n    let chartData = selectedPointValues.map((elem)=>[ elem.created_at, elem[currentParameterForChart] ]);\n    if(isEqual(this.currentChartData, chartData))\n      return false;\n    this.currentChartData = chartData\n    return true;\n  }\n}\n\nfunction getTranslation(measuresMetaInfo, measure) {\n  let resp = measuresMetaInfo.filter((measure_)=>measure_[0].toLowerCase()===measure.toLowerCase())\n  return resp.length>0 ? resp[0] : [measure, measure, null]\n}"]}