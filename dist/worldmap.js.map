{"version":3,"sources":["../src/worldmap.js"],"names":["drawChart","providedPollutants","e","redrawChart","currentParameter","currentParameterForChart","toLowerCase","chart","document","getElementById","style","display","id","target","options","type","values","timeSeries","title","parameterUnit","lastValueMeasure","length","value","aqiIndex","calculateAQI","AQI","allPollutants","pollutants","showPollutants","showHealthConcerns","risks","color","meaning","mapDivHeight","getElementsByClassName","offsetHeight","mapDivWidth","offsetWidth","error","console","log","chartData","unit","name","parameterChoice","forEach","sensor","time","Date","day","getDate","month","getMonth","year","getFullYear","hour","getHours","minutes","getMinutes","seconds","getSeconds","milliseconds","getMilliseconds","push","UTC","config","bootData","user","lightTheme","window","Highcharts","setOptions","HIGHCHARTS_THEME_DARK","stockChart","height","zoomType","events","load","chartSeries","series","text","subtitle","xAxis","yAxis","legend","enabled","rangeSelector","buttons","count","inputEnabled","selected","data","_","L","carsCount","tileServers","carMarker","mapControl","mapZoom","globalCircles","globalMarkers","globalPolylines","circlesLayer","polylinesLayer","currentTargetForChart","WorldMap","ctrl","mapContainer","createMap","circles","layerGroup","mapCenter","latLng","parseFloat","panel","mapCenterLatitude","mapCenterLongitude","map","worldCopyJump","center","zoomControl","attributionControl","layers","fitWorld","setZoom","initialZoom","_initPathRoot","_updatePathViewport","panTo","control","zoom","position","addTo","baseMaps","overlayMaps","on","getZoom","selectedTileServer","tileServer","tileLayer","url","maxZoom","subdomains","reuseTiles","detectRetina","attribution","airParametersDropdown","addEventListener","filter","o","hideEmpty","isNil","hideZero","clearLayers","markersLayer","removeMarkers","finalData","auxData","locationLatitude","locationLongitude","JSON","parse","Error","hideAllTables","filterEmptyAndZeroValues","clearCircles","clearPolylines","treatedData","dataTreatment","createTimeSeries","createPoints","targetType","targetId","lastMeasure","lastTime","timeEnvironment","val","timeTraffic","chartLastDisplayedValue","y","chartLastDisplayedTime","x","chartLastDisplayedId","split","parseInt","addPoint","valueValues","pollutantsValues","Object","keys","key","point","pollutantsTemp","pollutant","newCircle","createCircle","addLayer","createMarker","dataPoint","way","calculatePointPolyline","street_name","polyline","colorIndex","range","_value","index","polygon","weight","smoothFactor","setTarget","removePollDropdown","createPopupPolyline","latitude","longitude","nominatim","urlStart","urlFinish","$","ajax","dataType","cache","success","address","road","city","country","osm_id","osm","wayCoordinates","nodesAux","nodes","getElementsByTagName","nds","i","nodeId","attributes","lat","lon","lng","nd","ref","createPolyline","aqi","aqiColor","aqiMeaning","aqiRisk","circle","fillColor","fillOpacity","addPollDropdown","createPopupCircle","marker","label","bindPopup","stickyLabels","onMouseOver","evt","openPopup","onMouseOut","closePopup","trim","invalidateSize","mapCenterMoved","removeFrom","markers","polylines","removeLayer","zoomFactor"],"mappings":"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","file":"worldmap.js","sourcesContent":["/* eslint-disable id-length, no-unused-vars */\n\n/* Vendor specific */\nimport _ from 'lodash';\nimport Highcharts from './vendor/highcharts/highstock';\nimport L from './vendor/leaflet/leaflet';\n/* Grafana Specific */\nimport config from 'app/core/config';\n/* App Specific */\nimport { showPollutants, showHealthConcerns, calculateAQI } from './utils';\nimport { AQI, carsCount, HIGHCHARTS_THEME_DARK, tileServers, carMarker } from './definitions';\n\nlet providedPollutants;\n\nlet timeSeries = {};\nlet chartData = [];\nlet chartSeries;\n\nlet mapControl;\nlet mapZoom;\n\nlet globalCircles = [];\nlet globalMarkers = [];\nlet globalPolylines = [];\n\nlet circlesLayer;\nlet polylinesLayer;\n\nlet currentTargetForChart = null;\nlet currentParameterForChart = 'aqi';\n\nexport default class WorldMap {\n\n  constructor(ctrl, mapContainer) {\n    this.ctrl = ctrl;\n    this.mapContainer = mapContainer;\n    this.createMap();\n    this.circles = [];\n  }\n\n  createMap() {\n    circlesLayer = window.L.layerGroup();\n    polylinesLayer = window.L.layerGroup();\n\n    const mapCenter = window.L.latLng(parseFloat(this.ctrl.panel.mapCenterLatitude), parseFloat(this.ctrl.panel.mapCenterLongitude));\n    mapControl = this.map = window.L.map(this.mapContainer, {worldCopyJump: true, center: mapCenter, zoomControl: false, attributionControl: false, layers: [polylinesLayer, circlesLayer]})\n      .fitWorld()\n      // .zoomIn(parseInt(this.ctrl.panel.initialZoom, 5));\n    this.map.setZoom(this.ctrl.panel.initialZoom);\n    this.map._initPathRoot();\n    this.map._updatePathViewport();\n\n    this.map.panTo(mapCenter);\n    window.L.control.zoom({position: 'topright'}).addTo(this.map);\n\n    circlesLayer.addTo(mapControl);\n    polylinesLayer.addTo(mapControl);\n\n    var baseMaps = {\n    };\n\n    var overlayMaps = {\n      \"Environment Data\": circlesLayer,\n      \"Traffic Data\": polylinesLayer\n    };\n\n    window.L.control.layers(baseMaps, overlayMaps).addTo(mapControl);\n\n    this.map.on('zoomstart', (e) => {\n      mapZoom = mapControl.getZoom();\n    });\n\n    this.map.on('click', (e) => {\n      document.getElementById('measures_table').style.display = 'none';\n      document.getElementById('health_concerns_wrapper').style.display = 'none';\n      document.getElementById('environment_table').style.display = 'none';\n      document.getElementById('traffic_table').style.display = 'none';\n\n      currentTargetForChart = null;\n    });\n\n    const selectedTileServer = tileServers[this.ctrl.tileServer];\n    window.L.tileLayer(selectedTileServer.url, {\n      maxZoom: 18,\n      subdomains: selectedTileServer.subdomains,\n      reuseTiles: true,\n      detectRetina: true,\n      attribution: selectedTileServer.attribution\n    }).addTo(this.map, true);\n\n    const airParametersDropdown = document.getElementById('airParametersDropdown');\n\n    airParametersDropdown.addEventListener('change', function() {\n      currentParameterForChart = this.value;\n      drawChart(providedPollutants, currentTargetForChart, 1);\n    });\n\n  }\n\n  filterEmptyAndZeroValues(data) {\n    return _.filter(data, (o) => { return !(this.ctrl.panel.hideEmpty && _.isNil(o.value)) && !(this.ctrl.panel.hideZero && o.value === 0); });\n  }\n\n  clearCircles() {\n    circlesLayer.clearLayers();\n  }\n  clearMarkers() {\n    if (this.markersLayer) {\n      this.markersLayer.clearLayers();\n      this.removeMarkers(this.markersLayer);\n      globalMarkers = [];\n    }\n  }\n\n  clearPolylines() {\n    polylinesLayer.clearLayers();\n  }\n\n  dataTreatment(data) {\n    const finalData = {};\n    let auxData = {};\n\n    data.forEach((value) => {\n      if (!(finalData[value.id])) {\n        finalData[value.id] = [];\n      }\n      if (value.type === 'AirQualityObserved'){\n          finalData[value.id].push({'id': value.id, 'locationLatitude': value.locationLatitude, 'locationLongitude': value.locationLongitude, 'time': value.time, 'type': value.type, 'value': value.value,'pollutants': value.pollutants});\n      }\n      else {\n          finalData[value.id].push({'id': value.id, 'locationLatitude': value.locationLatitude, 'locationLongitude': value.locationLongitude, 'time': value.time, 'type': value.type, 'value': value.value});\n      }\n    });\n\n    return finalData;\n  }\n\n  drawPoints() {\n\n    try{\n      providedPollutants = JSON.parse(this.ctrl.panel.pollutants);\n    }catch(error){\n      throw new Error('Please insert a valid JSON in the Available Pollutants field');\n    }\n\n    this.hideAllTables();\n\n    const data = this.filterEmptyAndZeroValues(this.ctrl.data);\n\n    this.clearCircles();\n    // this.clearMarkers();\n    this.clearPolylines();\n\n    timeSeries = {};\n\n    const treatedData = this.dataTreatment(data);\n\n    this.createTimeSeries(treatedData);\n    this.createPoints(treatedData);\n\n    // Id sensor selected and new data arrives the chart will be updated (no redraw)\n    if (currentTargetForChart !== null) {\n      drawChart(providedPollutants, currentTargetForChart, 0); // call drawChart but redraw the chart just update information related\n\n      const targetType = currentTargetForChart.target.options.type;\n      const targetId = currentTargetForChart.target.options.id;\n      const currentParameter = currentParameterForChart.toLowerCase();\n      let lastMeasure;\n      let lastTime;\n\n      try{\n\n        if (targetType === 'AirQualityObserved') {\n          let timeEnvironment;\n          if (currentParameter !== 'aqi'){\n            timeEnvironment = timeSeries.pollutants[currentParameter];\n            timeEnvironment.forEach((val) => {\n              if (val.id === targetId){\n                lastTime = val.time;\n                lastMeasure = val.value;\n              } \n            });\n          }else {\n            timeEnvironment = timeSeries.values[targetId];\n            lastMeasure = timeEnvironment[timeEnvironment.length - 1].value;\n            lastTime = timeEnvironment[timeEnvironment.length - 1].time\n          }\n        }\n        if (targetType === 'TrafficFlowObserved') {\n          const timeTraffic = timeSeries.values[targetId];\n          lastMeasure = timeTraffic[timeTraffic.length - 1].value;\n          lastTime = timeTraffic[timeTraffic.length - 1].time\n        }\n\n        const time = new Date(lastTime);\n\n        const day = time.getDate();\n        const month = time.getMonth();\n        const year = time.getFullYear();\n        const hour = time.getHours() - 1;\n        const minutes = time.getMinutes();\n        const seconds = time.getSeconds();\n        const milliseconds = time.getMilliseconds();\n\n      \n        const chartLastDisplayedValue = chartSeries.data[chartSeries.data.length - 1].y;\n        const chartLastDisplayedTime = chartSeries.data[chartSeries.data.length - 1].x;\n        let chartLastDisplayedId = chartSeries.name.split(' ');\n        chartLastDisplayedId = parseInt(chartLastDisplayedId[chartLastDisplayedId.length - 1]);      \n\n        if (!(lastTime === chartLastDisplayedTime && lastMeasure === chartLastDisplayedValue && targetId === chartLastDisplayedId)){\n          chartSeries.addPoint([Date.UTC(year, month, day, hour+1, minutes, seconds, milliseconds), lastMeasure], true, true);\n        }\n      }catch(error){\n        console.log(\"Woaa! Something went wrong... Probably there is no recent data for the selected device. Here you have the error:\");\n        console.log(error);\n      }\n    }\n  }\n\n  hideAllTables() {\n    const mapDivHeight = document.getElementsByClassName('map-container')[0].offsetHeight;\n    const mapDivWidth = document.getElementsByClassName('map-container')[0].offsetWidth;\n\n    // Remove the map secundary data (tables) when the map div is too small\n    if (mapDivHeight <= 405 || mapDivHeight <= 860) {\n      document.getElementById('measures_table').style.display = 'none';\n      document.getElementById('health_concerns_wrapper').style.display = 'none';\n      document.getElementById('environment_table').style.display = 'none';\n      document.getElementById('traffic_table').style.display = 'none';\n    }\n  }\n\n  createTimeSeries(data) {\n    timeSeries = {};\n    const valueValues = {};\n    const values = [];\n    const pollutantsValues = [];\n\n    Object.keys(data).forEach((key) => {\n      data[key].forEach((point) => {\n        const id = point.id;\n        const time = point.time;\n        let pollutants = '';\n\n        const value = point.value;\n        if (point.type === 'AirQualityObserved') {\n          pollutants = point.pollutants;\n          const pollutantsTemp = {};\n\n          pollutants.forEach((pollutant) => {\n            if (!(pollutantsValues[pollutant.name])) {\n              pollutantsValues[pollutant.name] = [];\n            }\n            pollutantsValues[pollutant.name].push({'time': time, 'value': pollutant.value, 'id': id});\n          });\n        }\n\n        if (!(valueValues[point.id])) {\n          valueValues[point.id] = [];\n        }\n        valueValues[point.id].push({'time': time, 'value': value, 'id': id});\n      });\n    });\n    timeSeries = {'values': valueValues, 'pollutants': pollutantsValues};\n  }\n\n  createPoints(data) {\n    Object.keys(data).forEach((key) => {\n      const value = data[key][data[key].length - 1 ]; // Use the last data for each sensor to create on map -> avoid repeated markers on map and use just the last measurement (the one needed to show on marker)\n      if (value.type === 'AirQualityObserved') {\n        const newCircle = this.createCircle(value);\n        circlesLayer.addLayer(newCircle);\n        // globalCircles.push(newCircle);\n        // circlesLayer = this.addCircles(globalCircles);\n      } else if (value.type === 'TrafficFlowObserved') {\n        this.createMarker(value);\n        // const newMarker = this.createMarker(dataPoint);\n        // globalMarkers.push(newMarker);\n        // this.markersLayer = this.addMarkers(globalMarkers);\n      } else {\n        console.log('Map point type ' + value.type + ' invalid. Must be AirQualityObserved or TrafficFlowObserved');\n      }\n    });\n    // mapControl.removeLayer(circlesLayer);\n\n    // setTimeout(function(){\n    //     mapControl.addLayer(circlesLayer);\n    // }, 5000);\n  }\n\n  createMarker(dataPoint) {\n    // const marker = window.L.marker([dataPoint.locationLatitude, dataPoint.locationLongitude]);\n    const way = this.calculatePointPolyline(dataPoint.locationLatitude, dataPoint.locationLongitude, dataPoint.value, dataPoint.id, dataPoint.type);\n    // this.createPopupMarker(marker, dataPoint.value);\n    // return marker;\n  }\n\n  createPolyline(way, value, id, type, street_name) {\n    const polyline = [];\n    // way.forEach((point) => {\n    //   polyline.push([point[1], point[0]]);\n    // });\n\n    let colorIndex;\n    carsCount.range.forEach((_value, index) => {\n      if (value > _value) {\n        colorIndex = index;\n      }\n    });\n\n    const color = carsCount.color[colorIndex];\n\n    const polygon = window.L.polyline(way, {\n      color: color,\n      weight: 5,\n      smoothFactor: 5,\n      id: id,\n      type: type\n    }).on('click', function (e) {\n      drawChart(providedPollutants, e, 1);\n    }).on('click', this.setTarget).on('click', this.removePollDropdown);\n\n    // globalPolylines.push(polygon);\n    // polylinesLayer = this.addPolylines(globalPolylines);\n\n    polylinesLayer.addLayer(polygon);\n\n    this.createPopupPolyline(polygon, value, street_name);\n  }\n\n  calculatePointPolyline(latitude, longitude, value, id, type) {\n    const way = this.nominatim(latitude, longitude, value, id, type);\n    return way;\n  }\n\n  nominatim(latitude, longitude, value, id, type) {\n    const urlStart = 'https://nominatim-antwerp-x.s.orchestracities.com/reverse?format=json&';\n    const urlFinish = '&zoom=16&addressdetails=1&polygon_geojson=1';\n\n    window.$.ajax({\n      url: urlStart + 'lat=' + latitude + '&lon=' + longitude + urlFinish,\n      type: 'GET',\n      dataType: 'json',\n      cache: false,\n      success: (data) => {\n        let street_name = ''\n\n        if(data.address) {\n          if (data.address.road) {\n            street_name += 'data.address.road, ';\n          }\n          if(data.address.city) {\n            street_name += data.address.city;\n          }\n\n          if(data.address.country) {\n            if (data.address.city || data.address.road) {\n              street_name += ', ';\n            }\n            street_name += data.address.country;\n          }\n        }\n        \n        if (data.osm_id) {\n          this.osm(data.osm_id, value, id, type, street_name);\n        }\n        else {\n          console.log(\"OSM ID not found for: \" + latitude + \";\" + longitude);\n        }\n        // this.createPolyline(data.geojson.coordinates, value, id, type);\n      },\n      error: (error) => {\n        // this.osm(120550284, value, id, type);\n        console.log('Nominatim Error');\n        console.log(error);\n      }\n    });\n  }\n\n  osm(osm_id, value, id, type, street_name) {\n    const url = 'https://api.openstreetmap.org/api/0.6/way/' + osm_id + '/full';\n    const wayCoordinates = [];\n    const nodesAux = {}\n\n    window.$.ajax({\n      url: url,\n      type: 'GET',\n      dataType: 'xml',\n      cache: false,\n      success: (data) => {\n        const nodes = data.getElementsByTagName('node');\n        const nds = data.getElementsByTagName('nd');\n\n        let i;\n        for (i = 0; i < nodes.length; i++) {\n          let nodeId = nodes[i].attributes.id.value;\n          let lat = parseFloat(nodes[i].attributes.lat.value);\n          let lon = parseFloat(nodes[i].attributes.lon.value);\n\n          if (!(nodesAux[nodeId])) {\n            nodesAux[nodeId] = {};\n          }\n          nodesAux[nodeId].lat = lat;\n          nodesAux[nodeId].lng = lon;\n        }\n        \n        for (i = 0; i < nds.length; i++) {\n          let nd = nds[i].attributes.ref.value;\n\n          wayCoordinates.push([nodesAux[nd].lat, nodesAux[nd].lng]);\n        }\n        this.createPolyline(wayCoordinates, value, id, type, street_name);\n      },\n      error: (error) => {\n        console.log('OSM Error');\n        console.log(error);\n      }\n    });\n  }\n\n  createCircle(dataPoint) {\n    const aqi = calculateAQI(AQI, dataPoint.value);\n    const aqiColor = AQI.color[aqi];\n    const aqiMeaning = AQI.meaning[aqi];\n    const aqiRisk = AQI.risks[aqi];\n    const pollutants = dataPoint.pollutants;\n    const id = dataPoint.id;\n    const type = dataPoint.type;\n\n    pollutants.push({'name': 'aqi', 'value': dataPoint.value});\n\n    const circle = window.L.circle([dataPoint.locationLatitude, dataPoint.locationLongitude], 200, {\n      color: aqiColor,\n      fillColor: aqiColor,\n      fillOpacity: 0.5,\n      aqiColor: aqiColor,\n      aqiMeaning: aqiMeaning,\n      aqiRisk: aqiRisk,\n      pollutants: pollutants,\n      id: id,\n      type: type,\n      latitude: dataPoint.locationLatitude,\n      longitude: dataPoint.locationLongitude,\n      aqi: dataPoint.value\n    }).on('click', function (e) {\n      drawChart(providedPollutants, e, 1);\n    }).on('click', this.setTarget).on('click', this.addPollDropdown);\n\n    this.createPopupCircle(circle, dataPoint.value, aqiMeaning);\n    return circle;\n  }\n\n  addPollDropdown() {\n    // Add pollutants chart dropdown \n    document.getElementById('dataDetails').style.display = 'block';\n\n    // Remove traffic colors table\n    document.getElementById('traffic_table').style.display = 'none';\n\n    const mapDivHeight = document.getElementsByClassName('map-container')[0].offsetHeight;\n    const mapDivWidth = document.getElementsByClassName('map-container')[0].offsetWidth;\n    \n    // Only show the map secundary data (tables) when the map div is not too small\n    if (mapDivHeight >= 405 && mapDivWidth >= 860) {\n      // Add environment colors table\n      document.getElementById('environment_table').style.display = 'block';\n    }\n  }\n\n  removePollDropdown() {\n    // Remove pollutants chart dropdown\n    document.getElementById('dataDetails').style.display = 'none';\n\n    // Remove environmentcolors table\n    document.getElementById('environment_table').style.display = 'none';\n\n    const mapDivHeight = document.getElementsByClassName('map-container')[0].offsetHeight;\n    const mapDivWidth = document.getElementsByClassName('map-container')[0].offsetWidth;\n\n    // Only show the map secundary data (tables) when the map div is not too small\n    if (mapDivHeight >= 405 && mapDivWidth >= 860) {\n      // Add traffic colors table\n      document.getElementById('traffic_table').style.display = 'block';\n    }\n    \n  }\n\n  createPopupMarker(marker, value) {\n    const label = ('Cars: ' + value);\n    marker.bindPopup(label, {'offset': window.L.point(0, -2), 'className': 'worldmap-popup', 'closeButton': this.ctrl.panel.stickyLabels});\n\n    marker.on('mouseover', function onMouseOver(evt) {\n      // const layer = evt.target;\n      // layer.bringToFront();\n      this.openPopup();\n    });\n\n    if (!this.ctrl.panel.stickyLabels) {\n      marker.on('mouseout', function onMouseOut() {\n        marker.closePopup();\n      });\n    }\n  }\n\n  createPopupCircle(circle, aqi, aqiMeaning) {\n    const label = ('AQI: ' + aqi + ' (' + aqiMeaning + ')').trim();\n    circle.bindPopup(label, {'offset': window.L.point(0, -2), 'className': 'worldmap-popup', 'closeButton': this.ctrl.panel.stickyLabels});\n\n    circle.on('mouseover', function onMouseOver(evt) {\n      // const layer = evt.target;\n      // layer.bringToFront();\n      this.openPopup();\n    });\n\n    if (!this.ctrl.panel.stickyLabels) {\n      circle.on('mouseout', function onMouseOut() {\n        circle.closePopup();\n      });\n    }\n  }\n\n  createPopupPolyline(polyline, value, street_name) {\n    let label;\n\n    if (street_name !== '') {\n      label = ('Street: ' + street_name + '</br>Cars Intensity: ' + value).trim();\n    }else{\n      label = ('Cars Intensity: ' + value).trim();\n    }\n    \n    polyline.bindPopup(label, {'offset': window.L.point(0, -2), 'className': 'worldmap-popup', 'closeButton': this.ctrl.panel.stickyLabels});\n\n    polyline.on('mouseover', function onMouseOver(evt) {\n      // const layer = evt.target;\n      // layer.bringToFront();\n      this.openPopup();\n    });\n\n    if (!this.ctrl.panel.stickyLabels) {\n      polyline.on('mouseout', function onMouseOut() {\n        polyline.closePopup();\n      });\n    }\n  }\n\n  setTarget(e) {\n    currentTargetForChart = e;\n  }\n\n  resize() {\n    this.map.invalidateSize();\n  }\n\n  panToMapCenter() {\n    this.map.panTo([parseFloat(this.ctrl.panel.mapCenterLatitude), parseFloat(this.ctrl.panel.mapCenterLongitude)]);\n    this.ctrl.mapCenterMoved = false;\n  }\n\n  removeLegend() {\n    this.legend.removeFrom(this.map);\n    this.legend = null;\n  }\n\n  // addCircles(circles) {\n  //   return window.L.layerGroup(circles).addTo(this.map);\n  // }\n  addMarkers(markers) {\n    return window.L.layerGroup(markers).addTo(this.map);\n  }\n\n  addPolylines(polylines) {\n    return window.L.layerGroup(polylines).addTo(this.map);\n  }\n\n  removeCircles() {\n    this.map.removeLayer(circlesLayer);\n  }\n\n  removeMarkers() {\n    this.map.removeLayer(this.markersLayer);\n  }\n\n  removePolylines() {\n    this.map.removeLayer(polylinesLayer);\n  }\n\n  setZoom(zoomFactor) {\n    this.map.setZoom(parseInt(zoomFactor, 10));\n  }\n}\n\nfunction drawChart(providedPollutants, e, redrawChart) {\n  const currentParameter = currentParameterForChart.toLowerCase();\n\n  const chart = document.getElementById('dataChart');\n  chart.style.display = 'block';\n\n  const id = e.target.options.id;\n  const type = e.target.options.type;\n\n  const values = timeSeries.values[id];\n  let title = '';\n  let parameterUnit = '';\n\n  try {\n    const lastValueMeasure = values[values.length - 1].value; //values array is the one for the AQI values\n\n    const aqiIndex = calculateAQI(AQI, lastValueMeasure);\n\n    // Show Pollutants Legend (MAP)\n    if (type === 'AirQualityObserved') {\n      const allPollutants = timeSeries.pollutants;\n      showPollutants(providedPollutants, allPollutants, id, lastValueMeasure, currentParameterForChart);\n      showHealthConcerns(providedPollutants, AQI.risks[aqiIndex], AQI.color[aqiIndex], AQI.meaning[aqiIndex]);\n    } else { // Hide legend\n      const mapDivHeight = document.getElementsByClassName('map-container')[0].offsetHeight;\n      const mapDivWidth = document.getElementsByClassName('map-container')[0].offsetWidth;\n\n      if (mapDivHeight >= 405 && mapDivWidth >= 860) {\n        document.getElementById('traffic_table').style.display = 'block';\n      }\n      document.getElementById('health_concerns_wrapper').style.display = 'none';\n      document.getElementById('measures_table').style.display = 'none';\n    }\n  } catch(error) {\n      console.log(\"Woaa! Something went wrong... Probably there is no recent data for the selected device. Here you have the error:\");\n      console.log(error);\n  }\n\n  // ------\n\n  if (redrawChart) {\n    chartData = [];\n\n    parameterUnit = providedPollutants[currentParameter].unit;\n\n    title = providedPollutants[currentParameter].name + ' - Device ' + id;\n\n    if (type === 'AirQualityObserved' && currentParameter !== 'aqi') {\n\n      const parameterChoice = timeSeries.pollutants[currentParameter];\n      \n      parameterChoice.forEach((sensor) => {\n        if (sensor.id === id) {\n          const time = new Date(sensor.time);\n\n          const day = time.getDate();\n          const month = time.getMonth();\n          const year = time.getFullYear();\n          const hour = time.getHours() - 1;\n          const minutes = time.getMinutes();\n          const seconds = time.getSeconds();\n          const milliseconds = time.getMilliseconds();\n\n          chartData.push([Date.UTC(year, month, day, hour+1, minutes, seconds, milliseconds), sensor.value]);\n        }\n      });\n    }\n    if ((type === 'AirQualityObserved' && currentParameter === 'aqi')  || type === 'TrafficFlowObserved') {\n\n      if(type === 'TrafficFlowObserved') {\n        title = 'Cars Intensity - Device ' + id;\n        parameterUnit = 'Cars'\n      }\n\n      values.forEach((value) => {\n        const time = new Date(value.time);\n\n        const day = time.getDate();\n        const month = time.getMonth();\n        const year = time.getFullYear();\n        const hour = time.getHours() - 1;\n        const minutes = time.getMinutes();\n        const seconds = time.getSeconds();\n        const milliseconds = time.getMilliseconds();\n\n        chartData.push([Date.UTC(year, month, day, hour+1, minutes, seconds, milliseconds), value.value]);\n      });\n    }\n\n    if(!config.bootData.user.lightTheme)\n      window.Highcharts.setOptions(HIGHCHARTS_THEME_DARK);\n\n    window.Highcharts.stockChart('graphContainer', {\n        chart: {\n          height: 200,\n          zoomType: 'x',\n          events: {\n            load: function () {\n              // set up the updating of the chart each second\n              chartSeries = this.series[0];\n            }\n          }\n        },\n        title: {\n            text: title\n        },\n        subtitle: {\n            text: ''\n        },\n        xAxis: {\n            type: 'datetime'\n        },\n        yAxis: {\n            title: {\n                text: parameterUnit\n            }\n        },\n        legend: {\n            enabled: false\n        },\n        rangeSelector: {\n          buttons: [{\n              count: 5,\n              type: 'minute',\n              text: '5M'\n          }, {\n              count: 10,\n              type: 'minute',\n              text: '10M'\n          }, {\n              type: 'all',\n              text: 'All'\n          }],\n          inputEnabled: false,\n          selected: 2\n        },\n\n        series: [{\n            name: title,\n            data: chartData\n        }]\n    });\n  }\n}"]}