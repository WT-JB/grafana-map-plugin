{"version":3,"sources":["../src/worldmap.js"],"names":["showPollutants","e","measuresTable","document","getElementById","rows","deleteRow","el","firstChild","removeChild","defaultPollutantOption","createElement","html","innerHTML","appendChild","circlePollutants","target","options","pollutants","forEach","pollutant","row","insertRow","className","innerCell0","name","toUpperCase","innerCell1","value","cell0","insertCell","cell1","newPollutant","selectHTML","style","display","showHealthConcerns","healthConcernsWrapper","healthConcerns","healthRisk","risk","aqiRisk","color","aqiColor","meaning","aqiMeaning","backgroundColor","calculateAQI","aqi","aqiIndex","AQI","range","index","getAirPollutantDropdownValue","selectedIndex","drawChart","chart","id","type","values","timeSeries","title","selectedPollutant","console","log","data","time","Date","day","getDay","month","getMonth","year","getFullYear","hour","getHours","minutes","getMinutes","seconds","getSeconds","push","UTC","window","Highcharts","zoomType","text","subtitle","ontouchstart","undefined","xAxis","yAxis","legend","enabled","plotOptions","area","fillColor","linearGradient","x1","y1","x2","y2","stops","marker","radius","lineWidth","states","hover","threshold","series","_","L","carsCount","mapControl","mapZoom","globalCircles","globalMarkers","globalPolylines","tileServers","url","attribution","subdomains","carMarker","icon","iconUrl","iconSize","WorldMap","ctrl","mapContainer","createMap","circles","mapCenter","latLng","parseFloat","panel","mapCenterLatitude","mapCenterLongitude","map","worldCopyJump","center","zoomControl","fitWorld","zoomIn","parseInt","initialZoom","panTo","control","zoom","position","addTo","on","getZoom","selectedTileServer","tileServer","tileLayer","maxZoom","reuseTiles","detectRetina","filter","o","hideEmpty","isNil","hideZero","circlesLayer","clearLayers","removeCircles","markersLayer","removeMarkers","polylinesLayer","removePolylines","filterEmptyAndZeroValues","clearCircles","clearMarkers","clearPolylines","createTimeSeries","createPoints","valueValues","pollutantsValues","point","pollutantsTemp","dataPoint","newCircle","createCircle","addCircles","createMarker","way","calculatePointPolyline","locationLatitude","locationLongitude","polyline","colorIndex","_value","polygon","weight","smoothFactor","addPolylines","createPopupPolyline","latitude","longitude","nominatim","urlStart","urlFinish","$","ajax","dataType","cache","success","createPolyline","geojson","coordinates","error","alert","risks","circle","fillOpacity","createPopupCircle","label","bindPopup","stickyLabels","onMouseOver","evt","openPopup","onMouseOut","closePopup","trim","invalidateSize","mapCenterMoved","removeFrom","layerGroup","markers","polylines","removeLayer","zoomFactor","setZoom"],"mappings":"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","file":"worldmap.js","sourcesContent":["import _ from 'lodash';\n\nimport Highcharts from './libs/highcharts';\n\n/* eslint-disable id-length, no-unused-vars */\nimport L from './libs/leaflet';\n/* eslint-disable id-length, no-unused-vars */\n\nconst AQI = {\n  'range': [0, 50, 100, 150, 200, 300, 500],\n  'meaning': ['Good', 'Moderate', 'Unhealthy for Sensitive Groups', 'Unhealthy', 'Very Unhealthy', 'Hazardous'],\n  'color': ['#009966', '#ffde33', '#ff9933', '#cc0033', '#660099', '#7e0023'],\n  'risks': ['Air quality is considered satisfactory, and air pollution poses little or no risk.', 'Air quality is acceptable; however, for some pollutants there may be a moderate health concern for a very small number of people who are unusually sensitive to air pollution.', 'Members of sensitive groups may experience health effects. The general public is not likely to be affected.', 'Everyone may begin to experience health effects; members of sensitive groups may experience more serious health effects.', 'Health alert: everyone may experience more serious health effects.', 'Health warnings of emergency conditions. The entire population is more likely to be affected.']\n};\n\nconst carsCount = {\n  'range': [15, 30, 45, 60, 75, 90, 105],\n  'color': ['#009966', '#ffde33', '#ff9933', '#cc0033', '#660099', '#7e0023']\n};\n\nlet timeSeries = {};\n\nlet mapControl;\nlet mapZoom;\n\nlet globalCircles = [];\nlet globalMarkers = [];\nlet globalPolylines = [];\n\nconst tileServers = {\n  'CartoDB Positron': { url: 'https://cartodb-basemaps-{s}.global.ssl.fastly.net/light_all/{z}/{x}/{y}.png', attribution: '&copy; <a href=\"http://www.openstreetmap.org/copyright\">OpenStreetMap</a> &copy; <a href=\"http://cartodb.com/attributions\">CartoDB</a>', subdomains: 'abcd'},\n  'CartoDB Dark': {url: 'https://cartodb-basemaps-{s}.global.ssl.fastly.net/dark_all/{z}/{x}/{y}.png', attribution: '&copy; <a href=\"http://www.openstreetmap.org/copyright\">OpenStreetMap</a> &copy; <a href=\"http://cartodb.com/attributions\">CartoDB</a>', subdomains: 'abcd'}\n};\n\nconst carMarker = window.L.icon({\n  iconUrl: 'https://upload.wikimedia.org/wikipedia/commons/thumb/8/88/Map_marker.svg/2000px-Map_marker.svg.png',\n\n  iconSize: [25, 40], // size of the icon\n  // iconAnchor: [15, 82], // point of the icon which will correspond to marker's location\n  // popupAnchor: [-3, -76] // point from which the popup should open relative to the iconAnchor\n});\n\nexport default class WorldMap {\n  constructor(ctrl, mapContainer) {\n    this.ctrl = ctrl;\n    this.mapContainer = mapContainer;\n    this.createMap();\n    this.circles = [];\n  }\n\n  createMap() {\n    const mapCenter = window.L.latLng(parseFloat(this.ctrl.panel.mapCenterLatitude), parseFloat(this.ctrl.panel.mapCenterLongitude));\n    mapControl = this.map = window.L.map(this.mapContainer, {worldCopyJump: true, center: mapCenter, zoomControl: false})\n      .fitWorld()\n      .zoomIn(parseInt(this.ctrl.panel.initialZoom, 5));\n    this.map.panTo(mapCenter);\n    window.L.control.zoom({position: 'topright'}).addTo(this.map);\n\n    this.map.on('zoomstart', (e) => {\n      mapZoom = mapControl.getZoom();\n    });\n\n    // this.map.on('zoomend', (e) => {\n    //   globalCircles.forEach((circle) => {\n    //     console.log(mapZoom, e.target._zoom);\n    //     if (e.target._zoom !== 0 && e.target._zoom >= mapZoom) {\n    //       circle.setRadius(circle.getRadius() + Math.round(mapZoom));\n    //     }\n    //     if (e.target._zoom !== 0 && e.target._zoom <= mapZoom) {\n    //       circle.setRadius(circle.getRadius() - Math.round(mapZoom));\n    //     }\n    //     console.log(circle.getRadius());\n    //   });\n    // });\n\n    this.map.on('click', (e) => {\n      document.getElementById('measuresTable').style.display = 'none';\n      document.getElementById('healthConcernsWrapper').style.display = 'none';\n    });\n\n    const selectedTileServer = tileServers[this.ctrl.tileServer];\n    window.L.tileLayer(selectedTileServer.url, {\n      maxZoom: 18,\n      subdomains: selectedTileServer.subdomains,\n      reuseTiles: true,\n      detectRetina: true,\n      attribution: selectedTileServer.attribution\n    }).addTo(this.map, true);\n  }\n\n  filterEmptyAndZeroValues(data) {\n    return _.filter(data, (o) => { return !(this.ctrl.panel.hideEmpty && _.isNil(o.value)) && !(this.ctrl.panel.hideZero && o.value === 0); });\n  }\n\n  clearCircles() {\n    if (this.circlesLayer) {\n      this.circlesLayer.clearLayers();\n      this.removeCircles(this.circlesLayer);\n      globalCircles = [];\n    }\n  }\n  clearMarkers() {\n    if (this.markersLayer) {\n      this.markersLayer.clearLayers();\n      this.removeMarkers(this.markersLayer);\n      globalMarkers = [];\n    }\n  }\n\n  clearPolylines() {\n    if (this.polylinesLayer) {\n      this.polylinesLayer.clearLayers();\n      this.removePolylines(this.polylinesLayer);\n      globalPolylines = [];\n    }\n  }\n\n  drawPoints() {\n    const data = this.filterEmptyAndZeroValues(this.ctrl.data);\n    this.clearCircles();\n    this.clearMarkers();\n    this.clearPolylines();\n\n    timeSeries = {};\n\n    this.createTimeSeries(data);\n\n    this.createPoints(data);\n  }\n\n  createTimeSeries(data) {\n    timeSeries = {};\n    const valueValues = {};\n    const values = [];\n    const pollutantsValues = [];\n\n    data.forEach((point) => {\n      const id = point.id;\n      const time = point.time;\n      let pollutants = '';\n\n      if(point.type === 'environment'){\n        pollutants = point.pollutants;\n      }\n      const value = point.value;\n      \n      if(point.type === 'environment'){\n        const pollutantsTemp = {};\n\n        pollutants.forEach((pollutant) => {\n          if(!(pollutantsValues[pollutant.name])){\n            pollutantsValues[pollutant.name] = [];\n          }\n          pollutantsValues[pollutant.name].push({'time': time, 'value': pollutant.value, 'id': id});\n        });\n      }\n\n      if (!(valueValues[point.id])){\n        valueValues[point.id] = [];\n      }\n      valueValues[point.id].push({'time': time, 'value': value, 'id': id});\n    });\n    timeSeries = {'values': valueValues, 'pollutants': pollutantsValues};\n  }\n\n  createPoints(data) {\n    data.forEach((dataPoint) => {\n      if (dataPoint.type === 'environment') {\n        const newCircle = this.createCircle(dataPoint);\n        globalCircles.push(newCircle);\n        this.circlesLayer = this.addCircles(globalCircles);\n      } else if (dataPoint.type === 'traffic') {\n        this.createMarker(dataPoint);\n        // const newMarker = this.createMarker(dataPoint);\n        // globalMarkers.push(newMarker);\n        // this.markersLayer = this.addMarkers(globalMarkers);\n      } else {\n        console.log('Map point type ' + dataPoint.type + ' invalid. Must be environment or traffic');\n      }\n    });\n  }\n\n  createMarker(dataPoint) {\n    // const marker = window.L.marker([dataPoint.locationLatitude, dataPoint.locationLongitude]);\n    const way = this.calculatePointPolyline(dataPoint.locationLatitude, dataPoint.locationLongitude, dataPoint.value, dataPoint.id, dataPoint.type);\n    // this.createPopupMarker(marker, dataPoint.value);\n    // return marker;\n  }\n\n  createPolyline(way, value, id, type) {\n    const polyline = [];\n    way.forEach((point) => {\n      polyline.push([point[1], point[0]]);\n    });\n\n    let colorIndex;\n    carsCount.range.forEach((_value, index) => {\n      if (value > _value && value <= carsCount.range[index + 1]) {\n        colorIndex = index;\n      }\n    });\n\n    const color = carsCount.color[colorIndex];\n\n    const polygon = window.L.polyline(polyline, {\n      color: color,\n      weight: 5,\n      smoothFactor: 1,\n      id: id,\n      type: type\n    }).on('click', drawChart);\n\n    globalPolylines.push(polygon);\n    this.polylinesLayer = this.addPolylines(globalPolylines);\n\n    this.createPopupPolyline(polygon, value);\n  }\n\n  calculatePointPolyline(latitude, longitude, value, id, type) {\n    const way = this.nominatim(latitude, longitude, value, id, type);\n    return way;\n  }\n\n  nominatim(latitude, longitude, value, id, type) {\n    const urlStart = 'http://nominatim.openstreetmap.org/reverse?format=json&';\n    const urlFinish = '&zoom=16&addressdetails=1&polygon_geojson=1';\n\n    window.$.ajax({\n      url: urlStart + 'lat=' + latitude + '&lon=' + longitude + urlFinish,\n      type: 'GET',\n      dataType: 'json',\n      cache: false,\n      success: (data) => {\n        this.createPolyline(data.geojson.coordinates, value, id, type);\n      },\n      error: (error) => {\n        alert('Nominatim ERROR');\n      }\n    });\n  }\n\n  createCircle(dataPoint) {\n    const aqi = calculateAQI(dataPoint.value);\n    const aqiColor = AQI.color[aqi];\n    const aqiMeaning = AQI.meaning[aqi];\n    const aqiRisk = AQI.risks[aqi];\n    const pollutants = dataPoint.pollutants;\n    const id = dataPoint.id;\n    const type = dataPoint.type;\n\n    const circle = window.L.circle([dataPoint.locationLatitude, dataPoint.locationLongitude], 200, {\n      color: aqiColor,\n      fillColor: aqiColor,\n      fillOpacity: 0.5,\n      aqiColor: aqiColor,\n      aqiMeaning: aqiMeaning,\n      aqiRisk: aqiRisk,\n      pollutants: pollutants,\n      id: id,\n      type: type\n    }).on('click', drawChart).on('mouseover', showPollutants);\n\n    this.createPopupCircle(circle, dataPoint.value, aqiMeaning);\n    return circle;\n  }\n\n  createPopupMarker(marker, value) {\n    const label = ('Cars: ' + value);\n    marker.bindPopup(label, {'offset': window.L.point(0, -2), 'className': 'worldmap-popup', 'closeButton': this.ctrl.panel.stickyLabels});\n\n    marker.on('mouseover', function onMouseOver(evt) {\n      // const layer = evt.target;\n      // layer.bringToFront();\n      this.openPopup();\n    });\n\n    if (!this.ctrl.panel.stickyLabels) {\n      marker.on('mouseout', function onMouseOut() {\n        marker.closePopup();\n      });\n    }\n  }\n\n  createPopupCircle(circle, aqi, aqiMeaning) {\n    const label = ('AQI: ' + aqi + ' (' + aqiMeaning + ')').trim();\n    circle.bindPopup(label, {'offset': window.L.point(0, -2), 'className': 'worldmap-popup', 'closeButton': this.ctrl.panel.stickyLabels});\n\n    circle.on('mouseover', function onMouseOver(evt) {\n      // const layer = evt.target;\n      // layer.bringToFront();\n      this.openPopup();\n    });\n\n    if (!this.ctrl.panel.stickyLabels) {\n      circle.on('mouseout', function onMouseOut() {\n        circle.closePopup();\n      });\n    }\n  }\n\n  createPopupPolyline(polyline, value) {\n    const label = ('Number of cars: ' + value).trim();\n    polyline.bindPopup(label, {'offset': window.L.point(0, -2), 'className': 'worldmap-popup', 'closeButton': this.ctrl.panel.stickyLabels});\n\n    polyline.on('mouseover', function onMouseOver(evt) {\n      // const layer = evt.target;\n      // layer.bringToFront();\n      this.openPopup();\n    });\n\n    if (!this.ctrl.panel.stickyLabels) {\n      polyline.on('mouseout', function onMouseOut() {\n        polyline.closePopup();\n      });\n    }\n  }\n\n  resize() {\n    this.map.invalidateSize();\n  }\n\n  panToMapCenter() {\n    this.map.panTo([parseFloat(this.ctrl.panel.mapCenterLatitude), parseFloat(this.ctrl.panel.mapCenterLongitude)]);\n    this.ctrl.mapCenterMoved = false;\n  }\n\n  removeLegend() {\n    this.legend.removeFrom(this.map);\n    this.legend = null;\n  }\n\n  addCircles(circles) {\n    return window.L.layerGroup(circles).addTo(this.map);\n  }\n  addMarkers(markers) {\n    return window.L.layerGroup(markers).addTo(this.map);\n  }\n\n  addPolylines(polylines) {\n    return window.L.layerGroup(polylines).addTo(this.map);\n  }\n\n  removeCircles() {\n    this.map.removeLayer(this.circlesLayer);\n  }\n\n  removeMarkers() {\n    this.map.removeLayer(this.markersLayer);\n  }\n\n  removePolylines() {\n    this.map.removeLayer(this.polylinesLayer);\n  }\n\n  setZoom(zoomFactor) {\n    this.map.setZoom(parseInt(zoomFactor, 10));\n  }\n}\n\nfunction showPollutants(e) {\n  const measuresTable = document.getElementById('measures-table');\n\n  while (measuresTable.rows[0]) measuresTable.deleteRow(0);\n\n  // Remove air paramters from dropdown\n  var el = document.getElementById('airParametersDropdown');\n  while ( el.firstChild ) {\n    el.removeChild( el.firstChild )\n  }\n\n  // ---\n\n  // Add default pollutant option\n  const defaultPollutantOption = document.createElement('option');\n  const html = '<option value=\"0\" selected=\"selected\">Select an Air Parameter</option>';\n\n  defaultPollutantOption.innerHTML = html;\n  document.getElementById('airParametersDropdown').appendChild(defaultPollutantOption);\n\n  // -----\n  const circlePollutants = e.target.options.pollutants;\n\n  circlePollutants.forEach((pollutant) => {\n    const row = measuresTable.insertRow(0);\n    row.className = 'measure';\n\n    const innerCell0 = pollutant.name.toUpperCase();\n    const innerCell1 = pollutant.value;\n\n    const cell0 = row.insertCell(0);\n    const cell1 = row.insertCell(1);\n\n\n    cell0.innerHTML = innerCell0;\n    cell1.innerHTML = innerCell1;\n    cell0.className = 'cell';\n    cell1.className = 'cell';\n\n    // Add Pollutants to Chart Dropdown\n    const newPollutant = document.createElement('option');\n    const selectHTML = '<option value='+pollutant.name.toUpperCase()+'>'+pollutant.name.toUpperCase()+'</option>';\n\n    newPollutant.innerHTML = selectHTML;\n    document.getElementById('airParametersDropdown').appendChild(newPollutant);\n\n    // ----\n  });\n\n  document.getElementById('measuresTable').style.display = 'inherit';\n\n  showHealthConcerns(e);\n}\n\nfunction showHealthConcerns(e) {\n  const healthConcernsWrapper = document.getElementById('healthConcernsWrapper');\n  const healthConcerns = document.getElementById('healthConcerns');\n  const healthRisk = document.getElementById('healthRisk');\n\n  healthConcernsWrapper.style.display = 'inherit';\n\n  const risk = e.target.options.aqiRisk;\n  const color = e.target.options.aqiColor;\n  const meaning = e.target.options.aqiMeaning;\n\n  healthConcerns.style.backgroundColor = color;\n  healthRisk.innerHTML = risk;\n}\n\nfunction calculateAQI(aqi) {\n  let aqiIndex;\n  AQI.range.forEach((value, index) => {\n    if (aqi > value && aqi <= AQI.range[index + 1]) {\n      aqiIndex = index;\n    }\n  });\n  return aqiIndex;\n}\n\nfunction getAirPollutantDropdownValue() {\n\n  const e = document.getElementById('airParametersDropdown');\n  return  e.options[e.selectedIndex].value;\n\n}\n\nfunction drawChart(e) {\n  const chart = document.getElementById('dataChart');\n  chart.style.display = 'block';\n\n  const id = e.target.options.id;\n  const type = e.target.options.type;\n\n  const values = timeSeries.values[id];\n  let title = '';\n\n  const selectedPollutant = getAirPollutantDropdownValue();\n  console.log(selectedPollutant);\n\n  if (type === 'environment'){\n    // const pollutants = timeSeries.pollutants;\n    title = 'Air Quality Index ';\n  }\n  else {\n    title = 'Number Of Cars ';\n  }\n\n  const data = [];\n\n  values.forEach((value) => {\n    const time = new Date(value.time);\n\n    const day = time.getDay();\n    const month = time.getMonth();\n    const year = time.getFullYear();\n    const hour = time.getHours() - 1 ;\n    const minutes = time.getMinutes();\n    const seconds = time.getSeconds();\n\n    data.push([Date.UTC(year, month, day, hour, minutes, seconds), value.value]);\n  });\n\n  window.Highcharts.chart('graphContainer', {\n      chart: {\n          zoomType: 'x',\n          backgroundColor: '#1f1d1d'\n      },\n      title: {\n          text: title + 'for Sensor ' + id\n      },\n      subtitle: {\n          text: document.ontouchstart === undefined ? '' : ''\n      },\n      xAxis: {\n          type: 'datetime'\n      },\n      yAxis: {\n          title: {\n              text: title\n          }\n      },\n      legend: {\n          enabled: false\n      },\n      plotOptions: {\n          area: {\n              fillColor: {\n                linearGradient: {\n                  x1: 0,\n                  y1: 0,\n                  x2: 0,\n                  y2: 1\n                },\n                stops: [\n                    [0, '#009933'],\n                    [1, '#00FFFFFF']\n                ]\n              },\n              marker: {\n                  radius: 3\n              },\n              lineWidth: 2,\n              states: {\n                  hover: {\n                      lineWidth: 3\n                  }\n              },\n              threshold: null\n          }\n      },\n\n      series: [{\n          type: 'area',\n          name: title,\n          color: '#009933',\n          data: data\n      }]\n  });\n}\n"]}