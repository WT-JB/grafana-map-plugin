{"version":3,"sources":["../src/worldmap.js"],"names":["_","L","TILE_SERVERS","PLUGIN_PATH","dataTreatment","processData","getTimeSeries","getUpdatedChartSeries","drawPopups","renderChart","hideAllGraphPopups","getDataPointExtraFields","getDataPointStickyInfo","getMapMarkerClassName","filterEmptyAndZeroValues","DRAW_CHART","REDRAW_CHART","CIRCLE_RADIUS","POLYGON_MAGNIFY_RATIO","WorldMap","ctrl","mapContainer","validated_pollutants","timeSeries","chartSeries","chartData","currentTargetForChart","currentParameterForChart","map","layerNames","layerGroup","location","parseFloat","panel","mapCenterLatitude","mapCenterLongitude","layers","getLayers","worldCopyJump","center","zoomControl","attributionControl","setZoom","initialZoom","panTo","control","zoom","position","addTo","addLayersToMap","on","id","selectedTileServer","tileServer","tileLayer","url","maxZoom","subdomains","reuseTiles","detectRetina","attribution","document","querySelector","addEventListener","event","currentTarget","value","console","info","drawChart","overlayMaps","i","length","forEach","layer","clearLayers","pollutants","error","log","Error","data","hideEmpty","hideZero","addPointsToMap","Object","keys","key","newIcon","createIcon","type","addLayer","warn","dataPoint","styled_icon","layersIcons","icon","createMarker","createShape","createPopup","associateEvents","dataPointExtraFields","shape","defaultsDeep","circle","locationLatitude","locationLongitude","rectangle","color","polygon","markerProperties","AwesomeMarkers","prefix","markerColor","marker","stickyPopupInfo","bindPopup","point","stickyLabels","openPopup","closePopup","invalidateSize","mapCenter","isADiferentCity","setNewCoords","then","debug","flyTo","refresh","catch","mapCenterMoved","legend","removeFrom","zoomFactor","parseInt","redrawChart","selectBoxOption","target","options","name","parameterUnit","title"],"mappings":"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","file":"worldmap.js","sourcesContent":["/* eslint-disable id-length, no-unused-vars */\n\n/* Vendor specific */\nimport _ from 'lodash';\n\nimport './vendor/leaflet.awesome-markers/leaflet.awesome-markers.css!';\nimport './vendor/leaflet.awesome-markers/leaflet.awesome-markers';\n\nimport L from './vendor/leaflet/leaflet';\n\n/* App Specific */\nimport { TILE_SERVERS, PLUGIN_PATH } from './definitions';\nimport { \n  dataTreatment, processData, getTimeSeries, getUpdatedChartSeries,\n  drawPopups, renderChart, hideAllGraphPopups, getDataPointExtraFields, getDataPointStickyInfo,\n  getMapMarkerClassName\n} from './utils/map_utils';\nimport { filterEmptyAndZeroValues } from './utils/data_formatter';\n\nconst DRAW_CHART = false\nconst REDRAW_CHART = true\n\nconst CIRCLE_RADIUS = 200\nconst POLYGON_MAGNIFY_RATIO = 3\n\nexport default class WorldMap {\n\n  constructor(ctrl, mapContainer) {\n    this.ctrl = ctrl;\n    this.mapContainer = mapContainer;\n    this.validated_pollutants = {};\n    this.timeSeries = {};\n    this.chartSeries = {};\n    this.chartData = [];\n    this.currentTargetForChart = null;\n    this.currentParameterForChart = null;\n    this.map = null;\n  }\n\n  getLayers() {\n    return this.ctrl.layerNames.map(elem => L.layerGroup())\n  }\n\n  createMap() {\n    let location = [ parseFloat(this.ctrl.panel.mapCenterLatitude), parseFloat(this.ctrl.panel.mapCenterLongitude) ]\n\n    this.layers = this.getLayers()\n\n    this.map = L.map(this.mapContainer, \n      {\n        worldCopyJump: true, \n        center: location,\n        zoomControl: false, \n        attributionControl: false,\n        layers: this.layers\n      })\n      //.fitWorld()\n\n    this.map.setZoom(this.ctrl.panel.initialZoom);\n    this.map.panTo(location);\n    L.control.zoom({position: 'topright'}).addTo(this.map);\n    this.addLayersToMap();\n\n    // this.map.on('zoomstart', (e) => { mapZoom = this.map.getZoom() });\n    this.map.on('click', () => {\n      hideAllGraphPopups(this.ctrl.panel.id);\n      this.currentTargetForChart = null;\n    });\n\n    const selectedTileServer = TILE_SERVERS[this.ctrl.tileServer];\n    L.tileLayer(selectedTileServer.url, {\n      maxZoom: 18,\n      subdomains: selectedTileServer.subdomains,\n      reuseTiles: true,\n      detectRetina: true,\n      attribution: selectedTileServer.attribution\n    }).addTo(this.map, true);\n\n    document.querySelector('#parameters_dropdown_'+this.ctrl.panel.id)\n      .addEventListener('change', (event) => {\n        this.currentParameterForChart = event.currentTarget.value;\n        console.info('selecting point with value:')\n        console.info(this.currentParameterForChart)\n        this.drawChart(REDRAW_CHART);\n      }); //, {passive: true} <= to avoid blocking\n  }\n\n  addLayersToMap() {\n    this.overlayMaps = {};\n    for (let i=0; i<this.ctrl.layerNames.length; i++)\n      this.overlayMaps[this.ctrl.layerNames[i]]=this.layers[i]\n    L.control.layers({}, this.overlayMaps).addTo(this.map);\n  }\n\n  clearLayers() {\n    this.layers.forEach((layer)=>layer.clearLayers())\n  }\n\n  /* Validate pollutants for a given target*/\n  setPollutants() {\n    try {\n      this.validated_pollutants = this.ctrl.panel.pollutants;\n    } catch(error) {\n      console.log(error)\n      throw new Error('Please insert a valid JSON in the Pollutants field (Edit > Tab Worldmap > Section AirQualityObserved - Pollutents field)');\n    }\n  }\n\n  drawPoints() {\n    console.log('agregate data by key, striping unnecessary entries from recieved data...')\n    this.data = dataTreatment(\n                    filterEmptyAndZeroValues(this.ctrl.data, this.ctrl.panel.hideEmpty, this.ctrl.panel.hideZero)\n                )\n\n    this.addPointsToMap();\n  }\n\n  // Prepare series to show in chart\n  prepareSeries() {    \n    this.timeSeries = getTimeSeries(this.data);\n\n    if (this.currentTargetForChart === null) \n      return ;\n\n    this.chartSeries = getUpdatedChartSeries(this.chartSeries, this.timeSeries, this.currentParameterForChart, this.currentTargetForChart);\n  }\n\n  addPointsToMap() {\n    //console.log('addPointsToMap');\n    Object.keys(this.data).forEach((key) => {\n      const value = this.data[key][this.data[key].length - 1]; // Use the last data for each sensor to create on map -> avoid repeated markers on map and use just the last measurement (the one needed to show on marker)\n      const newIcon = this.createIcon(value);\n\n      try { \n        if(newIcon)\n          this.overlayMaps[value.type].addLayer(newIcon)\n      } catch(error) { console.warn(value); console.warn(error) }\n    });\n  }\n\n  createIcon(dataPoint) {\n    //console.log(this.ctrl.panel.layersIcons)\n    if(!dataPoint || !dataPoint.type)\n      return null;\n    \n    let styled_icon = this.ctrl.panel.layersIcons[dataPoint.type]\n    //console.debug(styled_icon ? styled_icon : 'styled_icon not found for datapoint type '+dataPoint.type+'. going to use default shape!')\n\n    let icon = styled_icon ? this.createMarker(dataPoint, styled_icon ? styled_icon : 'question') : this.createShape(dataPoint);\n\n    this.createPopup(\n      this.associateEvents(icon), \n      getDataPointStickyInfo(dataPoint, this.ctrl.panel.pollutants)\n    );\n\n    return icon;\n  }\n\n  createShape(dataPoint) {\n    let dataPointExtraFields = getDataPointExtraFields(dataPoint);\n    let shape;\n\n\n    _.defaultsDeep(dataPointExtraFields, dataPoint)\n\n    switch(dataPoint.type) {\n      case 'AirQualityObserved':\n        shape = L.circle([dataPoint.locationLatitude, dataPoint.locationLongitude], CIRCLE_RADIUS, dataPointExtraFields)\n      break;\n      case 'TrafficFlowObserved':\n        shape = L.rectangle([\n            [dataPoint.locationLatitude-(0.001*POLYGON_MAGNIFY_RATIO), dataPoint.locationLongitude-(0.0015*POLYGON_MAGNIFY_RATIO)], \n            [dataPoint.locationLatitude+(0.001*POLYGON_MAGNIFY_RATIO), dataPoint.locationLongitude+(0.0015*POLYGON_MAGNIFY_RATIO)]\n          ], dataPointExtraFields)\n        //shape = L.circle([dataPoint.locationLatitude, dataPoint.locationLongitude], CIRCLE_RADIUS, dataPointExtraFields)\n      break;\n      default:\n        dataPointExtraFields.color='green'  //default color\n        shape = L.polygon([\n          [dataPoint.locationLatitude-(0.001*POLYGON_MAGNIFY_RATIO), dataPoint.locationLongitude-(0.0015*POLYGON_MAGNIFY_RATIO)], \n          [dataPoint.locationLatitude+(0.001*POLYGON_MAGNIFY_RATIO), dataPoint.locationLongitude],\n          [dataPoint.locationLatitude-(0.001*POLYGON_MAGNIFY_RATIO), dataPoint.locationLongitude+(0.0015*POLYGON_MAGNIFY_RATIO)],\n        ], dataPointExtraFields)\n    }\n\n    return shape;\n  }\n\n  createMarker(dataPoint, styled_icon) {\n    let dataPointExtraFields = getDataPointExtraFields(dataPoint);\n    //console.debug(dataPointExtraFields)\n    //let myIcon = L.icon({\n    //  iconUrl: PLUGIN_PATH+'img/fa/'+styled_icon+'.svg',\n    //  iconSize:  [25, 25], // size of the icon\n    //  className: getMapMarkerClassName(dataPointExtraFields.value)\n    //});\n\n    let location = [dataPoint.locationLatitude, dataPoint.locationLongitude];\n\n    let markerProperties = { \n      icon: L.AwesomeMarkers.icon(\n        { \n          icon: styled_icon,\n          prefix: 'fa',\n          markerColor: dataPointExtraFields.markerColor,\n          //spin: true,\n        }        \n      )\n    }\n    _.defaultsDeep(markerProperties, dataPoint)\n\n    return L.marker(location, markerProperties);\n\n\n    // return L.marker(\n    //   [dataPointExtraFields.latitude, dataPointExtraFields.longitude], \n    //   { icon: myIcon, id: dataPointExtraFields.id, type: dataPointExtraFields.type }\n    // );\n  }\n\n  associateEvents(shape) {\n    return shape\n      .on('click', (event) => {this.currentTargetForChart = event})\n      .on('click', () => this.drawChart(REDRAW_CHART))\n  }\n\n  createPopup(shape, stickyPopupInfo) {\n    shape.bindPopup(stickyPopupInfo, \n      {\n        'offset': L.point(0, -2), \n        'className': 'worldmap-popup', \n        'closeButton': this.ctrl.panel.stickyLabels\n      }\n    );\n    shape.on('mouseover', function () { this.openPopup() });\n\n    if (!this.ctrl.panel.stickyLabels) { \n      shape.on('mouseout', function () { this.closePopup() });\n    }\n  }\n\n  setTarget(event) {\n    this.currentTargetForChart = event;\n  }\n\n  resize() {\n    this.map.invalidateSize();\n  }\n\n  panToMapCenter() {\n    let location = [parseFloat(this.ctrl.panel.mapCenterLatitude), parseFloat(this.ctrl.panel.mapCenterLongitude)]\n\n    if ( this.ctrl.panel.mapCenter === 'cityenv' && this.ctrl.isADiferentCity() ) {\n      this.ctrl.setNewCoords()\n        .then(() => {\n          console.debug('flying to a new location')\n          console.debug(location)\n          this.map.flyTo(location)\n          this.ctrl.refresh();\n        })\n        .catch(error => console.warn(error))\n      return ;\n    }\n    \n    this.map.flyTo(location);\n    this.ctrl.mapCenterMoved = false;\n  }\n\n  removeLegend() {\n    this.legend.removeFrom(this.map);\n    this.legend = null;\n  }\n\n  setZoom(zoomFactor) {\n    this.map.setZoom(parseInt(zoomFactor, 10));\n  }\n\n  drawChart(redrawChart) {\n    if(this.currentTargetForChart==null || this.timeSeries==null ) {//this.currentTargetForChart.target.options.id==null || \n      return ;\n    }\n\n    let selectBoxOption = this.currentParameterForChart || (this.currentTargetForChart.target.options.pollutants.length>0 ? this.currentTargetForChart.target.options.pollutants[0].name : 'value')\n\n    drawPopups(this.ctrl.panel.id, this.timeSeries, this.validated_pollutants, selectBoxOption, this.currentTargetForChart)\n\n    // ------\n    let parameterUnit = ''\n    let title = ''\n\n    if (redrawChart) {\n      [this.chartData, parameterUnit, title] = processData(\n        this.chartSeries,\n        this.timeSeries,\n        this.validated_pollutants,\n        selectBoxOption,\n        this.currentTargetForChart\n        )\n    }\n    \n    renderChart(this.ctrl.panel.id, this.chartSeries, this.chartData, parameterUnit, title)\n  }\n}\n"]}