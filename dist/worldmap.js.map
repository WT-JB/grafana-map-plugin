{"version":3,"sources":["../src/worldmap.js"],"names":["drawChart","providedPollutants","e","redrawChart","currentParameter","currentParameterForChart","toLowerCase","chart","document","getElementById","style","display","id","target","options","type","values","timeSeries","title","parameterUnit","lastValueMeasure","length","value","aqiIndex","calculateAQI","allPollutants","pollutants","showPollutants","showHealthConcerns","AQI","risks","color","meaning","mapDivHeight","getElementsByClassName","offsetHeight","mapDivWidth","offsetWidth","error","console","log","chartData","unit","name","parameterChoice","forEach","sensor","time","Date","day","getDate","month","getMonth","year","getFullYear","hour","getHours","minutes","getMinutes","seconds","getSeconds","milliseconds","getMilliseconds","push","UTC","window","Highcharts","stockChart","height","zoomType","events","load","chartSeries","series","text","subtitle","ontouchstart","undefined","xAxis","yAxis","legend","enabled","rangeSelector","buttons","count","inputEnabled","selected","data","_","L","carsCount","mapControl","mapZoom","globalCircles","globalMarkers","globalPolylines","circlesLayer","polylinesLayer","currentTargetForChart","tileServers","url","attribution","subdomains","carMarker","icon","iconUrl","iconSize","WorldMap","ctrl","mapContainer","createMap","circles","layerGroup","mapCenter","latLng","parseFloat","panel","mapCenterLatitude","mapCenterLongitude","map","worldCopyJump","center","zoomControl","attributionControl","layers","fitWorld","setZoom","initialZoom","_initPathRoot","_updatePathViewport","panTo","control","zoom","position","addTo","baseMaps","overlayMaps","on","getZoom","selectedTileServer","tileServer","tileLayer","maxZoom","reuseTiles","detectRetina","airParametersDropdown","addEventListener","filter","o","hideEmpty","isNil","hideZero","clearLayers","markersLayer","removeMarkers","finalData","auxData","locationLatitude","locationLongitude","JSON","parse","Error","hideAllTables","filterEmptyAndZeroValues","clearCircles","clearPolylines","treatedData","dataTreatment","createTimeSeries","createPoints","targetType","targetId","lastMeasure","lastTime","timeEnvironment","val","timeTraffic","chartLastDisplayedValue","y","chartLastDisplayedTime","x","chartLastDisplayedId","split","parseInt","addPoint","valueValues","pollutantsValues","Object","keys","key","point","pollutantsTemp","pollutant","newCircle","createCircle","addLayer","createMarker","dataPoint","way","calculatePointPolyline","street_name","polyline","colorIndex","range","_value","index","polygon","weight","smoothFactor","setTarget","removePollDropdown","createPopupPolyline","latitude","longitude","nominatim","urlStart","urlFinish","$","ajax","dataType","cache","success","address","road","city","country","osm_id","osm","wayCoordinates","nodesAux","nodes","getElementsByTagName","nds","i","nodeId","attributes","lat","lon","lng","nd","ref","createPolyline","aqi","aqiColor","aqiMeaning","aqiRisk","circle","fillColor","fillOpacity","addPollDropdown","createPopupCircle","marker","label","bindPopup","stickyLabels","onMouseOver","evt","openPopup","onMouseOut","closePopup","trim","invalidateSize","mapCenterMoved","removeFrom","markers","polylines","removeLayer","zoomFactor"],"mappings":"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","file":"worldmap.js","sourcesContent":["/* eslint-disable id-length, no-unused-vars */\nimport _ from 'lodash';\nimport Highcharts from './vendor/highcharts/highstock';\n//import './vendor/highcharts/themes/grid-light';\n//import './vendor/highcharts/themes/dark-unica';\nimport L from './vendor/leaflet/leaflet';\nimport { showPollutants, showHealthConcerns, calculateAQI } from './utils';\n\nconst AQI = {\n  'range': [0, 50, 100, 150, 200, 300, 500],\n  'meaning': ['Good', 'Moderate', 'Unhealthy for Sensitive Groups', 'Unhealthy', 'Very Unhealthy', 'Hazardous'],\n  'color': ['#00e400', '#ffff00', '#ff7e00', '#ff0000', '#8f3f97', '#7e0023'],\n  'risks': ['Air quality is considered satisfactory, and air pollution poses little or no risk.', 'Air quality is acceptable; however, for some pollutants there may be a moderate health concern for a very small number of people who are unusually sensitive to air pollution.', 'Members of sensitive groups may experience health effects. The general public is not likely to be affected.', 'Everyone may begin to experience health effects; members of sensitive groups may experience more serious health effects.', 'Health alert: everyone may experience more serious health effects.', 'Health warnings of emergency conditions. The entire population is more likely to be affected.']\n};\n\nconst carsCount = {\n  'range': [0, 15, 30, 45, 70, 85, 100],\n  'color': ['#00e400', '#ffff00', '#ff7e00', '#ff0000', '#8f3f97', '#7e0023']\n};\n\nlet providedPollutants;\n\nlet timeSeries = {};\nlet chartData = [];\nlet chartSeries;\n\nlet mapControl;\nlet mapZoom;\n\nlet globalCircles = [];\nlet globalMarkers = [];\nlet globalPolylines = [];\n\nlet circlesLayer;\nlet polylinesLayer;\n\nlet currentTargetForChart = null;\nlet currentParameterForChart = 'aqi';\n\nconst tileServers = {\n  'CartoDB Positron': { url: 'https://cartodb-basemaps-{s}.global.ssl.fastly.net/light_all/{z}/{x}/{y}.png', attribution: '&copy; <a href=\"http://www.openstreetmap.org/copyright\">OpenStreetMap</a> &copy; <a href=\"http://cartodb.com/attributions\">CartoDB</a>', subdomains: 'abcd'},\n  'CartoDB Dark': {url: 'https://cartodb-basemaps-{s}.global.ssl.fastly.net/dark_all/{z}/{x}/{y}.png', attribution: '&copy; <a href=\"http://www.openstreetmap.org/copyright\">OpenStreetMap</a> &copy; <a href=\"http://cartodb.com/attributions\">CartoDB</a>', subdomains: 'abcd'}\n};\nconst carMarker = window.L.icon({\n  iconUrl: 'images/map_marker.png',\n  iconSize: [25, 40]\n});\n\nexport default class WorldMap {\n\n  constructor(ctrl, mapContainer) {\n    this.ctrl = ctrl;\n    this.mapContainer = mapContainer;\n    this.createMap();\n    this.circles = [];\n  }\n\n  createMap() {\n    circlesLayer = window.L.layerGroup();\n    polylinesLayer = window.L.layerGroup();\n\n    const mapCenter = window.L.latLng(parseFloat(this.ctrl.panel.mapCenterLatitude), parseFloat(this.ctrl.panel.mapCenterLongitude));\n    mapControl = this.map = window.L.map(this.mapContainer, {worldCopyJump: true, center: mapCenter, zoomControl: false, attributionControl: false, layers: [polylinesLayer, circlesLayer]})\n      .fitWorld()\n      // .zoomIn(parseInt(this.ctrl.panel.initialZoom, 5));\n    this.map.setZoom(this.ctrl.panel.initialZoom);\n    this.map._initPathRoot();\n    this.map._updatePathViewport();\n\n    this.map.panTo(mapCenter);\n    window.L.control.zoom({position: 'topright'}).addTo(this.map);\n\n    circlesLayer.addTo(mapControl);\n    polylinesLayer.addTo(mapControl);\n\n    var baseMaps = {\n    };\n\n    var overlayMaps = {\n      \"Environment Data\": circlesLayer,\n      \"Traffic Data\": polylinesLayer\n    };\n\n    window.L.control.layers(baseMaps, overlayMaps).addTo(mapControl);\n\n    this.map.on('zoomstart', (e) => {\n      mapZoom = mapControl.getZoom();\n    });\n\n    this.map.on('click', (e) => {\n      document.getElementById('measuresTable').style.display = 'none';\n      document.getElementById('healthConcernsWrapper').style.display = 'none';\n      document.getElementById('environmentTable').style.display = 'none';\n      document.getElementById('trafficTable').style.display = 'none';\n\n      currentTargetForChart = null;\n    });\n\n    const selectedTileServer = tileServers[this.ctrl.tileServer];\n    window.L.tileLayer(selectedTileServer.url, {\n      maxZoom: 18,\n      subdomains: selectedTileServer.subdomains,\n      reuseTiles: true,\n      detectRetina: true,\n      attribution: selectedTileServer.attribution\n    }).addTo(this.map, true);\n\n    const airParametersDropdown = document.getElementById('airParametersDropdown');\n\n    airParametersDropdown.addEventListener('change', function() {\n      currentParameterForChart = this.value;\n      drawChart(providedPollutants, currentTargetForChart, 1);\n    });\n\n  }\n\n  filterEmptyAndZeroValues(data) {\n    return _.filter(data, (o) => { return !(this.ctrl.panel.hideEmpty && _.isNil(o.value)) && !(this.ctrl.panel.hideZero && o.value === 0); });\n  }\n\n  clearCircles() {\n    circlesLayer.clearLayers();\n    // if (circlesLayer) {\n    //   circlesLayer.clearLayers();\n    //   this.removeCircles(circlesLayer);\n    //   globalCircles = [];\n    // }\n  }\n  clearMarkers() {\n    if (this.markersLayer) {\n      this.markersLayer.clearLayers();\n      this.removeMarkers(this.markersLayer);\n      globalMarkers = [];\n    }\n  }\n\n  clearPolylines() {\n    polylinesLayer.clearLayers();\n    // polylinesLayer.layers.forEach((layer) => {\n    //   console.log(layer);\n    // });\n    // if (polylinesLayer) {\n    //   polylinesLayer.clearLayers();\n    //   this.removePolylines(polylinesLayer);\n    //   globalPolylines = [];\n    // }\n  }\n\n  dataTreatment(data) {\n    const finalData = {};\n    let auxData = {};\n\n    data.forEach((value) => {\n      if (!(finalData[value.id])) {\n        finalData[value.id] = [];\n      }\n      if (value.type === 'AirQualityObserved'){\n          finalData[value.id].push({'id': value.id, 'locationLatitude': value.locationLatitude, 'locationLongitude': value.locationLongitude, 'time': value.time, 'type': value.type, 'value': value.value,'pollutants': value.pollutants});\n      }\n      else {\n          finalData[value.id].push({'id': value.id, 'locationLatitude': value.locationLatitude, 'locationLongitude': value.locationLongitude, 'time': value.time, 'type': value.type, 'value': value.value});\n      }\n    });\n\n    return finalData;\n  }\n\n  drawPoints() {\n\n    try{\n      providedPollutants = JSON.parse(this.ctrl.panel.pollutants);\n    }catch(error){\n      throw new Error('Please insert a valid JSON in the Available Pollutants field');\n    }\n\n    this.hideAllTables();\n\n    const data = this.filterEmptyAndZeroValues(this.ctrl.data);\n\n    this.clearCircles();\n    // this.clearMarkers();\n    this.clearPolylines();\n\n    timeSeries = {};\n\n    const treatedData = this.dataTreatment(data);\n\n    this.createTimeSeries(treatedData);\n    this.createPoints(treatedData);\n\n    // Id sensor selected and new data arrives the chart will be updated (no redraw)\n    if (currentTargetForChart !== null) {\n      drawChart(providedPollutants, currentTargetForChart, 0); // call drawChart but redraw the chart just update information related\n\n      const targetType = currentTargetForChart.target.options.type;\n      const targetId = currentTargetForChart.target.options.id;\n      const currentParameter = currentParameterForChart.toLowerCase();\n      let lastMeasure;\n      let lastTime;\n\n      try{\n\n        if (targetType === 'AirQualityObserved') {\n          let timeEnvironment;\n          if (currentParameter !== 'aqi'){\n            timeEnvironment = timeSeries.pollutants[currentParameter];\n            timeEnvironment.forEach((val) => {\n              if (val.id === targetId){\n                lastTime = val.time;\n                lastMeasure = val.value;\n              } \n            });\n          }else {\n            timeEnvironment = timeSeries.values[targetId];\n            lastMeasure = timeEnvironment[timeEnvironment.length - 1].value;\n            lastTime = timeEnvironment[timeEnvironment.length - 1].time\n          }\n        }\n        if (targetType === 'TrafficFlowObserved') {\n          const timeTraffic = timeSeries.values[targetId];\n          lastMeasure = timeTraffic[timeTraffic.length - 1].value;\n          lastTime = timeTraffic[timeTraffic.length - 1].time\n        }\n\n        const time = new Date(lastTime);\n\n        const day = time.getDate();\n        const month = time.getMonth();\n        const year = time.getFullYear();\n        const hour = time.getHours() - 1;\n        const minutes = time.getMinutes();\n        const seconds = time.getSeconds();\n        const milliseconds = time.getMilliseconds();\n\n      \n        const chartLastDisplayedValue = chartSeries.data[chartSeries.data.length - 1].y;\n        const chartLastDisplayedTime = chartSeries.data[chartSeries.data.length - 1].x;\n        let chartLastDisplayedId = chartSeries.name.split(' ');\n        chartLastDisplayedId = parseInt(chartLastDisplayedId[chartLastDisplayedId.length - 1]);\n      \n\n        if (!(lastTime === chartLastDisplayedTime && lastMeasure === chartLastDisplayedValue && targetId === chartLastDisplayedId)){\n          chartSeries.addPoint([Date.UTC(year, month, day, hour+1, minutes, seconds, milliseconds), lastMeasure], true, true);\n        }\n      }catch(error){\n        console.log(\"Woaa! Something went wrong... Probably there is no recent data for the selected device. Here you have the error:\");\n        console.log(error);\n      }\n    }\n  }\n\n  hideAllTables() {\n    const mapDivHeight = document.getElementsByClassName('mapcontainer')[0].offsetHeight;\n    const mapDivWidth = document.getElementsByClassName('mapcontainer')[0].offsetWidth;\n\n    // Remove the map secundary data (tables) when the map div is too small\n    if (mapDivHeight <= 405 || mapDivHeight <= 860) {\n      document.getElementById('measuresTable').style.display = 'none';\n      document.getElementById('healthConcernsWrapper').style.display = 'none';\n      document.getElementById('environmentTable').style.display = 'none';\n      document.getElementById('trafficTable').style.display = 'none';\n    }\n  }\n\n  createTimeSeries(data) {\n    timeSeries = {};\n    const valueValues = {};\n    const values = [];\n    const pollutantsValues = [];\n\n    Object.keys(data).forEach((key) => {\n      data[key].forEach((point) => {\n        const id = point.id;\n        const time = point.time;\n        let pollutants = '';\n\n        const value = point.value;\n        if (point.type === 'AirQualityObserved') {\n          pollutants = point.pollutants;\n          const pollutantsTemp = {};\n\n          pollutants.forEach((pollutant) => {\n            if (!(pollutantsValues[pollutant.name])) {\n              pollutantsValues[pollutant.name] = [];\n            }\n            pollutantsValues[pollutant.name].push({'time': time, 'value': pollutant.value, 'id': id});\n          });\n        }\n\n        if (!(valueValues[point.id])) {\n          valueValues[point.id] = [];\n        }\n        valueValues[point.id].push({'time': time, 'value': value, 'id': id});\n      });\n    });\n    timeSeries = {'values': valueValues, 'pollutants': pollutantsValues};\n  }\n\n  createPoints(data) {\n    Object.keys(data).forEach((key) => {\n      const value = data[key][data[key].length - 1 ]; // Use the last data for each sensor to create on map -> avoid repeated markers on map and use just the last measurement (the one needed to show on marker)\n      if (value.type === 'AirQualityObserved') {\n        const newCircle = this.createCircle(value);\n        circlesLayer.addLayer(newCircle);\n        // globalCircles.push(newCircle);\n        // circlesLayer = this.addCircles(globalCircles);\n      } else if (value.type === 'TrafficFlowObserved') {\n        this.createMarker(value);\n        // const newMarker = this.createMarker(dataPoint);\n        // globalMarkers.push(newMarker);\n        // this.markersLayer = this.addMarkers(globalMarkers);\n      } else {\n        console.log('Map point type ' + value.type + ' invalid. Must be AirQualityObserved or TrafficFlowObserved');\n      }\n    });\n    // mapControl.removeLayer(circlesLayer);\n\n    // setTimeout(function(){\n    //     mapControl.addLayer(circlesLayer);\n    // }, 5000);\n  }\n\n  createMarker(dataPoint) {\n    // const marker = window.L.marker([dataPoint.locationLatitude, dataPoint.locationLongitude]);\n    const way = this.calculatePointPolyline(dataPoint.locationLatitude, dataPoint.locationLongitude, dataPoint.value, dataPoint.id, dataPoint.type);\n    // this.createPopupMarker(marker, dataPoint.value);\n    // return marker;\n  }\n\n  createPolyline(way, value, id, type, street_name) {\n    const polyline = [];\n    // way.forEach((point) => {\n    //   polyline.push([point[1], point[0]]);\n    // });\n\n    let colorIndex;\n    carsCount.range.forEach((_value, index) => {\n      if (value > _value) {\n        colorIndex = index;\n      }\n    });\n\n    const color = carsCount.color[colorIndex];\n\n    const polygon = window.L.polyline(way, {\n      color: color,\n      weight: 5,\n      smoothFactor: 5,\n      id: id,\n      type: type\n    }).on('click', function (e) {\n      drawChart(providedPollutants, e, 1);\n    }).on('click', this.setTarget).on('click', this.removePollDropdown);\n\n    // globalPolylines.push(polygon);\n    // polylinesLayer = this.addPolylines(globalPolylines);\n\n    polylinesLayer.addLayer(polygon);\n\n    this.createPopupPolyline(polygon, value, street_name);\n  }\n\n  calculatePointPolyline(latitude, longitude, value, id, type) {\n    const way = this.nominatim(latitude, longitude, value, id, type);\n    return way;\n  }\n\n  nominatim(latitude, longitude, value, id, type) {\n    const urlStart = 'https://nominatim-antwerp-x.s.orchestracities.com/reverse?format=json&';\n    const urlFinish = '&zoom=16&addressdetails=1&polygon_geojson=1';\n\n    window.$.ajax({\n      url: urlStart + 'lat=' + latitude + '&lon=' + longitude + urlFinish,\n      type: 'GET',\n      dataType: 'json',\n      cache: false,\n      success: (data) => {\n        let street_name = ''\n\n        if(data.address) {\n          if (data.address.road) {\n            street_name += 'data.address.road, ';\n          }\n          if(data.address.city) {\n            street_name += data.address.city;\n          }\n\n          if(data.address.country) {\n            if (data.address.city || data.address.road) {\n              street_name += ', ';\n            }\n            street_name += data.address.country;\n          }\n        }\n        \n        if (data.osm_id) {\n          this.osm(data.osm_id, value, id, type, street_name);\n        }\n        else {\n          console.log(\"OSM ID not found for: \" + latitude + \";\" + longitude);\n        }\n        // this.createPolyline(data.geojson.coordinates, value, id, type);\n      },\n      error: (error) => {\n        // this.osm(120550284, value, id, type);\n        console.log('Nominatim Error');\n        console.log(error);\n      }\n    });\n  }\n\n  osm(osm_id, value, id, type, street_name) {\n    const url = 'https://api.openstreetmap.org/api/0.6/way/' + osm_id + '/full';\n    const wayCoordinates = [];\n    const nodesAux = {}\n\n    window.$.ajax({\n      url: url,\n      type: 'GET',\n      dataType: 'xml',\n      cache: false,\n      success: (data) => {\n        const nodes = data.getElementsByTagName('node');\n        const nds = data.getElementsByTagName('nd');\n\n        let i;\n        for (i = 0; i < nodes.length; i++) {\n          let nodeId = nodes[i].attributes.id.value;\n          let lat = parseFloat(nodes[i].attributes.lat.value);\n          let lon = parseFloat(nodes[i].attributes.lon.value);\n\n          if (!(nodesAux[nodeId])) {\n            nodesAux[nodeId] = {};\n          }\n          nodesAux[nodeId].lat = lat;\n          nodesAux[nodeId].lng = lon;\n        }\n        \n        for (i = 0; i < nds.length; i++) {\n          let nd = nds[i].attributes.ref.value;\n\n          wayCoordinates.push([nodesAux[nd].lat, nodesAux[nd].lng]);\n        }\n        this.createPolyline(wayCoordinates, value, id, type, street_name);\n      },\n      error: (error) => {\n        console.log('OSM Error');\n        console.log(error);\n      }\n    });\n  }\n\n  createCircle(dataPoint) {\n    const aqi = calculateAQI(dataPoint.value);\n    const aqiColor = AQI.color[aqi];\n    const aqiMeaning = AQI.meaning[aqi];\n    const aqiRisk = AQI.risks[aqi];\n    const pollutants = dataPoint.pollutants;\n    const id = dataPoint.id;\n    const type = dataPoint.type;\n\n    pollutants.push({'name': 'aqi', 'value': dataPoint.value});\n\n    const circle = window.L.circle([dataPoint.locationLatitude, dataPoint.locationLongitude], 200, {\n      color: aqiColor,\n      fillColor: aqiColor,\n      fillOpacity: 0.5,\n      aqiColor: aqiColor,\n      aqiMeaning: aqiMeaning,\n      aqiRisk: aqiRisk,\n      pollutants: pollutants,\n      id: id,\n      type: type,\n      latitude: dataPoint.locationLatitude,\n      longitude: dataPoint.locationLongitude,\n      aqi: dataPoint.value\n    }).on('click', function (e) {\n      drawChart(providedPollutants, e, 1);\n    }).on('click', this.setTarget).on('click', this.addPollDropdown);\n\n    this.createPopupCircle(circle, dataPoint.value, aqiMeaning);\n    return circle;\n  }\n\n  addPollDropdown() {\n    // Add pollutants chart dropdown \n    document.getElementById('dataDetails').style.display = 'block';\n\n    // Remove traffic colors table\n    document.getElementById('trafficTable').style.display = 'none';\n\n    const mapDivHeight = document.getElementsByClassName('mapcontainer')[0].offsetHeight;\n    const mapDivWidth = document.getElementsByClassName('mapcontainer')[0].offsetWidth;\n    \n    // Only show the map secundary data (tables) when the map div is not too small\n    if (mapDivHeight >= 405 && mapDivWidth >= 860) {\n      // Add environment colors table\n      document.getElementById('environmentTable').style.display = 'block';\n    }\n  }\n\n  removePollDropdown() {\n    // Remove pollutants chart dropdown\n    document.getElementById('dataDetails').style.display = 'none';\n\n    // Remove environmentcolors table\n    document.getElementById('environmentTable').style.display = 'none';\n\n    const mapDivHeight = document.getElementsByClassName('mapcontainer')[0].offsetHeight;\n    const mapDivWidth = document.getElementsByClassName('mapcontainer')[0].offsetWidth;\n\n    // Only show the map secundary data (tables) when the map div is not too small\n    if (mapDivHeight >= 405 && mapDivWidth >= 860) {\n      // Add traffic colors table\n      document.getElementById('trafficTable').style.display = 'block';\n    }\n    \n  }\n\n  createPopupMarker(marker, value) {\n    const label = ('Cars: ' + value);\n    marker.bindPopup(label, {'offset': window.L.point(0, -2), 'className': 'worldmap-popup', 'closeButton': this.ctrl.panel.stickyLabels});\n\n    marker.on('mouseover', function onMouseOver(evt) {\n      // const layer = evt.target;\n      // layer.bringToFront();\n      this.openPopup();\n    });\n\n    if (!this.ctrl.panel.stickyLabels) {\n      marker.on('mouseout', function onMouseOut() {\n        marker.closePopup();\n      });\n    }\n  }\n\n  createPopupCircle(circle, aqi, aqiMeaning) {\n    const label = ('AQI: ' + aqi + ' (' + aqiMeaning + ')').trim();\n    circle.bindPopup(label, {'offset': window.L.point(0, -2), 'className': 'worldmap-popup', 'closeButton': this.ctrl.panel.stickyLabels});\n\n    circle.on('mouseover', function onMouseOver(evt) {\n      // const layer = evt.target;\n      // layer.bringToFront();\n      this.openPopup();\n    });\n\n    if (!this.ctrl.panel.stickyLabels) {\n      circle.on('mouseout', function onMouseOut() {\n        circle.closePopup();\n      });\n    }\n  }\n\n  createPopupPolyline(polyline, value, street_name) {\n    let label;\n\n    if (street_name !== '') {\n      label = ('Street: ' + street_name + '</br>Cars Intensity: ' + value).trim();\n    }else{\n      label = ('Cars Intensity: ' + value).trim();\n    }\n    \n    polyline.bindPopup(label, {'offset': window.L.point(0, -2), 'className': 'worldmap-popup', 'closeButton': this.ctrl.panel.stickyLabels});\n\n    polyline.on('mouseover', function onMouseOver(evt) {\n      // const layer = evt.target;\n      // layer.bringToFront();\n      this.openPopup();\n    });\n\n    if (!this.ctrl.panel.stickyLabels) {\n      polyline.on('mouseout', function onMouseOut() {\n        polyline.closePopup();\n      });\n    }\n  }\n\n  setTarget(e) {\n    currentTargetForChart = e;\n  }\n\n  resize() {\n    this.map.invalidateSize();\n  }\n\n  panToMapCenter() {\n    this.map.panTo([parseFloat(this.ctrl.panel.mapCenterLatitude), parseFloat(this.ctrl.panel.mapCenterLongitude)]);\n    this.ctrl.mapCenterMoved = false;\n  }\n\n  removeLegend() {\n    this.legend.removeFrom(this.map);\n    this.legend = null;\n  }\n\n  // addCircles(circles) {\n  //   return window.L.layerGroup(circles).addTo(this.map);\n  // }\n  addMarkers(markers) {\n    return window.L.layerGroup(markers).addTo(this.map);\n  }\n\n  addPolylines(polylines) {\n    return window.L.layerGroup(polylines).addTo(this.map);\n  }\n\n  removeCircles() {\n    this.map.removeLayer(circlesLayer);\n  }\n\n  removeMarkers() {\n    this.map.removeLayer(this.markersLayer);\n  }\n\n  removePolylines() {\n    this.map.removeLayer(polylinesLayer);\n  }\n\n  setZoom(zoomFactor) {\n    this.map.setZoom(parseInt(zoomFactor, 10));\n  }\n\n}\n\nfunction drawChart(providedPollutants, e, redrawChart) {\n  const currentParameter = currentParameterForChart.toLowerCase();\n\n  const chart = document.getElementById('dataChart');\n  chart.style.display = 'block';\n\n  const id = e.target.options.id;\n  const type = e.target.options.type;\n\n  const values = timeSeries.values[id];\n  let title = '';\n  let parameterUnit = '';\n\n  try {\n    const lastValueMeasure = values[values.length - 1].value; //values array is the one for the AQI values\n\n    const aqiIndex = calculateAQI(lastValueMeasure);\n\n    // Show Pollutants Legend (MAP)\n    if (type === 'AirQualityObserved') {\n      const allPollutants = timeSeries.pollutants;\n      showPollutants(providedPollutants, allPollutants, id, lastValueMeasure);\n      showHealthConcerns(providedPollutants, AQI.risks[aqiIndex], AQI.color[aqiIndex], AQI.meaning[aqiIndex]);\n    } else { // Hide legend\n      const mapDivHeight = document.getElementsByClassName('mapcontainer')[0].offsetHeight;\n      const mapDivWidth = document.getElementsByClassName('mapcontainer')[0].offsetWidth;\n\n      if (mapDivHeight >= 405 && mapDivWidth >= 860) {\n        document.getElementById('trafficTable').style.display = 'block';\n      }\n      document.getElementById('healthConcernsWrapper').style.display = 'none';\n      document.getElementById('measuresTable').style.display = 'none';\n    }\n  } catch(error) {\n      console.log(\"Woaa! Something went wrong... Probably there is no recent data for the selected device. Here you have the error:\");\n      console.log(error);\n  }\n\n  // ------\n\n  if (redrawChart) {\n    chartData = [];\n\n    parameterUnit = providedPollutants[currentParameter].unit;\n\n    title = providedPollutants[currentParameter].name + ' - Device ' + id;\n\n    if (type === 'AirQualityObserved' && currentParameter !== 'aqi') {\n\n      const parameterChoice = timeSeries.pollutants[currentParameter];\n      \n      parameterChoice.forEach((sensor) => {\n        if (sensor.id === id) {\n          const time = new Date(sensor.time);\n\n          const day = time.getDate();\n          const month = time.getMonth();\n          const year = time.getFullYear();\n          const hour = time.getHours() - 1;\n          const minutes = time.getMinutes();\n          const seconds = time.getSeconds();\n          const milliseconds = time.getMilliseconds();\n\n          chartData.push([Date.UTC(year, month, day, hour+1, minutes, seconds, milliseconds), sensor.value]);\n        }\n      });\n    }\n    if ((type === 'AirQualityObserved' && currentParameter === 'aqi')  || type === 'TrafficFlowObserved') {\n\n      if(type === 'TrafficFlowObserved') {\n        title = 'Cars Intensity - Device ' + id;\n        parameterUnit = 'Cars'\n      }\n\n      values.forEach((value) => {\n        const time = new Date(value.time);\n\n        const day = time.getDate();\n        const month = time.getMonth();\n        const year = time.getFullYear();\n        const hour = time.getHours() - 1;\n        const minutes = time.getMinutes();\n        const seconds = time.getSeconds();\n        const milliseconds = time.getMilliseconds();\n\n        chartData.push([Date.UTC(year, month, day, hour+1, minutes, seconds, milliseconds), value.value]);\n      });\n    }\n\n    window.Highcharts.stockChart('graphContainer', {\n        chart: {\n          height: 200,\n          zoomType: 'x',\n          events: {\n            load: function () {\n              // set up the updating of the chart each second\n              chartSeries = this.series[0];\n            }\n          }\n        },\n        title: {\n            text: title\n        },\n        subtitle: {\n            text: document.ontouchstart === undefined ? '' : ''\n        },\n        xAxis: {\n            type: 'datetime'\n        },\n        yAxis: {\n            title: {\n                text: parameterUnit\n            }\n        },\n        legend: {\n            enabled: false\n        },\n        rangeSelector: {\n          buttons: [{\n              count: 5,\n              type: 'minute',\n              text: '5M'\n          }, {\n              count: 10,\n              type: 'minute',\n              text: '10M'\n          }, {\n              type: 'all',\n              text: 'All'\n          }],\n          inputEnabled: false,\n          selected: 2\n        },\n\n        series: [{\n            name: title,\n            data: chartData\n        }]\n    });\n  }\n}"]}