{"version":3,"sources":["../src/worldmap.js"],"names":["_","Highcharts","L","drawPopups","calculateAQI","getTimeSeries","dataTreatment","getUpdatedChartSeries","hideAll","addPollDropdown","processData","renderChart","filterEmptyAndZeroValues","AQI","carsCount","tileServers","carMarker","mapZoom","circlesLayer","currentTargetForChart","currentParameterForChart","DRAW_CHART","REDRAW_CHART","WorldMap","ctrl","mapContainer","circles","validated_pollutants","timeSeries","chartSeries","chartData","createMap","layerNames","map","window","layerGroup","mapCenter","latLng","parseFloat","panel","mapCenterLatitude","mapCenterLongitude","layers","getLayers","worldCopyJump","center","zoomControl","attributionControl","fitWorld","setZoom","initialZoom","_initPathRoot","_updatePathViewport","panTo","control","zoom","position","addTo","addLayersToMap","on","e","getZoom","selectedTileServer","tileServer","tileLayer","url","maxZoom","subdomains","reuseTiles","detectRetina","attribution","self_","document","querySelector","addEventListener","event","currentTarget","value","drawChart","overlayMaps","i","length","forEach","layer","clearLayers","JSON","parse","pollutants","error","console","log","Error","data","hideEmpty","hideZero","addPointsToMap","Object","keys","key","newCircle","createCircle","type","addLayer","dataPoint","aqi","aqiColor","color","aqiMeaning","meaning","aqiRisk","risks","id","push","circle","locationLatitude","locationLongitude","latitude","longitude","fillColor","fillOpacity","setTarget","createPopupCircle","label","trim","bindPopup","point","stickyLabels","onMouseOver","openPopup","onMouseOut","closePopup","invalidateSize","mapCenterMoved","legend","removeFrom","removeLayer","zoomFactor","parseInt","redrawChart","parameterUnit","title"],"mappings":"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","file":"worldmap.js","sourcesContent":["/* eslint-disable id-length, no-unused-vars */\n\n/* Vendor specific */\nimport _ from 'lodash';\nimport Highcharts from './vendor/highcharts/highstock';\nimport L from './vendor/leaflet/leaflet';\n\n/* App Specific */\nimport { \n  drawPopups,\n  calculateAQI, getTimeSeries, dataTreatment, getUpdatedChartSeries, \n  hideAll, addPollDropdown,  processData, renderChart\n} from './utils/map_utils';\nimport { filterEmptyAndZeroValues } from './utils/data_formatter';\nimport { AQI, carsCount, tileServers, carMarker } from './definitions';\n\n\nlet mapZoom;\n\nlet circlesLayer;\n\nlet currentTargetForChart = null;\nlet currentParameterForChart = 'AQI';\n\nconst DRAW_CHART = false\nconst REDRAW_CHART = true\n\nexport default class WorldMap {\n\n  constructor(ctrl, mapContainer) {\n    this.ctrl = ctrl;\n    this.mapContainer = mapContainer;\n    this.circles = [];\n    this.validated_pollutants = {}\n    this.timeSeries = {}\n    this.chartSeries = {}\n    this.chartData = []\n\n    this.createMap();   //only called once\n  }\n\n  getLayers() {\n    return this.ctrl.layerNames.map(elem => window.L.layerGroup())\n  }\n\n  createMap() {\n    const mapCenter = window.L.latLng(\n      parseFloat(this.ctrl.panel.mapCenterLatitude), \n      parseFloat(this.ctrl.panel.mapCenterLongitude)\n      );\n\n    this.layers = this.getLayers()\n\n    this.map = window.L.map(this.mapContainer, \n      {\n        worldCopyJump: true, \n        center: mapCenter, \n        zoomControl: false, \n        attributionControl: false, \n        layers: this.layers\n      })\n      .fitWorld()\n\n    this.map.setZoom(this.ctrl.panel.initialZoom);\n    this.map._initPathRoot();\n    this.map._updatePathViewport();\n\n    this.map.panTo(mapCenter);\n    L.control.zoom({position: 'topright'}).addTo(this.map);\n\n    //    this.layers.forEach((layer)=>layer.addTo(this.map))\n\n    this.addLayersToMap();\n\n    this.map.on('zoomstart', (e) => { mapZoom = this.map.getZoom() });\n    this.map.on('click', (e) => {\n      hideAll();\n      currentTargetForChart = null;\n    });\n\n    const selectedTileServer = tileServers[this.ctrl.tileServer];\n    L.tileLayer(selectedTileServer.url, {\n      maxZoom: 18,\n      subdomains: selectedTileServer.subdomains,\n      reuseTiles: true,\n      detectRetina: true,\n      attribution: selectedTileServer.attribution\n    }).addTo(this.map, true);\n\n    let self_ = this;\n    document.querySelector('#air_parameters_dropdown')\n      .addEventListener('change', (event) => {\n        currentParameterForChart = event.currentTarget.value;\n        //console.log('event: '); console.log(event)\n        //console.log('parameter: '+currentParameterForChart)\n        //console.log('this.timeSeries: '+this.timeSeries)\n        this.drawChart(REDRAW_CHART);\n      });\n  }\n\n  addLayersToMap() {\n    this.overlayMaps = {};\n    for (let i=0; i<this.ctrl.layerNames.length; i++)\n      this.overlayMaps[this.ctrl.layerNames[i]]=this.layers[i]\n\n    L.control.layers({}, this.overlayMaps).addTo(this.map);\n  }\n\n  clearCircles() {\n    this.layers.forEach((layer)=>layer.clearLayers())\n  }\n\n  /* Validate pollutants for a given target*/\n  setPollutants() {\n    try {\n      //console.log('validating and setting pollutants')\n      //console.log(this.ctrl.panel.pollutants)\n\n      this.validated_pollutants = JSON.parse(this.ctrl.panel.pollutants);\n    } catch(error) {\n      console.log(error)\n      throw new Error('Please insert a valid JSON in the Available Pollutants ');\n    }\n  }\n\n  drawPoints() {\n    //console.log('striping unnecessary entries from recieved data...')\n    this.data = dataTreatment(\n                    filterEmptyAndZeroValues(this.ctrl.data, this.ctrl.panel.hideEmpty, this.ctrl.panel.hideZero)\n                )\n\n    this.addPointsToMap();\n    this.timeSeries = getTimeSeries(this.data);\n\n    if (currentTargetForChart === null) \n      return ;\n    this.chartSeries = getUpdatedChartSeries(this.chartSeries, this.timeSeries, currentTargetForChart, currentParameterForChart);\n    this.drawChart(DRAW_CHART ); // call drawChart but redraw the chart just update information related\n\n  }\n\n  addPointsToMap() {\n    //console.log('addPointsToMap');\n    Object.keys(this.data).forEach((key) => {\n      const value = this.data[key][this.data[key].length - 1 ]; // Use the last data for each sensor to create on map -> avoid repeated markers on map and use just the last measurement (the one needed to show on marker)\n      const newCircle = this.createCircle(value);\n      try {this.overlayMaps[value.type].addLayer(newCircle);} catch(error) {console.log(value);console.log(error)}\n    });\n  }\n\n  createCircle(dataPoint) {\n    //console.log('createCircle');\n    const aqi = calculateAQI(dataPoint.value);\n    const aqiColor = AQI.color[aqi];\n    const aqiMeaning = AQI.meaning[aqi];\n    const aqiRisk = AQI.risks[aqi];\n    const id = dataPoint.id;\n    const type = dataPoint.type;\n\n    const pollutants = dataPoint.pollutants;\n    if(pollutants)\n      pollutants.push({'name': 'aqi', 'value': dataPoint.value});\n\n    const circle = L.circle([dataPoint.locationLatitude, dataPoint.locationLongitude], 200, \n    {\n      id: id,\n      type: type,\n      latitude: dataPoint.locationLatitude,\n      longitude: dataPoint.locationLongitude,\n\n      color: aqiColor,\n      fillColor: aqiColor,\n      fillOpacity: 0.5,\n      aqiColor: aqiColor,\n      aqiMeaning: aqiMeaning,\n      aqiRisk: aqiRisk,\n      pollutants: pollutants,\n      aqi: dataPoint.value\n    })\n    .on('click', this.setTarget)\n    .on('click', () => this.drawChart(REDRAW_CHART))\n    //.on('click', addPollDropdown);\n\n    this.createPopupCircle(circle, dataPoint.value, aqiMeaning);\n    return circle;\n  }\n\n  createPopupCircle(circle, aqi, aqiMeaning) {\n    const label = ('AQI: ' + aqi + ' (' + aqiMeaning + ')').trim();\n    circle.bindPopup(label, {'offset': window.L.point(0, -2), 'className': 'worldmap-popup', 'closeButton': this.ctrl.panel.stickyLabels});\n\n    circle.on('mouseover', function onMouseOver(event) {\n      this.openPopup();\n    });\n\n    if (!this.ctrl.panel.stickyLabels) {\n      circle.on('mouseout', function onMouseOut() {\n        circle.closePopup();\n      });\n    }\n  }\n\n  setTarget(event) {\n    currentTargetForChart = event;\n  }\n\n  resize() {\n    this.map.invalidateSize();\n  }\n\n  panToMapCenter() {\n    this.map.panTo([parseFloat(this.ctrl.panel.mapCenterLatitude), parseFloat(this.ctrl.panel.mapCenterLongitude)]);\n    this.ctrl.mapCenterMoved = false;\n  }\n\n  removeLegend() {\n    this.legend.removeFrom(this.map);\n    this.legend = null;\n  }\n\n  removeCircles() {\n    this.map.removeLayer(circlesLayer);\n  }\n\n  setZoom(zoomFactor) {\n    this.map.setZoom(parseInt(zoomFactor, 10));\n  }\n\n  drawChart(redrawChart) {\n    //console.log('drawChart')\n    if(currentTargetForChart==null || this.timeSeries==null ) {\n      console.log(\"unnable to show\")\n      console.log(currentTargetForChart)\n      return;\n    }\n    \n    drawPopups(this.timeSeries, this.validated_pollutants, currentParameterForChart, currentTargetForChart)\n\n    // ------\n    let parameterUnit = ''\n    let title = ''\n\n    if (redrawChart) {\n      [this.chartData, parameterUnit, title] = processData(this.chartSeries, this.timeSeries, this.validated_pollutants, currentParameterForChart, currentTargetForChart )\n    }\n\n    renderChart(this.chartSeries, this.chartData, parameterUnit, title)\n  }\n}\n"]}