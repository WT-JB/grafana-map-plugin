{"version":3,"sources":["../src/worldmap.js"],"names":["getTranslation","measuresMetaInfo","measure","resp","filter","measure_","toLowerCase","length","_","L","TILE_SERVERS","PLUGIN_PATH","dataTreatment","processData","getTimeSeries","getUpdatedChartSeries","drawSelect","drawPopups","renderChart","hideAllGraphPopups","getDataPointExtraFields","getDataPointStickyInfo","getMapMarkerClassName","filterEmptyAndZeroValues","DRAW_CHART","REDRAW_CHART","CIRCLE_RADIUS","POLYGON_MAGNIFY_RATIO","WorldMap","ctrl","mapContainer","validated_metrics","timeSeries","chartSeries","chartData","currentTargetForChart","currentParameterForChart","map","layerNames","layerGroup","location","parseFloat","panel","mapCenterLatitude","mapCenterLongitude","layers","getLayers","worldCopyJump","center","zoomControl","attributionControl","setZoom","initialZoom","panTo","control","zoom","position","addTo","addLayersToMap","on","id","selectedTileServer","tileServer","tileLayer","url","maxZoom","subdomains","reuseTiles","detectRetina","attribution","document","querySelector","addEventListener","event","currentTarget","value","console","debug","drawPointDetails","overlayMaps","i","forEach","layer","clearLayers","metrics","error","warn","Error","Object","keys","data","layerKey","objectKey","lastObjectValues","type","newIcon","createIcon","addLayer","dataPoint","styled_icon","layersIcons","icon","createMarker","createShape","createPopup","associateEvents","dataPointExtraFields","shape","defaultsDeep","circle","latitude","longitude","rectangle","color","polygon","markerProperties","AwesomeMarkers","prefix","markerColor","marker","stickyPopupInfo","bindPopup","point","stickyLabels","openPopup","closePopup","invalidateSize","mapCenter","isADiferentCity","setNewCoords","then","flyTo","refresh","catch","mapCenterMoved","legend","removeFrom","zoomFactor","parseInt","selectedPointValues","target","options","lastValueMeasure"],"mappings":"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","file":"worldmap.js","sourcesContent":["/* eslint-disable id-length, no-unused-vars */\n\n/* Vendor specific */\nimport _ from 'lodash';\n\nimport './vendor/leaflet.awesome-markers/leaflet.awesome-markers.css!';\nimport './vendor/leaflet.awesome-markers/leaflet.awesome-markers';\n\nimport L from './vendor/leaflet/leaflet';\n\n/* App Specific */\nimport { TILE_SERVERS, PLUGIN_PATH } from './definitions';\nimport { \n  dataTreatment, processData, getTimeSeries, getUpdatedChartSeries,\n  drawSelect, drawPopups, renderChart, \n  hideAllGraphPopups, getDataPointExtraFields, getDataPointStickyInfo,\n  getMapMarkerClassName\n} from './utils/map_utils';\nimport { filterEmptyAndZeroValues } from './utils/data_formatter';\n\nconst DRAW_CHART = false\nconst REDRAW_CHART = true\n\nconst CIRCLE_RADIUS = 200\nconst POLYGON_MAGNIFY_RATIO = 3\n\nexport default class WorldMap {\n\n  constructor(ctrl, mapContainer) {\n    this.ctrl = ctrl;\n    this.mapContainer = mapContainer;\n    this.validated_metrics = {};\n    this.timeSeries = {};\n    this.chartSeries = {};\n    this.chartData = [];\n    this.currentTargetForChart = null;\n    this.currentParameterForChart = null;\n    this.map = null;\n  }\n\n  getLayers() {\n    return this.ctrl.layerNames.map(elem => L.layerGroup())\n  }\n\n  createMap() {\n    let location = [ parseFloat(this.ctrl.panel.mapCenterLatitude), parseFloat(this.ctrl.panel.mapCenterLongitude) ]\n\n    this.layers = this.getLayers()\n\n    this.map = L.map(this.mapContainer, \n      {\n        worldCopyJump: true, \n        center: location,\n        zoomControl: false, \n        attributionControl: false,\n        layers: this.layers\n      })\n      //.fitWorld()\n\n    this.map.setZoom(this.ctrl.panel.initialZoom);\n    this.map.panTo(location);\n    L.control.zoom({position: 'topright'}).addTo(this.map);\n    this.addLayersToMap();\n\n    // this.map.on('zoomstart', (e) => { mapZoom = this.map.getZoom() });\n    this.map.on('click', () => {\n      hideAllGraphPopups(this.ctrl.panel.id);\n      this.currentTargetForChart = null;\n    });\n\n    const selectedTileServer = TILE_SERVERS[this.ctrl.tileServer];\n    L.tileLayer(selectedTileServer.url, {\n      maxZoom: 18,\n      subdomains: selectedTileServer.subdomains,\n      reuseTiles: true,\n      detectRetina: true,\n      attribution: selectedTileServer.attribution\n    }).addTo(this.map, true);\n\n    document.querySelector('#parameters_dropdown_'+this.ctrl.panel.id)\n      .addEventListener('change', (event) => {\n        this.currentParameterForChart = event.currentTarget.value;\n        console.debug('selecting point for measure:')\n        console.debug(this.currentParameterForChart)\n        this.drawPointDetails();\n      }); //, {passive: true} <= to avoid blocking\n  }\n\n  addLayersToMap() {\n    this.overlayMaps = {};\n    for (let i=0; i<this.ctrl.layerNames.length; i++)\n      this.overlayMaps[this.ctrl.layerNames[i]]=this.layers[i]\n    L.control.layers({}, this.overlayMaps).addTo(this.map);\n  }\n\n  clearLayers() {\n    this.layers.forEach((layer)=>layer.clearLayers())\n  }\n\n  /* Validate metrics for a given target*/\n  setMetrics() {\n    try {\n      this.validated_metrics = this.ctrl.panel.metrics;\n    } catch(error) {\n      console.warn(error)\n      throw new Error('Please insert a valid JSON in the Metrics field (Edit > Tab Worldmap > Section AirQualityObserved - Metrics field)');\n    }\n  }\n\n  drawPoints() {\n    Object.keys(this.ctrl.data).forEach((layerKey) => {\n      let layer = this.ctrl.data[layerKey]\n\n      //for each layer\n      Object.keys(layer).forEach((objectKey) => {\n        let lastObjectValues = layer[objectKey][layer[objectKey].length-1]\n        lastObjectValues.type = layerKey\n\n        let newIcon = this.createIcon(lastObjectValues);\n\n        try { \n          if(newIcon)\n            this.overlayMaps[layerKey].addLayer(newIcon)\n        } catch(error) { console.warn(layerKey); console.warn(error) }\n      })\n    });\n  }\n\n  createIcon(dataPoint) {\n    //console.log(this.ctrl.panel.layersIcons)\n    if(!dataPoint || !dataPoint.type)\n      return null;\n    \n    let styled_icon = this.ctrl.panel.layersIcons[dataPoint.type]\n    let icon = styled_icon ? this.createMarker(dataPoint, styled_icon ? styled_icon : 'question') : this.createShape(dataPoint);\n\n    this.createPopup(\n      this.associateEvents(icon), \n      getDataPointStickyInfo(dataPoint, this.ctrl.panel.metrics)\n    );\n\n    return icon;\n  }\n\n  createShape(dataPoint) {\n    let dataPointExtraFields = getDataPointExtraFields(dataPoint);\n    let shape;\n\n    _.defaultsDeep(dataPointExtraFields, dataPoint)\n\n    switch(dataPoint.type) {\n      case 'AirQualityObserved':\n        shape = L.circle([dataPoint.latitude, dataPoint.longitude], CIRCLE_RADIUS, dataPointExtraFields)\n      break;\n      case 'TrafficFlowObserved':\n        shape = L.rectangle([\n            [dataPoint.latitude-(0.001*POLYGON_MAGNIFY_RATIO), dataPoint.longitude-(0.0015*POLYGON_MAGNIFY_RATIO)], \n            [dataPoint.latitude+(0.001*POLYGON_MAGNIFY_RATIO), dataPoint.longitude+(0.0015*POLYGON_MAGNIFY_RATIO)]\n          ], dataPointExtraFields)\n        //shape = L.circle([dataPoint.locationLatitude, dataPoint.locationLongitude], CIRCLE_RADIUS, dataPointExtraFields)\n      break;\n      default:\n        dataPointExtraFields.color='green'  //default color\n        shape = L.polygon([\n          [dataPoint.latitude-(0.001*POLYGON_MAGNIFY_RATIO), dataPoint.longitude-(0.0015*POLYGON_MAGNIFY_RATIO)], \n          [dataPoint.latitude+(0.001*POLYGON_MAGNIFY_RATIO), dataPoint.longitude],\n          [dataPoint.latitude-(0.001*POLYGON_MAGNIFY_RATIO), dataPoint.longitude+(0.0015*POLYGON_MAGNIFY_RATIO)],\n        ], dataPointExtraFields)\n    }\n\n    return shape;\n  }\n\n  createMarker(dataPoint, styled_icon) {\n    let dataPointExtraFields = getDataPointExtraFields(dataPoint);\n    let location = [dataPoint.latitude, dataPoint.longitude];\n\n    let markerProperties = { \n      icon: L.AwesomeMarkers.icon(\n        { \n          icon: styled_icon,\n          prefix: 'fa',\n          markerColor: dataPointExtraFields.markerColor,\n          //spin: true,\n        }        \n      )\n    }\n    _.defaultsDeep(markerProperties, dataPoint)\n\n    return L.marker(location, markerProperties);\n  }\n\n  associateEvents(shape) {\n    return shape\n      .on('click', (event) => {this.currentTargetForChart = event})\n      .on('click', () => this.drawPointDetails())\n  }\n\n  createPopup(shape, stickyPopupInfo) {\n    shape.bindPopup(stickyPopupInfo, \n      {\n        'offset': L.point(0, -2), \n        'className': 'worldmap-popup', \n        'closeButton': this.ctrl.panel.stickyLabels\n      }\n    );\n    shape.on('mouseover', function () { this.openPopup() });\n\n    if (!this.ctrl.panel.stickyLabels) { \n      shape.on('mouseout', function () { this.closePopup() });\n    }\n  }\n\n  setTarget(event) {\n    this.currentTargetForChart = event;\n  }\n\n  resize() {\n    this.map.invalidateSize();\n  }\n\n  panToMapCenter() {\n    let location = [parseFloat(this.ctrl.panel.mapCenterLatitude), parseFloat(this.ctrl.panel.mapCenterLongitude)]\n\n    if ( this.ctrl.panel.mapCenter === 'cityenv' && this.ctrl.isADiferentCity() ) {\n      this.ctrl.setNewCoords()\n        .then(() => {\n          console.debug('flying to a new location')\n          console.debug(location)\n          this.map.flyTo(location)\n          this.ctrl.refresh();\n        })\n        .catch(error => console.warn(error))\n      return ;\n    }\n    \n    this.map.flyTo(location);\n    this.ctrl.mapCenterMoved = false;\n  }\n\n  removeLegend() {\n    this.legend.removeFrom(this.map);\n    this.legend = null;\n  }\n\n  setZoom(zoomFactor) {\n    this.map.setZoom(parseInt(zoomFactor, 10));\n  }\n\n  drawPointDetails() {\n    console.debug('drawPointDetails')\n    if(this.currentTargetForChart==null){\n      console.debug('no point selected in map')\n      return ;\n    }\n\n    let currentParameterForChart = this.currentParameterForChart || 'value'\n\n    let selectedPointValues = this.ctrl.data[this.currentTargetForChart.target.options.type][this.currentTargetForChart.target.options.id];\n    let lastValueMeasure = selectedPointValues[selectedPointValues.length - 1];\n\n    drawSelect(this.ctrl.panel.id, lastValueMeasure, this.validated_metrics, currentParameterForChart)\n\n    drawPopups(this.ctrl.panel.id, lastValueMeasure, this.validated_metrics, currentParameterForChart)\n\n    renderChart(this.ctrl.panel.id, selectedPointValues, \n      getTranslation(this.validated_metrics, currentParameterForChart),\n      [\n        this.currentTargetForChart.target.options.type,\n        this.currentTargetForChart.target.options.id,\n        currentParameterForChart\n      ])\n  }\n}\n\nfunction getTranslation(measuresMetaInfo, measure) {\n  let resp = measuresMetaInfo.filter((measure_)=>measure_[0].toLowerCase()===measure.toLowerCase())\n  return resp.length>0 ? resp[0] : [measure, measure, null]\n}"]}