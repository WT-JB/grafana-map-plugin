{"version":3,"sources":["../src/worldmap.js"],"names":["showPollutants","e","measuresTable","document","getElementById","rows","deleteRow","circlePollutants","target","options","pollutants","forEach","pollutant","row","insertRow","className","innerCell0","name","toUpperCase","innerCell1","value","cell0","insertCell","cell1","innerHTML","style","display","showHealthConcerns","healthConcernsWrapper","healthConcerns","healthRisk","risk","aqiRisk","color","aqiColor","meaning","aqiMeaning","backgroundColor","calculateAQI","aqi","aqiIndex","AQI","range","index","_","L","mapControl","mapZoom","globalCircles","globalMarkers","tileServers","url","attribution","subdomains","carMarker","window","icon","iconUrl","iconSize","WorldMap","ctrl","mapContainer","createMap","circles","mapCenter","latLng","parseFloat","panel","mapCenterLatitude","mapCenterLongitude","map","worldCopyJump","center","zoomControl","fitWorld","zoomIn","parseInt","initialZoom","panTo","control","zoom","position","addTo","on","getZoom","selectedTileServer","tileServer","tileLayer","maxZoom","reuseTiles","detectRetina","data","filter","o","hideEmpty","isNil","hideZero","circlesLayer","clearLayers","removeCircles","markersLayer","removeMarkers","filterEmptyAndZeroValues","clearCircles","clearMarkers","createPoints","dataPoint","type","newCircle","createCircle","push","addCircles","newMarker","createMarker","addMarkers","console","log","marker","locationLatitude","locationLongitude","createPopupMarker","risks","circle","fillColor","fillOpacity","createPopupCircle","label","bindPopup","point","stickyLabels","onMouseOver","evt","openPopup","onMouseOut","closePopup","trim","invalidateSize","mapCenterMoved","legend","removeFrom","layerGroup","markers","removeLayer","zoomFactor","setZoom"],"mappings":"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","file":"worldmap.js","sourcesContent":["import _ from 'lodash';\n/* eslint-disable id-length, no-unused-vars */\nimport L from './libs/leaflet';\n/* eslint-disable id-length, no-unused-vars */\n\nconst AQI = {\n  'range': [0, 50, 100, 150, 200, 300, 500],\n  'meaning': ['Good', 'Moderate', 'Unhealthy for Sensitive Groups', 'Unhealthy', 'Very Unhealthy', 'Hazardous'],\n  'color': ['#009966', '#ffde33', '#ff9933', '#cc0033', '#660099', '#7e0023'],\n  'risks': ['Air quality is considered satisfactory, and air pollution poses little or no risk.', 'Air quality is acceptable; however, for some pollutants there may be a moderate health concern for a very small number of people who are unusually sensitive to air pollution.', 'Members of sensitive groups may experience health effects. The general public is not likely to be affected.', 'Everyone may begin to experience health effects; members of sensitive groups may experience more serious health effects.', 'Health alert: everyone may experience more serious health effects.', 'Health warnings of emergency conditions. The entire population is more likely to be affected.']\n};\n\nlet mapControl;\nlet mapZoom;\n\nlet globalCircles = [];\nlet globalMarkers = [];\n\nconst tileServers = {\n  'CartoDB Positron': { url: 'https://cartodb-basemaps-{s}.global.ssl.fastly.net/light_all/{z}/{x}/{y}.png', attribution: '&copy; <a href=\"http://www.openstreetmap.org/copyright\">OpenStreetMap</a> &copy; <a href=\"http://cartodb.com/attributions\">CartoDB</a>', subdomains: 'abcd'},\n  'CartoDB Dark': {url: 'https://cartodb-basemaps-{s}.global.ssl.fastly.net/dark_all/{z}/{x}/{y}.png', attribution: '&copy; <a href=\"http://www.openstreetmap.org/copyright\">OpenStreetMap</a> &copy; <a href=\"http://cartodb.com/attributions\">CartoDB</a>', subdomains: 'abcd'}\n};\n\nconst carMarker = window.L.icon({\n  iconUrl: 'https://upload.wikimedia.org/wikipedia/commons/thumb/8/88/Map_marker.svg/2000px-Map_marker.svg.png',\n\n  iconSize: [25, 40], // size of the icon\n  // iconAnchor: [15, 82], // point of the icon which will correspond to marker's location\n  // popupAnchor: [-3, -76] // point from which the popup should open relative to the iconAnchor\n});\n\nexport default class WorldMap {\n  constructor(ctrl, mapContainer) {\n    this.ctrl = ctrl;\n    this.mapContainer = mapContainer;\n    this.createMap();\n    this.circles = [];\n  }\n\n  createMap() {\n    const mapCenter = window.L.latLng(parseFloat(this.ctrl.panel.mapCenterLatitude), parseFloat(this.ctrl.panel.mapCenterLongitude));\n    mapControl = this.map = window.L.map(this.mapContainer, {worldCopyJump: true, center: mapCenter, zoomControl: false})\n      .fitWorld()\n      .zoomIn(parseInt(this.ctrl.panel.initialZoom, 5));\n    this.map.panTo(mapCenter);\n    window.L.control.zoom({position: 'topright'}).addTo(this.map);\n\n    this.map.on('zoomstart', (e) => {\n      mapZoom = mapControl.getZoom();\n    });\n\n    // this.map.on('zoomend', (e) => {\n    //   globalCircles.forEach((circle) => {\n    //     console.log(mapZoom, e.target._zoom);\n    //     if (e.target._zoom !== 0 && e.target._zoom >= mapZoom) {\n    //       circle.setRadius(circle.getRadius() + Math.round(mapZoom));\n    //     }\n    //     if (e.target._zoom !== 0 && e.target._zoom <= mapZoom) {\n    //       circle.setRadius(circle.getRadius() - Math.round(mapZoom));\n    //     }\n    //     console.log(circle.getRadius());\n    //   });\n    // });\n\n    this.map.on('click', (e) => {\n      document.getElementById('measuresTable').style.display = 'none';\n      document.getElementById('healthConcernsWrapper').style.display = 'none';\n    });\n\n    const selectedTileServer = tileServers[this.ctrl.tileServer];\n    window.L.tileLayer(selectedTileServer.url, {\n      maxZoom: 18,\n      subdomains: selectedTileServer.subdomains,\n      reuseTiles: true,\n      detectRetina: true,\n      attribution: selectedTileServer.attribution\n    }).addTo(this.map, true);\n  }\n\n  // createLegend() {\n  //   this.legend = window.L.control({position: 'bottomleft'});\n  //   this.legend.onAdd = () => {\n  //     this.legend._div = window.L.DomUtil.create('div', 'info legend');\n  //     this.legend.update();\n  //     return this.legend._div;\n  //   };\n\n  //   this.legend.update = () => {\n  //     const thresholds = this.ctrl.data.thresholds;\n  //     let legendHtml = '';\n  //     legendHtml += '<i style=\"background:' + this.ctrl.panel.colors[0] + '\"></i> ' +\n  //         '&lt; ' + thresholds[0] + '<br>';\n  //     for (let index = 0; index < thresholds.length; index += 1) {\n  //       legendHtml +=\n  //         '<i style=\"background:' + this.getColor(thresholds[index] + 1) + '\"></i> ' +\n  //         thresholds[index] + (thresholds[index + 1] ? '&ndash;' + thresholds[index + 1] + '<br>' : '+');\n  //     }\n  //     this.legend._div.innerHTML = legendHtml;\n  //   };\n  //   this.legend.addTo(this.map);\n  // }\n\n  // needToRedrawCircles(data) {\n  //   if (this.circles.length === 0 && data.length > 0) return true;\n\n  //   if (this.circles.length !== data.length) return true;\n  //   const locations = _.map(_.map(this.circles, 'options'), 'location').sort();\n  //   const dataPoints = _.map(data, 'key').sort();\n  //   return !_.isEqual(locations, dataPoints);\n  // }\n\n  filterEmptyAndZeroValues(data) {\n    return _.filter(data, (o) => { return !(this.ctrl.panel.hideEmpty && _.isNil(o.value)) && !(this.ctrl.panel.hideZero && o.value === 0); });\n  }\n\n  clearCircles() {\n    if (this.circlesLayer) {\n      this.circlesLayer.clearLayers();\n      this.removeCircles(this.circlesLayer);\n      globalCircles = [];\n    }\n  }\n  clearMarkers() {\n    if (this.markersLayer) {\n      this.markersLayer.clearLayers();\n      this.removeMarkers(this.markersLayer);\n      globalMarkers = [];\n    }\n  }\n  // drawMarkers() {\n  //   const data = this.filterEmptyAndZeroValues(this.ctrl.data);\n  //   // console.log(data);\n  //   data.forEach((dataPoint) => {\n  //     this.createMarker(dataPoint);\n  //   });\n  // }\n\n  // createMarker(dataPoint) {\n  //   const markers = [];\n\n  //   const marker = window.L.marker([dataPoint.locationLatitude, dataPoint.locationLongitude]).on('click', onClickMarker);\n\n  //   if (markers.indexOf(marker) === -1) {\n  //     markers.push(marker);\n  //     this.circlesLayer = this.addCircles(markers);\n  //     this.markers = markers;\n\n  //     this.createPopup(marker, dataPoint.name, dataPoint.value);\n  //   }\n  // }\n\n  drawPoints() {\n    const data = this.filterEmptyAndZeroValues(this.ctrl.data);\n    this.clearCircles();\n    this.clearMarkers();\n    this.createPoints(data);\n  }\n\n  createPoints(data) {\n    data.forEach((dataPoint) => {\n      if (dataPoint.type === 'environment') {\n        const newCircle = this.createCircle(dataPoint);\n        globalCircles.push(newCircle);\n        this.circlesLayer = this.addCircles(globalCircles);\n      } else if (dataPoint.type === 'traffic') {\n        const newMarker = this.createMarker(dataPoint);\n        globalMarkers.push(newMarker);\n        this.markersLayer = this.addMarkers(globalMarkers);\n      } else {\n        console.log('Map point type ' + dataPoint.type + ' invalid. Must be environment or traffic');\n      }\n    });\n  }\n\n  createMarker(dataPoint) {\n    const marker = window.L.marker([dataPoint.locationLatitude, dataPoint.locationLongitude]);\n\n    this.createPopupMarker(marker, dataPoint.value);\n    return marker;\n  }\n\n  // updateCircles(data) {\n  //   data.forEach((dataPoint) => {\n  //     if (!dataPoint.locationName) return;\n\n  //     const circle = _.find(this.circles, (cir) => { return cir.options.location === dataPoint.key; });\n\n  //     if (circle) {\n  //       circle.setRadius(this.calcCircleSize(dataPoint.value || 0));\n  //       circle.setStyle({\n  //         color: this.getColor(dataPoint.value),\n  //         fillColor: this.getColor(dataPoint.value),\n  //         fillOpacity: 0.5,\n  //         location: dataPoint.key,\n  //       });\n  //       circle.unbindPopup();\n  //       this.createPopup(circle, dataPoint.locationName, dataPoint.valueRounded);\n  //     }\n  //   });\n  // }\n\n  createCircle(dataPoint) {\n    const aqi = calculateAQI(dataPoint.value);\n    const aqiColor = AQI.color[aqi];\n    const aqiMeaning = AQI.meaning[aqi];\n    const aqiRisk = AQI.risks[aqi];\n    const pollutants = dataPoint.pollutants;\n\n    const circle = window.L.circle([dataPoint.locationLatitude, dataPoint.locationLongitude], 200, {\n      color: aqiColor,\n      fillColor: aqiColor,\n      fillOpacity: 0.5,\n      aqiColor: aqiColor,\n      aqiMeaning: aqiMeaning,\n      aqiRisk: aqiRisk,\n      pollutants: pollutants\n    }).on('click', showPollutants).on('mouseover', showPollutants);\n\n    this.createPopupCircle(circle, dataPoint.value, aqiMeaning);\n    return circle;\n  }\n\n  // calcCircleSize(dataPointValue) {\n  //   const circleMinSize = parseInt(this.ctrl.panel.circleMinSize, 10) || 2;\n  //   const circleMaxSize = parseInt(this.ctrl.panel.circleMaxSize, 10) || 30;\n\n  //   if (this.ctrl.data.valueRange === 0) {\n  //     return circleMaxSize;\n  //   }\n\n  //   const dataFactor = (dataPointValue - this.ctrl.data.lowestValue) / this.ctrl.data.valueRange;\n  //   const circleSizeRange = circleMaxSize - circleMinSize;\n\n  //   return (circleSizeRange * dataFactor) + circleMinSize;\n  // }\n  createPopupMarker(marker, value) {\n    const label = ('Cars: ' + value);\n    marker.bindPopup(label, {'offset': window.L.point(0, -2), 'className': 'worldmap-popup', 'closeButton': this.ctrl.panel.stickyLabels});\n\n    marker.on('mouseover', function onMouseOver(evt) {\n      // const layer = evt.target;\n      // layer.bringToFront();\n      this.openPopup();\n    });\n\n    if (!this.ctrl.panel.stickyLabels) {\n      marker.on('mouseout', function onMouseOut() {\n        marker.closePopup();\n      });\n    }\n  }\n\n  createPopupCircle(circle, aqi, aqiMeaning) {\n    const label = ('AQI: ' + aqi + ' (' + aqiMeaning + ')').trim();\n    circle.bindPopup(label, {'offset': window.L.point(0, -2), 'className': 'worldmap-popup', 'closeButton': this.ctrl.panel.stickyLabels});\n\n    circle.on('mouseover', function onMouseOver(evt) {\n      // const layer = evt.target;\n      // layer.bringToFront();\n      this.openPopup();\n    });\n\n    if (!this.ctrl.panel.stickyLabels) {\n      circle.on('mouseout', function onMouseOut() {\n        circle.closePopup();\n      });\n    }\n  }\n\n  resize() {\n    this.map.invalidateSize();\n  }\n\n  panToMapCenter() {\n    this.map.panTo([parseFloat(this.ctrl.panel.mapCenterLatitude), parseFloat(this.ctrl.panel.mapCenterLongitude)]);\n    this.ctrl.mapCenterMoved = false;\n  }\n\n  removeLegend() {\n    this.legend.removeFrom(this.map);\n    this.legend = null;\n  }\n\n  addCircles(circles) {\n    return window.L.layerGroup(circles).addTo(this.map);\n  }\n  addMarkers(markers) {\n    return window.L.layerGroup(markers).addTo(this.map);\n  }\n\n  removeCircles() {\n    this.map.removeLayer(this.circlesLayer);\n  }\n\n  removeMarkers() {\n    this.map.removeLayer(this.markersLayer);\n  }\n\n  setZoom(zoomFactor) {\n    this.map.setZoom(parseInt(zoomFactor, 10));\n  }\n\n  // remove() {\n  //   this.circles = [];\n  //   if (this.circlesLayer) this.removeCircles();\n  //   if (this.legend) this.removeLegend();\n  //   this.map.remove();\n  // }\n}\n\nfunction showPollutants(e) {\n  const measuresTable = document.getElementById('measures-table');\n\n  while (measuresTable.rows[0]) measuresTable.deleteRow(0);\n\n  const circlePollutants = e.target.options.pollutants;\n\n  circlePollutants.forEach((pollutant) => {\n    const row = measuresTable.insertRow(0);\n    row.className = 'measure';\n\n    const innerCell0 = pollutant.name.toUpperCase();\n    const innerCell1 = pollutant.value;\n\n    const cell0 = row.insertCell(0);\n    const cell1 = row.insertCell(1);\n\n\n    cell0.innerHTML = innerCell0;\n    cell1.innerHTML = innerCell1;\n    cell0.className = 'cell';\n    cell1.className = 'cell';\n  });\n\n  document.getElementById('measuresTable').style.display = 'inherit';\n\n  showHealthConcerns(e);\n}\n\nfunction showHealthConcerns(e) {\n  const healthConcernsWrapper = document.getElementById('healthConcernsWrapper');\n  const healthConcerns = document.getElementById('healthConcerns');\n  const healthRisk = document.getElementById('healthRisk');\n\n  healthConcernsWrapper.style.display = 'inherit';\n\n  const risk = e.target.options.aqiRisk;\n  const color = e.target.options.aqiColor;\n  const meaning = e.target.options.aqiMeaning;\n\n  healthConcerns.style.backgroundColor = color;\n  healthRisk.innerHTML = risk;\n}\n\nfunction calculateAQI(aqi) {\n  let aqiIndex;\n  AQI.range.forEach((value, index) => {\n    if (aqi > value && aqi <= AQI.range[index + 1]) {\n      aqiIndex = index;\n    }\n  });\n  return aqiIndex;\n}\n"]}