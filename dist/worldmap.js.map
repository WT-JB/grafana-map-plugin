{"version":3,"sources":["../src/worldmap.js"],"names":["_","Highcharts","L","tileServers","PLUGIN_PATH","dataTreatment","processData","getTimeSeries","getUpdatedChartSeries","drawPopups","renderChart","hideAllGraphPopups","getDataPointValues","getDataPointStickyInfo","getMapMarkerClassName","filterEmptyAndZeroValues","DRAW_CHART","REDRAW_CHART","CIRCLE_RADIUS","POLYGON_MAGNIFY_RATIO","WorldMap","ctrl","mapContainer","validated_pollutants","timeSeries","chartSeries","chartData","currentTargetForChart","createMap","layerNames","map","layerGroup","mapCenter","latLng","parseFloat","panel","mapCenterLatitude","mapCenterLongitude","layers","getLayers","worldCopyJump","center","zoomControl","attributionControl","fitWorld","setZoom","initialZoom","panTo","control","zoom","position","addTo","addLayersToMap","on","id","selectedTileServer","tileServer","tileLayer","url","maxZoom","subdomains","reuseTiles","detectRetina","attribution","document","querySelector","addEventListener","event","currentParameterForChart","currentTarget","value","drawChart","overlayMaps","i","length","forEach","layer","clearLayers","JSON","parse","resources","airQualityObserved","pollutants","error","console","log","Error","data","hideEmpty","hideZero","addPointsToMap","Object","keys","key","newIcon","createIcon","type","addLayer","dataPoint","styled_icon","layersIcons","icon","createMarker","createShape","createPopup","associateEvents","dataPointDetails","shape","circle","locationLatitude","locationLongitude","rectangle","color","polygon","myIcon","iconUrl","iconSize","className","marker","latitude","longitude","stickyPopupInfo","bindPopup","point","stickyLabels","openPopup","closePopup","invalidateSize","isADiferentCity","setNewCoords","then","flyTo","catch","mapCenterMoved","legend","removeFrom","zoomFactor","parseInt","redrawChart","parameterUnit","title"],"mappings":"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","file":"worldmap.js","sourcesContent":["/* eslint-disable id-length, no-unused-vars */\n\n/* Vendor specific */\nimport _ from 'lodash';\nimport Highcharts from './vendor/highcharts/highstock';\nimport L from './vendor/leaflet/leaflet';\n\n/* App Specific */\nimport { tileServers, PLUGIN_PATH } from './definitions';\nimport { \n  dataTreatment, processData, getTimeSeries, getUpdatedChartSeries,\n  drawPopups, renderChart, hideAllGraphPopups, getDataPointValues, getDataPointStickyInfo,\n  getMapMarkerClassName\n} from './utils/map_utils';\nimport { filterEmptyAndZeroValues } from './utils/data_formatter';\n\nconst DRAW_CHART = false\nconst REDRAW_CHART = true\n\nconst CIRCLE_RADIUS = 200\nconst POLYGON_MAGNIFY_RATIO = 3\n\nexport default class WorldMap {\n\n  constructor(ctrl, mapContainer) {\n    this.ctrl = ctrl;\n    this.mapContainer = mapContainer;\n    this.validated_pollutants = {};\n    this.timeSeries = {};\n    this.chartSeries = {};\n    this.chartData = [];\n    this.currentTargetForChart = null;\n\n    this.createMap();   //only called once\n  }\n\n  getLayers() {\n    return this.ctrl.layerNames.map(elem => L.layerGroup())\n  }\n\n  createMap() {\n    const mapCenter = L.latLng(\n      parseFloat(this.ctrl.panel.mapCenterLatitude), \n      parseFloat(this.ctrl.panel.mapCenterLongitude)\n      );\n\n    this.layers = this.getLayers()\n\n    this.map = L.map(this.mapContainer, \n      {\n        worldCopyJump: true, \n        center: mapCenter, \n        zoomControl: false, \n        attributionControl: false,\n        layers: this.layers\n      })\n      .fitWorld()\n\n    this.map.setZoom(this.ctrl.panel.initialZoom);\n    this.map.panTo(mapCenter);\n    L.control.zoom({position: 'topright'}).addTo(this.map);\n    this.addLayersToMap();\n\n    // this.map.on('zoomstart', (e) => { mapZoom = this.map.getZoom() });\n    this.map.on('click', () => {\n      hideAllGraphPopups(this.ctrl.panel.id);\n      this.currentTargetForChart = null;\n    });\n\n    const selectedTileServer = tileServers[this.ctrl.tileServer];\n    L.tileLayer(selectedTileServer.url, {\n      maxZoom: 18,\n      subdomains: selectedTileServer.subdomains,\n      reuseTiles: true,\n      detectRetina: true,\n      attribution: selectedTileServer.attribution\n    }).addTo(this.map, true);\n\n    document.querySelector('#air_parameters_dropdown_'+this.ctrl.panel.id)\n      .addEventListener('change', (event) => {\n        this.ctrl.panel.currentParameterForChart = event.currentTarget.value;\n        this.drawChart(REDRAW_CHART);\n      }); //, {passive: true} <= to avoid blocking\n  }\n\n  addLayersToMap() {\n    this.overlayMaps = {};\n    for (let i=0; i<this.ctrl.layerNames.length; i++)\n      this.overlayMaps[this.ctrl.layerNames[i]]=this.layers[i]\n    L.control.layers({}, this.overlayMaps).addTo(this.map);\n  }\n\n  clearLayers() {\n    this.layers.forEach((layer)=>layer.clearLayers())\n  }\n\n  /* Validate pollutants for a given target*/\n  setPollutants() {\n    try {\n      this.validated_pollutants = JSON.parse(this.ctrl.panel.resources.airQualityObserved.pollutants);\n    } catch(error) {\n      console.log(error)\n      throw new Error('Please insert a valid JSON in the Pollutants field (Edit > Tab Worldmap > Section AirQualityObserved - Pollutents field)');\n    }\n  }\n\n  drawPoints() {\n    //console.log('striping unnecessary entries from recieved data...')\n    this.data = dataTreatment(\n                    filterEmptyAndZeroValues(this.ctrl.data, this.ctrl.panel.hideEmpty, this.ctrl.panel.hideZero)\n                )\n\n    this.addPointsToMap();\n  }\n\n  // Prepare series to show in chart\n  prepareSeries() {    \n    this.timeSeries = getTimeSeries(this.data);\n    if (this.currentTargetForChart === null) \n      return ;\n    this.chartSeries = getUpdatedChartSeries(this.chartSeries, this.timeSeries, this.ctrl.panel.currentParameterForChart, this.currentTargetForChart);\n  }\n\n  addPointsToMap() {\n    //console.log('addPointsToMap');\n    Object.keys(this.data).forEach((key) => {\n      const value = this.data[key][this.data[key].length - 1]; // Use the last data for each sensor to create on map -> avoid repeated markers on map and use just the last measurement (the one needed to show on marker)\n      const newIcon = this.createIcon(value);\n\n      try { \n        if(newIcon)\n          this.overlayMaps[value.type].addLayer(newIcon)\n      } catch(error) { console.log(value); console.log(error) }\n    });\n  }\n\n  createIcon(dataPoint) {\n    //console.log(this.ctrl.panel.layersIcons)\n    if(!dataPoint || !dataPoint.type)\n      return null;\n    \n    let styled_icon = this.ctrl.panel.layersIcons[dataPoint.type]\n    console.log(styled_icon ? styled_icon : 'styled_icon not found for datapoint type '+dataPoint.type+'. going to use default shape!')\n\n    let icon = styled_icon ? this.createMarker(dataPoint, styled_icon ? styled_icon : 'question') : this.createShape(dataPoint);\n\n    this.createPopup(\n      this.associateEvents(icon), \n      getDataPointStickyInfo(dataPoint)\n    );\n\n    return icon;\n  }\n\n  createShape(dataPoint) {\n    let dataPointDetails = getDataPointValues(dataPoint);\n    let shape;\n\n    switch(dataPoint.type) {\n      case 'AirQualityObserved':\n        shape = L.circle([dataPoint.locationLatitude, dataPoint.locationLongitude], CIRCLE_RADIUS, dataPointDetails)\n      break;\n      case 'TrafficFlowObserved':\n        shape = L.rectangle([\n            [dataPoint.locationLatitude-(0.001*POLYGON_MAGNIFY_RATIO), dataPoint.locationLongitude-(0.0015*POLYGON_MAGNIFY_RATIO)], \n            [dataPoint.locationLatitude+(0.001*POLYGON_MAGNIFY_RATIO), dataPoint.locationLongitude+(0.0015*POLYGON_MAGNIFY_RATIO)]\n          ], dataPointDetails)\n        //shape = L.circle([dataPoint.locationLatitude, dataPoint.locationLongitude], CIRCLE_RADIUS, dataPointDetails)\n      break;\n      default:\n        dataPointDetails.color='green'  //default color\n        shape = L.polygon([\n          [dataPoint.locationLatitude-(0.001*POLYGON_MAGNIFY_RATIO), dataPoint.locationLongitude-(0.0015*POLYGON_MAGNIFY_RATIO)], \n          [dataPoint.locationLatitude+(0.001*POLYGON_MAGNIFY_RATIO), dataPoint.locationLongitude],\n          [dataPoint.locationLatitude-(0.001*POLYGON_MAGNIFY_RATIO), dataPoint.locationLongitude+(0.0015*POLYGON_MAGNIFY_RATIO)],\n        ], dataPointDetails)\n    }\n\n    return shape;\n  }\n\n  createMarker(dataPoint, styled_icon) {\n    let dataPointDetails = getDataPointValues(dataPoint);\n    //console.log(dataPointDetails)\n    let myIcon = L.icon({\n      iconUrl: PLUGIN_PATH+'img/fa/'+styled_icon+'.svg',\n      iconSize:  [25, 25], // size of the icon\n      className: getMapMarkerClassName(dataPointDetails.value)\n    });\n\n    return L.marker(\n      [dataPointDetails.latitude, dataPointDetails.longitude], \n      { icon: myIcon, id: dataPointDetails.id, type: dataPointDetails.type }\n    );\n  }\n\n  associateEvents(shape) {\n    return shape\n      .on('click', (event) => {this.currentTargetForChart = event})\n      .on('click', () => this.drawChart(REDRAW_CHART))\n  }\n\n  createPopup(shape, stickyPopupInfo) {\n    shape.bindPopup(stickyPopupInfo, \n      {\n        'offset': L.point(0, -2), \n        'className': 'worldmap-popup', \n        'closeButton': this.ctrl.panel.stickyLabels\n      }\n    );\n    shape.on('mouseover', function () { this.openPopup() });\n\n    if (!this.ctrl.panel.stickyLabels) { \n      shape.on('mouseout', function () { this.closePopup() });\n    }\n  }\n\n  setTarget(event) {\n    this.currentTargetForChart = event;\n  }\n\n  resize() {\n    this.map.invalidateSize();\n  }\n\n  panToMapCenter() {\n    if (this.ctrl.panel.mapCenter === 'cityenv' && this.ctrl.isADiferentCity()) {\n      this.ctrl.setNewCoords()\n        .then(() => this.map.flyTo([parseFloat(this.ctrl.panel.mapCenterLatitude), parseFloat(this.ctrl.panel.mapCenterLongitude)]))\n        .catch(error => console.log(error))\n      return ;\n    }\n    \n    this.map.flyTo([parseFloat(this.ctrl.panel.mapCenterLatitude), parseFloat(this.ctrl.panel.mapCenterLongitude)]);\n    this.ctrl.mapCenterMoved = false;\n  }\n\n  removeLegend() {\n    this.legend.removeFrom(this.map);\n    this.legend = null;\n  }\n\n  setZoom(zoomFactor) {\n    this.map.setZoom(parseInt(zoomFactor, 10));\n  }\n\n  drawChart(redrawChart) {\n    if(this.currentTargetForChart==null || this.timeSeries==null ) {\n      //console.log(\"not going to drawChart\")\n      //console.log(\"currentTargetForChart\")\n      //console.log(this.currentTargetForChart)\n      //console.log(\"this.timeSeries\")\n      //console.log(this.timeSeries)\n      return ;\n    }\n    \n    drawPopups(this.ctrl.panel.id, this.timeSeries, this.validated_pollutants, this.ctrl.panel.currentParameterForChart, this.currentTargetForChart)\n\n    // ------\n    let parameterUnit = ''\n    let title = ''\n\n    if (redrawChart) {\n      [this.chartData, parameterUnit, title] = processData(this.chartSeries, this.timeSeries, this.validated_pollutants, this.ctrl.panel.currentParameterForChart, this.currentTargetForChart )\n    }\n    \n    renderChart(this.ctrl.panel.id, this.chartSeries, this.chartData, parameterUnit, title)\n  }\n}\n"]}