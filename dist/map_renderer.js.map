{"version":3,"sources":["../src/map_renderer.js"],"names":["link","scope","elem","attrs","ctrl","mapContainer","find","events","on","render","data","console","debug","panel","targets","metricAggs","pollutants","worldMap","WorldMap","createMap","layersChanged","log","layerNames","Object","keys","overlayMaps","map","resize","mapCenter","mapCenterMoved","mapCenterLatitude","mapCenterLongitude","panToMapCenter","clearLayers","setPollutants","drawPoints","prepareSeries","drawChart","renderingCompleted","_","isEqual","hideAllGraphPopups"],"mappings":";;;;;;;AAIe,WAASA,IAAT,CAAcC,KAAd,EAAqBC,IAArB,EAA2BC,KAA3B,EAAkCC,IAAlC,EAAwC;AACrD,QAAMC,eAAeH,KAAKI,IAAL,CAAU,gBAAV,EAA4B,CAA5B,CAArB;;AAEAF,SAAKG,MAAL,CAAYC,EAAZ,CAAe,QAAf,EAAyB;AAAA,aAAMC,QAAN;AAAA,KAAzB;;AAEA,aAASA,MAAT,GAAkB;AAChB,UAAI,CAACL,KAAKM,IAAV,EAAgB;;AAEhBC,cAAQC,KAAR,CAAc,MAAd;AACAD,cAAQC,KAAR,CAAcR,KAAKS,KAAL,CAAWC,OAAX,CAAmB,CAAnB,EAAsBC,UAApC;AACAJ,cAAQC,KAAR,CAAc,YAAd;AACAD,cAAQC,KAAR,CAAcR,KAAKS,KAAL,CAAWG,UAAzB;;AAEA;AACA,UAAI,CAACZ,KAAKa,QAAV,EAAoB;AAClBb,aAAKa,QAAL,GAAgB,IAAIC,QAAJ,CAAad,IAAb,EAAmBC,YAAnB,CAAhB;AACAM,gBAAQC,KAAR,CAAc,mBAAd;AACAR,aAAKa,QAAL,CAAcE,SAAd;AACD;;AAED,UAAGC,eAAH,EAAmB;AACjBT,gBAAQU,GAAR,CAAY,0CAAZ;AACAV,gBAAQU,GAAR,CAAYjB,KAAKkB,UAAjB;AACAX,gBAAQU,GAAR,CAAYE,OAAOC,IAAP,CAAYpB,KAAKa,QAAL,CAAcQ,WAA1B,CAAZ;AACArB,aAAKa,QAAL,CAAcS,GAAd,GAAoB,IAApB;AACAtB,aAAKa,QAAL,CAAcE,SAAd;AACD;;AAGDf,WAAKa,QAAL,CAAcU,MAAd;;AAEA,UAAKvB,KAAKS,KAAL,CAAWe,SAAX,KAAyB,SAA1B,IAAwCxB,KAAKyB,cAAjD,EAAiE;AAAG;AAClElB,gBAAQC,KAAR,CAAc,gBAAd;AACAD,gBAAQC,KAAR,CAAiBR,KAAKS,KAAL,CAAWiB,iBAA5B,WAAmD1B,KAAKS,KAAL,CAAWkB,kBAA9D;AACA3B,aAAKa,QAAL,CAAce,cAAd;AACD;;AAED5B,WAAKa,QAAL,CAAcgB,WAAd;AACA7B,WAAKa,QAAL,CAAciB,aAAd;AACA9B,WAAKa,QAAL,CAAckB,UAAd;;AAEA;;;AAGA/B,WAAKa,QAAL,CAAcmB,aAAd;AACAhC,WAAKa,QAAL,CAAcoB,SAAd,CAAwB,IAAxB,EAxCgB,CAwCe;;AAE/BjC,WAAKkC,kBAAL;AACD;;AAED;AACA,aAASlB,aAAT,GAAyB;AACvB,aAAO,CAACmB,EAAEC,OAAF,CAAUpC,KAAKkB,UAAf,EAA2BC,OAAOC,IAAP,CAAYpB,KAAKa,QAAL,CAAcQ,WAA1B,CAA3B,CAAR;AACD;AACF;;qBAtDuBzB,I;;;;AAJjBuC,O;;AACArB,c;;AACEuB,wB,mBAAAA,kB","file":"map_renderer.js","sourcesContent":["import _ from 'lodash';\nimport WorldMap from './worldmap';\nimport { hideAllGraphPopups } from './utils/map_utils';\n\nexport default function link(scope, elem, attrs, ctrl) {\n  const mapContainer = elem.find('.map-container')[0];\n\n  ctrl.events.on('render', () => render());\n\n  function render() {\n    if (!ctrl.data) return;\n\n    console.debug('aggs')\n    console.debug(ctrl.panel.targets[0].metricAggs)\n    console.debug('pollutants')\n    console.debug(ctrl.panel.pollutants)\n\n    //map is initializing\n    if (!ctrl.worldMap) {\n      ctrl.worldMap = new WorldMap(ctrl, mapContainer);\n      console.debug('creating worldMap');\n      ctrl.worldMap.createMap();\n    }\n\n    if(layersChanged()){\n      console.log('layers had changed! Please Refresh Page!');\n      console.log(ctrl.layerNames);\n      console.log(Object.keys(ctrl.worldMap.overlayMaps));\n      ctrl.worldMap.map = null;\n      ctrl.worldMap.createMap();\n    }\n\n    \n    ctrl.worldMap.resize();\n\n    if( (ctrl.panel.mapCenter === 'cityenv') || ctrl.mapCenterMoved) {  //&& ctrl.isADiferentCity()\n      console.debug('panToMapCenter');\n      console.debug(`${ctrl.panel.mapCenterLatitude} : ${ctrl.panel.mapCenterLongitude}`)\n      ctrl.worldMap.panToMapCenter();\n    }\n\n    ctrl.worldMap.clearLayers();\n    ctrl.worldMap.setPollutants()\n    ctrl.worldMap.drawPoints();\n\n    /**\n    * graph display\n    */\n    ctrl.worldMap.prepareSeries();\n    ctrl.worldMap.drawChart(true); // call drawChart but redraw the chart just update information related\n\n    ctrl.renderingCompleted();\n  }\n\n  // if users add new metrics we must verify if layers are the same or if we must recreate the map\n  function layersChanged() {\n    return !_.isEqual(ctrl.layerNames, Object.keys(ctrl.worldMap.overlayMaps));\n  }\n}\n"]}