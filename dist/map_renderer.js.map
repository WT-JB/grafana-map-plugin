{"version":3,"sources":["../src/map_renderer.js"],"names":["link","scope","elem","attrs","ctrl","mapContainer","find","events","on","render","data","worldMap","WorldMap","layersChanged","Error","resize","panel","mapCenter","isADiferentCity","mapCenterMoved","panToMapCenter","clearLayers","setPollutants","drawPoints","prepareSeries","drawChart","renderingCompleted","console","log","layerNames","Object","keys","overlayMaps","_","isEqual","hideAllGraphPopups"],"mappings":";;;;;;;AAIe,WAASA,IAAT,CAAcC,KAAd,EAAqBC,IAArB,EAA2BC,KAA3B,EAAkCC,IAAlC,EAAwC;AACrD,QAAMC,eAAeH,KAAKI,IAAL,CAAU,gBAAV,CAArB;;AAEAF,SAAKG,MAAL,CAAYC,EAAZ,CAAe,QAAf,EAAyB;AAAA,aAAMC,QAAN;AAAA,KAAzB;;AAEA,aAASA,MAAT,GAAkB;AAChB,UAAI,CAACL,KAAKM,IAAV,EAAgB;;AAEhB,UAAI,CAACN,KAAKO,QAAV,EAAoB;AAClBP,aAAKO,QAAL,GAAgB,IAAIC,QAAJ,CAAaR,IAAb,EAAmBC,aAAa,CAAb,CAAnB,CAAhB;AACD;;AAED,UAAGQ,eAAH,EACE,MAAMC,MAAM,0CAAN,CAAN;AACA;;AAEFV,WAAKO,QAAL,CAAcI,MAAd;;AAEA,UAAKX,KAAKY,KAAL,CAAWC,SAAX,KAAyB,SAAzB,IAAsCb,KAAKc,eAAL,EAAvC,IAAkEd,KAAKe,cAA3E,EACEf,KAAKO,QAAL,CAAcS,cAAd;;AAEFhB,WAAKO,QAAL,CAAcU,WAAd;AACAjB,WAAKO,QAAL,CAAcW,aAAd;AACAlB,WAAKO,QAAL,CAAcY,UAAd;;AAEA;;;AAGAnB,WAAKO,QAAL,CAAca,aAAd;AACApB,WAAKO,QAAL,CAAcc,SAAd,CAAwB,IAAxB,EAxBgB,CAwBe;;AAE/BrB,WAAKsB,kBAAL;AACD;;AAED;AACA,aAASb,aAAT,GAAyB;AACvBc,cAAQC,GAAR,CAAYxB,KAAKyB,UAAjB;AACAF,cAAQC,GAAR,CAAYE,OAAOC,IAAP,CAAY3B,KAAKO,QAAL,CAAcqB,WAA1B,CAAZ;;AAEA,aAAO,CAACC,EAAEC,OAAF,CAAU9B,KAAKyB,UAAf,EAA2BC,OAAOC,IAAP,CAAY3B,KAAKO,QAAL,CAAcqB,WAA1B,CAA3B,CAAR;AACD;AACF;;qBAzCuBhC,I;;;;AAJjBiC,O;;AACArB,c;;AACEuB,wB,mBAAAA,kB","file":"map_renderer.js","sourcesContent":["import _ from 'lodash';\nimport WorldMap from './worldmap';\nimport { hideAllGraphPopups } from './utils/map_utils';\n\nexport default function link(scope, elem, attrs, ctrl) {\n  const mapContainer = elem.find('.map-container');\n\n  ctrl.events.on('render', () => render());\n\n  function render() {\n    if (!ctrl.data) return;\n\n    if (!ctrl.worldMap) {\n      ctrl.worldMap = new WorldMap(ctrl, mapContainer[0]);\n    }\n\n    if(layersChanged())\n      throw Error('layers had changed! Please Refresh Page!');\n      //ctrl.worldMap.addLayersToMap();\n    \n    ctrl.worldMap.resize();\n\n    if( (ctrl.panel.mapCenter === 'cityenv' && ctrl.isADiferentCity()) || ctrl.mapCenterMoved)\n      ctrl.worldMap.panToMapCenter();\n\n    ctrl.worldMap.clearLayers();\n    ctrl.worldMap.setPollutants()\n    ctrl.worldMap.drawPoints();\n\n    /**\n    * graph display\n    */\n    ctrl.worldMap.prepareSeries();\n    ctrl.worldMap.drawChart(true); // call drawChart but redraw the chart just update information related\n\n    ctrl.renderingCompleted();\n  }\n\n  // if users add new metrics we must verify if layers are the same or if we must recreate the map\n  function layersChanged() {\n    console.log(ctrl.layerNames)\n    console.log(Object.keys(ctrl.worldMap.overlayMaps))\n\n    return !_.isEqual(ctrl.layerNames, Object.keys(ctrl.worldMap.overlayMaps));\n  }\n}\n"]}