{"version":3,"sources":["../src/map_renderer.js"],"names":["link","scope","elem","attrs","ctrl","mapContainer","find","events","on","render","data","worldMap","WorldMap","console","debug","layersChanged","log","layerNames","Object","keys","overlayMaps","resize","panel","mapCenter","mapCenterMoved","mapCenterLatitude","mapCenterLongitude","panToMapCenter","clearLayers","setPollutants","drawPoints","prepareSeries","drawChart","renderingCompleted","_","isEqual","hideAllGraphPopups"],"mappings":";;;;;;;AAIe,WAASA,IAAT,CAAcC,KAAd,EAAqBC,IAArB,EAA2BC,KAA3B,EAAkCC,IAAlC,EAAwC;AACrD,QAAMC,eAAeH,KAAKI,IAAL,CAAU,gBAAV,EAA4B,CAA5B,CAArB;;AAEAF,SAAKG,MAAL,CAAYC,EAAZ,CAAe,QAAf,EAAyB;AAAA,aAAMC,QAAN;AAAA,KAAzB;;AAEA,aAASA,MAAT,GAAkB;AAChB,UAAI,CAACL,KAAKM,IAAV,EAAgB;;AAEhB;AACA,UAAI,CAACN,KAAKO,QAAV,EAAoB;AAClBP,aAAKO,QAAL,GAAgB,IAAIC,QAAJ,CAAaR,IAAb,EAAmBC,YAAnB,CAAhB;AACAQ,gBAAQC,KAAR,CAAc,mBAAd;AACD;;AAED,UAAGC,eAAH,EAAmB;AACjBF,gBAAQG,GAAR,CAAY,0CAAZ;AACAH,gBAAQG,GAAR,CAAYZ,KAAKa,UAAjB;AACAJ,gBAAQG,GAAR,CAAYE,OAAOC,IAAP,CAAYf,KAAKO,QAAL,CAAcS,WAA1B,CAAZ;AACD;;AAEDhB,WAAKO,QAAL,CAAcU,MAAd;;AAEA,UAAKjB,KAAKkB,KAAL,CAAWC,SAAX,KAAyB,SAA1B,IAAwCnB,KAAKoB,cAAjD,EAAiE;AAAG;AAClEX,gBAAQC,KAAR,CAAc,gBAAd;AACAD,gBAAQC,KAAR,CAAiBV,KAAKkB,KAAL,CAAWG,iBAA5B,WAAmDrB,KAAKkB,KAAL,CAAWI,kBAA9D;AACAtB,aAAKO,QAAL,CAAcgB,cAAd;AACD;;AAEDvB,WAAKO,QAAL,CAAciB,WAAd;AACAxB,WAAKO,QAAL,CAAckB,aAAd;AACAzB,WAAKO,QAAL,CAAcmB,UAAd;;AAEA;;;AAGA1B,WAAKO,QAAL,CAAcoB,aAAd;AACA3B,WAAKO,QAAL,CAAcqB,SAAd,CAAwB,IAAxB,EA/BgB,CA+Be;;AAE/B5B,WAAK6B,kBAAL;AACD;;AAED;AACA,aAASlB,aAAT,GAAyB;AACvB,aAAO,CAACmB,EAAEC,OAAF,CAAU/B,KAAKa,UAAf,EAA2BC,OAAOC,IAAP,CAAYf,KAAKO,QAAL,CAAcS,WAA1B,CAA3B,CAAR;AACD;AACF;;qBA7CuBpB,I;;;;AAJjBkC,O;;AACAtB,c;;AACEwB,wB,mBAAAA,kB","file":"map_renderer.js","sourcesContent":["import _ from 'lodash';\nimport WorldMap from './worldmap';\nimport { hideAllGraphPopups } from './utils/map_utils';\n\nexport default function link(scope, elem, attrs, ctrl) {\n  const mapContainer = elem.find('.map-container')[0];\n\n  ctrl.events.on('render', () => render());\n\n  function render() {\n    if (!ctrl.data) return;\n\n    //map is initializing\n    if (!ctrl.worldMap) {\n      ctrl.worldMap = new WorldMap(ctrl, mapContainer);\n      console.debug('creating worldMap');\n    }\n\n    if(layersChanged()){\n      console.log('layers had changed! Please Refresh Page!');\n      console.log(ctrl.layerNames);\n      console.log(Object.keys(ctrl.worldMap.overlayMaps));\n    }\n    \n    ctrl.worldMap.resize();\n\n    if( (ctrl.panel.mapCenter === 'cityenv') || ctrl.mapCenterMoved) {  //&& ctrl.isADiferentCity()\n      console.debug('panToMapCenter');\n      console.debug(`${ctrl.panel.mapCenterLatitude} : ${ctrl.panel.mapCenterLongitude}`)\n      ctrl.worldMap.panToMapCenter();\n    }\n\n    ctrl.worldMap.clearLayers();\n    ctrl.worldMap.setPollutants()\n    ctrl.worldMap.drawPoints();\n\n    /**\n    * graph display\n    */\n    ctrl.worldMap.prepareSeries();\n    ctrl.worldMap.drawChart(true); // call drawChart but redraw the chart just update information related\n\n    ctrl.renderingCompleted();\n  }\n\n  // if users add new metrics we must verify if layers are the same or if we must recreate the map\n  function layersChanged() {\n    return !_.isEqual(ctrl.layerNames, Object.keys(ctrl.worldMap.overlayMaps));\n  }\n}\n"]}