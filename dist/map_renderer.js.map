{"version":3,"sources":["../src/map_renderer.js"],"names":["link","scope","elem","attrs","ctrl","mapContainer","find","events","on","render","data","worldMap","console","debug","createMap","layersChanged","log","map","remove","resize","panel","mapCenter","mapCenterMoved","mapCenterLatitude","mapCenterLongitude","panToMapCenter","clearLayers","setMetrics","drawPoints","drawPointDetails","renderingCompleted","isEqual","layerNames","Object","keys","overlayMaps"],"mappings":";;;;;kBAIwBA,I;;AAJxB;;;;AACA;;;;AACA;;;;AAEe,SAASA,IAAT,CAAcC,KAAd,EAAqBC,IAArB,EAA2BC,KAA3B,EAAkCC,IAAlC,EAAwC;AACrD,MAAMC,eAAeH,KAAKI,IAAL,CAAU,gBAAV,EAA4B,CAA5B,CAArB;;AAEAF,OAAKG,MAAL,CAAYC,EAAZ,CAAe,QAAf,EAAyB;AAAA,WAAMC,QAAN;AAAA,GAAzB;;AAEA,WAASA,MAAT,GAAkB;AAChB,QAAI,CAACL,KAAKM,IAAV,EAAgB;;AAEhB;AACA,QAAI,CAACN,KAAKO,QAAV,EAAoB;AAClBP,WAAKO,QAAL,GAAgB,uBAAaP,IAAb,EAAmBC,YAAnB,CAAhB;AACAO,cAAQC,KAAR,CAAc,mBAAd;AACAT,WAAKO,QAAL,CAAcG,SAAd;AACD;;AAED,QAAGC,eAAH,EAAmB;AACjBH,cAAQI,GAAR,CAAY,qBAAZ;AACN;AACA;AACM;AACAZ,WAAKO,QAAL,CAAcM,GAAd,CAAkBC,MAAlB;AACAd,WAAKO,QAAL,CAAcG,SAAd;AACD;;AAEDV,SAAKO,QAAL,CAAcQ,MAAd;;AAEA,QAAKf,KAAKgB,KAAL,CAAWC,SAAX,KAAyB,mBAA1B,IAAkDjB,KAAKkB,cAA3D,EAA2E;AAAG;AAC5EV,cAAQC,KAAR,CAAc,gBAAd;AACAD,cAAQC,KAAR,CAAiBT,KAAKgB,KAAL,CAAWG,iBAA5B,WAAmDnB,KAAKgB,KAAL,CAAWI,kBAA9D;AACApB,WAAKO,QAAL,CAAcc,cAAd;AACD;;AAEDrB,SAAKO,QAAL,CAAce,WAAd;AACAtB,SAAKO,QAAL,CAAcgB,UAAd;;AAGA;AACAvB,SAAKO,QAAL,CAAciB,UAAd;;AAEA;;;AAGA;AACAxB,SAAKO,QAAL,CAAckB,gBAAd;;AAEAzB,SAAK0B,kBAAL;AACD;;AAED;AACA,WAASf,aAAT,GAAyB;AACvB,WAAO,CAAC,iBAAEgB,OAAF,CAAU3B,KAAK4B,UAAf,EAA2BC,OAAOC,IAAP,CAAY9B,KAAKO,QAAL,CAAcwB,WAA1B,CAA3B,CAAR;AACD;AACF","file":"map_renderer.js","sourcesContent":["import _ from 'lodash';\nimport WorldMap from './worldmap';\nimport { hideAllGraphPopups } from './utils/map_utils';\n\nexport default function link(scope, elem, attrs, ctrl) {\n  const mapContainer = elem.find('.map-container')[0];\n\n  ctrl.events.on('render', () => render());\n\n  function render() {\n    if (!ctrl.data) return;\n\n    //map is initializing\n    if (!ctrl.worldMap) {\n      ctrl.worldMap = new WorldMap(ctrl, mapContainer);\n      console.debug('creating worldMap');\n      ctrl.worldMap.createMap();\n    }\n\n    if(layersChanged()){\n      console.log('layers had changed!');\n//      console.log(ctrl.layerNames);\n//      console.log(Object.keys(ctrl.worldMap.overlayMaps));\n      //.off();\n      ctrl.worldMap.map.remove();\n      ctrl.worldMap.createMap();\n    }\n    \n    ctrl.worldMap.resize();\n\n    if( (ctrl.panel.mapCenter === 'Location Variable') || ctrl.mapCenterMoved) {  //&& ctrl.isADiferentCity()\n      console.debug('panToMapCenter');\n      console.debug(`${ctrl.panel.mapCenterLatitude} : ${ctrl.panel.mapCenterLongitude}`)\n      ctrl.worldMap.panToMapCenter();\n    }\n\n    ctrl.worldMap.clearLayers();\n    ctrl.worldMap.setMetrics()\n\n\n    //ctrl.worldMap.filterEmptyData();\n    ctrl.worldMap.drawPoints();\n\n    /**\n    * popups and graph display\n    */\n    // draw all info associated with selected point but when redrawing the chart just update information related\n    ctrl.worldMap.drawPointDetails(); \n\n    ctrl.renderingCompleted();\n  }\n\n  // if users add new metrics we must verify if layers are the same or if we must recreate the map\n  function layersChanged() {\n    return !_.isEqual(ctrl.layerNames, Object.keys(ctrl.worldMap.overlayMaps));\n  }\n}\n"]}