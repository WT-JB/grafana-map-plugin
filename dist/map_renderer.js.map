{"version":3,"sources":["../src/map_renderer.js"],"names":["link","scope","elem","attrs","ctrl","mapContainer","find","events","on","render","data","worldMap","WorldMap","console","debug","panel","mapCenter","setLocationByUserGeolocation","log","setNewCoords","mapCenterMoved","createMap","isADiferentCity","layersChanged","map","remove","resize","panToMapCenter","clearLayers","setMetrics","drawPoints","drawPointDetails","renderingCompleted","_","isEqual","layerNames","Object","keys","overlayMaps"],"mappings":";;;;;kBAIwBA,I;;AAJxB;;;;AACA;;;;AACA;;;;AAEe,SAASA,IAAT,CAAcC,KAAd,EAAqBC,IAArB,EAA2BC,KAA3B,EAAkCC,IAAlC,EAAwC;AACrD,MAAMC,eAAeH,KAAKI,IAAL,CAAU,gBAAV,EAA4B,CAA5B,CAArB;;AAEAF,OAAKG,MAAL,CAAYC,EAAZ,CAAe,QAAf,EAAyB;AAAA,WAAMC,QAAN;AAAA,GAAzB;;AAEA,WAASA,MAAT,GAAkB;AAChB,QAAI,CAACL,KAAKM,IAAV,EAAgB;;AAEhB;AACA,QAAI,CAACN,KAAKO,QAAV,EAAoB;AAClBP,WAAKO,QAAL,GAAgB,IAAIC,kBAAJ,CAAaR,IAAb,EAAmBC,YAAnB,CAAhB;AACAQ,cAAQC,KAAR,CAAc,mBAAd;;AAEA,UAAG,uBAAqBV,KAAKW,KAAL,CAAWC,SAAnC,EAA8C;AAC5CZ,aAAKa,4BAAL;AACD,OAFD;AAGA;AACA,YAAI,wBAAsBb,KAAKW,KAAL,CAAWC,SAArC,EAAgD;AAAC;AAC/CH,kBAAQK,GAAR,CAAY,mBAAZ;AACAd,eAAKe,YAAL;AACD,SAHD,MAKEf,KAAKgB,cAAL,GAAoB,IAApB;;AAEFhB,WAAKO,QAAL,CAAcU,SAAd;AACD,KAhBD,MAiBA,IAAI,wBAAsBjB,KAAKW,KAAL,CAAWC,SAAjC,IAA8CZ,KAAKkB,eAAL,EAAlD,EAA0E;AACxET,cAAQK,GAAR,CAAY,uBAAZ;AACAd,WAAKe,YAAL;AACD;;AAED,QAAGI,eAAH,EAAmB;AACjBV,cAAQK,GAAR,CAAY,qBAAZ;AACAd,WAAKO,QAAL,CAAca,GAAd,CAAkBC,MAAlB;AACArB,WAAKO,QAAL,CAAcU,SAAd;AACD;;AAEDjB,SAAKO,QAAL,CAAce,MAAd;;AAEA,QAAGtB,KAAKgB,cAAR,EAAwB;AACtBhB,WAAKO,QAAL,CAAcgB,cAAd;AACD;;AAEDvB,SAAKO,QAAL,CAAciB,WAAd;AACAxB,SAAKO,QAAL,CAAckB,UAAd;;AAGA;AACAzB,SAAKO,QAAL,CAAcmB,UAAd;;AAEA;;;AAGA;AACA1B,SAAKO,QAAL,CAAcoB,gBAAd;;AAEA3B,SAAK4B,kBAAL;AACD;;AAED;AACA,WAAST,aAAT,GAAyB;AACvB,WAAO,CAACU,iBAAEC,OAAF,CAAU9B,KAAK+B,UAAf,EAA2BC,OAAOC,IAAP,CAAYjC,KAAKO,QAAL,CAAc2B,WAA1B,CAA3B,CAAR;AACD;AACF","file":"map_renderer.js","sourcesContent":["import _ from 'lodash';\nimport WorldMap from './worldmap';\nimport { hideAllGraphPopups, getUserLocation } from './utils/map_utils';\n\nexport default function link(scope, elem, attrs, ctrl) {\n  const mapContainer = elem.find('.map-container')[0];\n\n  ctrl.events.on('render', () => render());\n\n  function render() {\n    if (!ctrl.data) return;\n\n    //map is initializing\n    if (!ctrl.worldMap) {\n      ctrl.worldMap = new WorldMap(ctrl, mapContainer);\n      console.debug('creating worldMap');\n\n      if('User Geolocation'===ctrl.panel.mapCenter) {\n        ctrl.setLocationByUserGeolocation();\n      } else\n      //detect city change when using Location Variable\n      if ('Location Variable'===ctrl.panel.mapCenter) {// && this.ctrl.isADiferentCity()\n        console.log('centering at city');\n        ctrl.setNewCoords();\n      }\n      else\n        ctrl.mapCenterMoved=true;\n\n      ctrl.worldMap.createMap();      \n    } else\n    if ('Location Variable'===ctrl.panel.mapCenter && ctrl.isADiferentCity()) {\n      console.log('centering at new city');\n      ctrl.setNewCoords();\n    }\n\n    if(layersChanged()){\n      console.log('layers had changed!');\n      ctrl.worldMap.map.remove();\n      ctrl.worldMap.createMap();\n    }\n    \n    ctrl.worldMap.resize();\n\n    if(ctrl.mapCenterMoved) {\n      ctrl.worldMap.panToMapCenter();\n    }\n\n    ctrl.worldMap.clearLayers();\n    ctrl.worldMap.setMetrics()\n\n\n    //ctrl.worldMap.filterEmptyData();\n    ctrl.worldMap.drawPoints();\n\n    /**\n    * popups and graph display\n    */\n    // draw all info associated with selected point but when redrawing the chart just update information related\n    ctrl.worldMap.drawPointDetails(); \n\n    ctrl.renderingCompleted();\n  }\n\n  // if users add new metrics we must verify if layers are the same or if we must recreate the map\n  function layersChanged() {\n    return !_.isEqual(ctrl.layerNames, Object.keys(ctrl.worldMap.overlayMaps));\n  }\n}\n"]}