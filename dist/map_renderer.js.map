{"version":3,"sources":["../src/map_renderer.js"],"names":["link","scope","elem","attrs","ctrl","mapContainer","find","events","on","render","data","worldMap","WorldMap","console","debug","createMap","layersChanged","log","map","remove","resize","panel","mapCenter","mapCenterMoved","mapCenterLatitude","mapCenterLongitude","panToMapCenter","clearLayers","setMetrics","drawPoints","drawPointDetails","renderingCompleted","_","isEqual","layerNames","Object","keys","overlayMaps","hideAllGraphPopups"],"mappings":";;;;;;;AAIe,WAASA,IAAT,CAAcC,KAAd,EAAqBC,IAArB,EAA2BC,KAA3B,EAAkCC,IAAlC,EAAwC;AACrD,QAAMC,eAAeH,KAAKI,IAAL,CAAU,gBAAV,EAA4B,CAA5B,CAArB;;AAEAF,SAAKG,MAAL,CAAYC,EAAZ,CAAe,QAAf,EAAyB;AAAA,aAAMC,QAAN;AAAA,KAAzB;;AAEA,aAASA,MAAT,GAAkB;AAChB,UAAI,CAACL,KAAKM,IAAV,EAAgB;;AAEhB;AACA,UAAI,CAACN,KAAKO,QAAV,EAAoB;AAClBP,aAAKO,QAAL,GAAgB,IAAIC,QAAJ,CAAaR,IAAb,EAAmBC,YAAnB,CAAhB;AACAQ,gBAAQC,KAAR,CAAc,mBAAd;AACAV,aAAKO,QAAL,CAAcI,SAAd;AACD;;AAED,UAAGC,eAAH,EAAmB;AACjBH,gBAAQI,GAAR,CAAY,qBAAZ;AACN;AACA;AACM;AACAb,aAAKO,QAAL,CAAcO,GAAd,CAAkBC,MAAlB;AACAf,aAAKO,QAAL,CAAcI,SAAd;AACD;;AAEDX,WAAKO,QAAL,CAAcS,MAAd;;AAEA,UAAKhB,KAAKiB,KAAL,CAAWC,SAAX,KAAyB,SAA1B,IAAwClB,KAAKmB,cAAjD,EAAiE;AAAG;AAClEV,gBAAQC,KAAR,CAAc,gBAAd;AACAD,gBAAQC,KAAR,CAAiBV,KAAKiB,KAAL,CAAWG,iBAA5B,WAAmDpB,KAAKiB,KAAL,CAAWI,kBAA9D;AACArB,aAAKO,QAAL,CAAce,cAAd;AACD;;AAEDtB,WAAKO,QAAL,CAAcgB,WAAd;AACAvB,WAAKO,QAAL,CAAciB,UAAd;;AAGA;AACAxB,WAAKO,QAAL,CAAckB,UAAd;;AAEA;;;AAGA;AACAzB,WAAKO,QAAL,CAAcmB,gBAAd;;AAEA1B,WAAK2B,kBAAL;AACD;;AAED;AACA,aAASf,aAAT,GAAyB;AACvB,aAAO,CAACgB,EAAEC,OAAF,CAAU7B,KAAK8B,UAAf,EAA2BC,OAAOC,IAAP,CAAYhC,KAAKO,QAAL,CAAc0B,WAA1B,CAA3B,CAAR;AACD;AACF;;qBApDuBrC,I;;;;AAJjBgC,O;;AACApB,c;;AACE0B,wB,mBAAAA,kB","file":"map_renderer.js","sourcesContent":["import _ from 'lodash';\nimport WorldMap from './worldmap';\nimport { hideAllGraphPopups } from './utils/map_utils';\n\nexport default function link(scope, elem, attrs, ctrl) {\n  const mapContainer = elem.find('.map-container')[0];\n\n  ctrl.events.on('render', () => render());\n\n  function render() {\n    if (!ctrl.data) return;\n\n    //map is initializing\n    if (!ctrl.worldMap) {\n      ctrl.worldMap = new WorldMap(ctrl, mapContainer);\n      console.debug('creating worldMap');\n      ctrl.worldMap.createMap();\n    }\n\n    if(layersChanged()){\n      console.log('layers had changed!');\n//      console.log(ctrl.layerNames);\n//      console.log(Object.keys(ctrl.worldMap.overlayMaps));\n      //.off();\n      ctrl.worldMap.map.remove();\n      ctrl.worldMap.createMap();\n    }\n    \n    ctrl.worldMap.resize();\n\n    if( (ctrl.panel.mapCenter === 'cityenv') || ctrl.mapCenterMoved) {  //&& ctrl.isADiferentCity()\n      console.debug('panToMapCenter');\n      console.debug(`${ctrl.panel.mapCenterLatitude} : ${ctrl.panel.mapCenterLongitude}`)\n      ctrl.worldMap.panToMapCenter();\n    }\n\n    ctrl.worldMap.clearLayers();\n    ctrl.worldMap.setMetrics()\n\n\n    //ctrl.worldMap.filterEmptyData();\n    ctrl.worldMap.drawPoints();\n\n    /**\n    * popups and graph display\n    */\n    // draw all info associated with selected point but when redrawing the chart just update information related\n    ctrl.worldMap.drawPointDetails(); \n\n    ctrl.renderingCompleted();\n  }\n\n  // if users add new metrics we must verify if layers are the same or if we must recreate the map\n  function layersChanged() {\n    return !_.isEqual(ctrl.layerNames, Object.keys(ctrl.worldMap.overlayMaps));\n  }\n}\n"]}