{"version":3,"sources":["../src/data_formatter.js"],"names":["allowedPollutants","DataFormatter","ctrl","kbn","data","setSeries","serieType","pollutantsAux","series","length","forEach","serie","id","split","serieName","alias","datapoints","datapoint","datapointValue","parseFloat","valueAndType","push","latitudes","latitude","longitudes","longitude","values","value","ids","pollutants","pollutant","receivedPoll","poll","index","dataValue","type","thisPollutants","pollAux","name","locationLatitude","locationLongitude"],"mappings":"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","file":"data_formatter.js","sourcesContent":["// import _ from 'lodash';\n// import decodeGeoHash from './geohash';\n\nconst allowedPollutants = ['h', 'no2', 'p', 'pm10', 'pm25', 't'];\n\nexport default class DataFormatter {\n  constructor(ctrl, kbn) {\n    this.ctrl = ctrl;\n    this.kbn = kbn;\n  }\n\n  setValues(data) {\n    const setSeries = {};\n    let serieType;\n    let pollutantsAux;\n\n    if (this.ctrl.series && this.ctrl.series.length > 0) {\n      this.ctrl.series.forEach((serie) => {\n        // console.log(serie);\n        serieType = serie.id.split(':')[0];\n        const serieName = serie.alias.split(': ')[1];\n\n        // VERIFY HERE ALL TYPES RECEIVED\n        if (!(setSeries[serieName])) {\n          setSeries[serieName] = [];\n        }\n\n        serie.datapoints.forEach((datapoint) => {\n          const datapointValue = parseFloat(datapoint[0]);\n          const valueAndType = {'value': datapointValue, 'type': serieType};\n          setSeries[serieName].push(valueAndType);\n        });\n      });\n\n      const latitudes = setSeries.latitude;\n      const longitudes = setSeries.longitude;\n      const values = setSeries.value;\n      const ids = setSeries.id;\n\n      setSeries.pollutants = [];\n      pollutantsAux = [];\n\n      allowedPollutants.forEach((pollutant) => {\n        if (setSeries[pollutant]) {\n          const receivedPoll = [];\n          setSeries[pollutant].forEach((poll) => {\n            receivedPoll.push(poll);\n          });\n\n          pollutantsAux.push({'name': pollutant, 'value': receivedPoll});\n          delete setSeries[pollutant];\n        }\n      });\n\n      latitudes.forEach((value, index) => {\n        let dataValue;\n\n        if (value.type === 'environment') {\n          const thisPollutants = [];\n          pollutantsAux.forEach((pollAux) => {\n            thisPollutants.push({'name': pollAux.name, 'value': pollAux.value[index].value});\n          });\n          dataValue = {\n            locationLatitude: value.value,\n            locationLongitude: longitudes[index].value,\n            value: values[index].value,\n            type: values[index].type,\n            pollutants: thisPollutants,\n            id: ids[value].id\n          };\n        } else if (value.type === 'traffic') {\n          dataValue = {\n            locationLatitude: value.value,\n            locationLongitude: longitudes[index].value,\n            value: values[index].value,\n            type: values[index].type,\n            id: ids[value].id\n          };\n        }\n        data.push(dataValue);\n      });\n    }\n  }\n}\n"]}