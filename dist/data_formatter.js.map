{"version":3,"sources":["../src/data_formatter.js"],"names":["allowedTypes","DataFormatter","ctrl","kbn","data","JSON","parse","e","setSeries","serieType","pollutantsAux","series","length","forEach","serie","id","split","indexOf","Error","serieName","alias","datapoints","datapoint","index","datapointValue","parseFloat","valueAndType","push","latitudes","latitude","longitudes","longitude","values","value","ids","times","created_at","pollutants","validateJSON","panel","polls","Object","keys","key","currentPoll","poll","keyString","toString","keyId","newKey","name","dataValue","type","thisPollutants","getPollutant","locationLatitude","locationLongitude","time"],"mappings":"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","file":"data_formatter.js","sourcesContent":["// import _ from 'lodash';\n// import decodeGeoHash from './geohash';\nconst allowedTypes = ['TrafficFlowObserved', 'AirQualityObserved'];\n\nexport default class DataFormatter {\n  constructor(ctrl, kbn) {\n    this.ctrl = ctrl;\n    this.kbn = kbn;\n  }\n\n  validateJSON(data){\n    try {\n      JSON.parse(data);\n    } catch (e) {\n      return false;\n    }\n    return true;\n  }\n\n  setValues(data) {\n    const setSeries = {};\n    let serieType;\n    let pollutantsAux;\n\n    if (this.ctrl.series && this.ctrl.series.length > 0) {\n      this.ctrl.series.forEach((serie) => {\n        serieType = serie.id.split(':')[0];\n\n        if (allowedTypes.indexOf(serieType) === -1) {\n          throw new Error('Please make sure you group series by type (AirQualityObserved or TrafficFlowObserved)');\n        }\n        const serieName = serie.alias.split(': ')[1];\n\n        // VERIFY HERE ALL TYPES RECEIVED\n        if (!(setSeries[serieName])) {\n          setSeries[serieName] = [];\n        }\n\n        serie.datapoints.forEach((datapoint, index) => {\n          const datapointValue = parseFloat(datapoint[0]);\n          const valueAndType = {'value': datapointValue, 'type': serieType, 'id': index};\n          setSeries[serieName].push(valueAndType);\n        });\n      });\n      const latitudes = setSeries.latitude;\n      const longitudes = setSeries.longitude;\n      const values = setSeries.value;\n      const ids = setSeries.id;\n      const times = setSeries.created_at;\n\n      if (!(latitudes) || !(longitudes) || !(values) || !(ids) || !(times)){\n        throw new Error(\"Please make sure you selected Raw Data for latitude, longitude, value, id and created_at series\");\n      }\n\n      setSeries.pollutants = [];\n      pollutantsAux = {};\n\n      // console.log(this.validateJSON(this.ctrl.panel.pollutants));\n      if (!(this.validateJSON(this.ctrl.panel.pollutants))) {\n        throw new Error(\"Please insert a valid JSON in the Available Pollutants field\");\n      } else {\n        const polls = JSON.parse(this.ctrl.panel.pollutants);\n\n        Object.keys(polls).forEach((key) => {\n          const currentPoll = polls[key];\n\n          if (setSeries[key]) {\n            // const receivedPoll = [];\n            setSeries[key].forEach((poll) => {\n     \n              const keyString = key.toString();\n              const keyId = poll.id.toString();\n              const newKey = keyString + keyId;\n              if (!(pollutantsAux[newKey])) {\n                pollutantsAux[newKey] = {\n                  'value': poll.value\n                };\n              }\n            });\n            delete setSeries[currentPoll.name];\n          }\n        });\n      }\n      latitudes.forEach((value, index) => {\n        let dataValue;\n        if (value.type === 'AirQualityObserved') {\n          const thisPollutants = [];\n          \n          const polls = JSON.parse(this.ctrl.panel.pollutants);\n          Object.keys(polls).forEach((key) => {\n            const getPollutant = key.toString() + value.id.toString();\n  \n            if (pollutantsAux[getPollutant]) {\n              thisPollutants.push({'name': key, 'value': pollutantsAux[getPollutant].value});\n            }\n          });\n          // pollutantsAux.forEach((pollAux) => {\n            // if (pollAux.name && pollAux.value[index]){\n\n            // }\n          // });\n          dataValue = {\n            locationLatitude: value.value,\n            locationLongitude: longitudes[index].value,\n            value: values[index].value,\n            type: values[index].type,\n            pollutants: thisPollutants,\n            id: ids[index].value,\n            time: times[index].value\n          };\n        } else if (value.type === 'TrafficFlowObserved') {\n          dataValue = {\n            locationLatitude: value.value,\n            locationLongitude: longitudes[index].value,\n            value: values[index].value,\n            type: values[index].type,\n            id: ids[index].value,\n            time: times[index].value\n          };\n        }\n        data.push(dataValue);\n      });\n    }\n  }\n}\n"]}