{"version":3,"sources":["../src/data_formatter.js"],"names":["allowedTypes","DataFormatter","ctrl","kbn","data","JSON","parse","e","setSeries","serieType","pollutantsAux","series","length","forEach","serie","id","split","indexOf","Error","serieName","alias","datapoints","datapoint","datapointValue","parseFloat","valueAndType","push","latitudes","latitude","longitudes","longitude","values","value","ids","times","created_at","pollutants","validateJSON","panel","polls","Object","keys","currentPoll","key","receivedPoll","poll","name","index","dataValue","type","thisPollutants","pollAux","locationLatitude","locationLongitude","time"],"mappings":"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","file":"data_formatter.js","sourcesContent":["// import _ from 'lodash';\n// import decodeGeoHash from './geohash';\nconst allowedTypes = ['TrafficFlowObserved', 'AirQualityObserved'];\n\nexport default class DataFormatter {\n  constructor(ctrl, kbn) {\n    this.ctrl = ctrl;\n    this.kbn = kbn;\n  }\n\n  validateJSON(data){\n    try {\n      JSON.parse(data);\n    } catch (e) {\n      return false;\n    }\n    return true;\n  }\n\n  setValues(data) {\n    const setSeries = {};\n    let serieType;\n    let pollutantsAux;\n\n    if (this.ctrl.series && this.ctrl.series.length > 0) {\n      this.ctrl.series.forEach((serie) => {\n        serieType = serie.id.split(':')[0];\n\n        if (allowedTypes.indexOf(serieType) === -1) {\n          throw new Error('Please make sure you group series by type (AirQualityObserved or TrafficFlowObserved)');\n        }\n        const serieName = serie.alias.split(': ')[1];\n\n        // VERIFY HERE ALL TYPES RECEIVED\n        if (!(setSeries[serieName])) {\n          setSeries[serieName] = [];\n        }\n\n        serie.datapoints.forEach((datapoint) => {\n          const datapointValue = parseFloat(datapoint[0]);\n          const valueAndType = {'value': datapointValue, 'type': serieType};\n          setSeries[serieName].push(valueAndType);\n        });\n      });\n\n      const latitudes = setSeries.latitude;\n      const longitudes = setSeries.longitude;\n      const values = setSeries.value;\n      const ids = setSeries.id;\n      const times = setSeries.created_at;\n\n      if (!(latitudes) || !(longitudes) || !(values) || !(ids) || !(times)){\n        throw new Error(\"Please make sure you selected Raw Data for latitude, longitude, value, id and created_at series\");\n      }\n\n      setSeries.pollutants = [];\n      pollutantsAux = [];\n\n      // console.log(this.validateJSON(this.ctrl.panel.pollutants));\n      if (!(this.validateJSON(this.ctrl.panel.pollutants))) {\n        throw new Error(\"Please insert a valid JSON in the Available Pollutants field\");\n      } else {\n        const polls = JSON.parse(this.ctrl.panel.pollutants);\n\n        Object.keys(polls).forEach(key => {\n          const currentPoll = polls[key];\n\n          if (setSeries[key]) {\n            const receivedPoll = [];\n            setSeries[key].forEach((poll) => {\n              receivedPoll.push(poll);\n            });\n\n            pollutantsAux.push({'name': key, 'value': receivedPoll});\n            delete setSeries[currentPoll.name];\n          }\n        });\n      }\n\n      latitudes.forEach((value, index) => {\n        let dataValue;\n\n        if (value.type === 'AirQualityObserved') {\n          const thisPollutants = [];\n          pollutantsAux.forEach((pollAux) => {\n            thisPollutants.push({'name': pollAux.name, 'value': pollAux.value[index].value});\n          });\n          dataValue = {\n            locationLatitude: value.value,\n            locationLongitude: longitudes[index].value,\n            value: values[index].value,\n            type: values[index].type,\n            pollutants: thisPollutants,\n            id: ids[index].value,\n            time: times[index].value\n          };\n        } else if (value.type === 'TrafficFlowObserved') {\n          dataValue = {\n            locationLatitude: value.value,\n            locationLongitude: longitudes[index].value,\n            value: values[index].value,\n            type: values[index].type,\n            id: ids[index].value,\n            time: times[index].value\n          };\n        }\n        data.push(dataValue);\n      });\n    }\n  }\n}\n"]}