{"version":3,"sources":["../../src/utils/data_formatter.js"],"names":["filterEmptyAndZeroValues","data","hideEmpty","hideZero","_","filter","o","isNil","value","DataFormatter","series","panelDefaultMetrics","length","getSeries","setSeries","setSeriesByLayer","forEach","series_elem","target","split","seriesLayer","seriesFieldName","push","datapoints","map","elem","hashSeriesByLayerByKey","Object","keys","layerName","superArray","column","result","line","id"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AAmDA;;;;AAIA,WAASA,wBAAT,CAAkCC,IAAlC,EAAwCC,SAAxC,EAAmDC,QAAnD,EAA6D;AAC3D,WAAOC,EAAEC,MAAF,CAASJ,IAAT,EAAe,UAACK,CAAD,EAAO;AAAE,aAAO,EAAEJ,aAAaE,EAAEG,KAAF,CAAQD,EAAEE,KAAV,CAAf,KAAoC,EAAEL,YAAYG,EAAEE,KAAF,KAAY,CAA1B,CAA3C;AAAyE,KAAjG,CAAP;AACD;;;;AAzDMJ,O;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEcK,mB;;;;;;;oCAETC,M,EAAQC,mB,EAAqB;AACrC,gBAAI,CAACD,MAAD,IAAWA,OAAOE,MAAP,IAAiB,CAAhC,EACE,OAAO,EAAP;;AAEF,mBAAO,KAAKC,SAAL,CAAeH,MAAf,EAAuBC,mBAAvB,CAAP;AACD;;;oCAESD,M,EAAQC,mB,EAAqB;AACrC,gBAAIG,YAAY,EAAhB;AACA,gBAAIC,mBAAmB,EAAvB;;AAEAL,mBAAOM,OAAP,CAAe,UAACC,WAAD,EAAiB;AAAA,0CACOA,YAAYC,MAAZ,CAAmBC,KAAnB,CAAyB,IAAzB,CADP;AAAA;AAAA,kBACzBC,WADyB;AAAA,kBACZC,eADY;;AAG9B,kBAAI,CAAEN,iBAAiBK,WAAjB,CAAN,EAAsC;AACpCL,iCAAiBK,WAAjB,IAAgC,EAAhC;AACD;;AAEDL,+BAAiBK,WAAjB,EAA8BE,IAA9B,EAAoCD,eAApC,4BAAwDJ,YAAYM,UAAZ,CAAuBC,GAAvB,CAA2B,UAACC,IAAD;AAAA,uBAAQA,KAAK,CAAL,CAAR;AAAA,eAA3B,CAAxD;AACD,aARD;;AAWA;AACA,gBAAIC,yBAAyB,EAA7B;AACAC,mBAAOC,IAAP,CAAYb,gBAAZ,EAA8BC,OAA9B,CAAsC,UAACa,SAAD,EAAa;AACjD,kBAAI,CAACH,uBAAuBG,SAAvB,CAAL,EACEH,uBAAuBG,SAAvB,IAAoC,EAApC;;AAEF,kBAAIC,aAAaf,iBAAiBc,SAAjB,CAAjB;;AAEA,mBAAI,IAAIE,SAAO,CAAf,EAAkBA,SAAOD,WAAW,CAAX,EAAclB,MAAvC,EAA+CmB,QAA/C,EAAyD;AACvD,oBAAIC,SAAS,EAAb;AACA,qBAAI,IAAIC,OAAK,CAAb,EAAgBA,OAAKH,WAAWlB,MAAhC,EAAwCqB,MAAxC,EAAgD;AAC9CD,yBAAOF,WAAWG,IAAX,EAAiB,CAAjB,CAAP,IAA8BH,WAAWG,IAAX,EAAiBF,MAAjB,CAA9B;AACD;;AAED,oBAAG,CAACL,uBAAuBG,SAAvB,EAAkCG,OAAOE,EAAzC,CAAJ,EACER,uBAAuBG,SAAvB,EAAkCG,OAAOE,EAAzC,IAA+C,EAA/C;;AAEFR,uCAAuBG,SAAvB,EAAkCG,OAAOE,EAAzC,EAA6CZ,IAA7C,CAAkDU,MAAlD;AACD;AACF,aAjBD;;AAmBA,mBAAON,sBAAP;AACD;;;;;;yBA9CkBjB,a;;0CAyDZT,wB","file":"data_formatter.js","sourcesContent":["import _ from 'lodash';\n\nexport default class DataFormatter {\n\n  getValues(series, panelDefaultMetrics) {\n    if (!series || series.length == 0)\n      return {}\n\n    return this.getSeries(series, panelDefaultMetrics)\n  }\n\n  getSeries(series, panelDefaultMetrics) {\n    let setSeries = {};\n    let setSeriesByLayer = {}\n\n    series.forEach((series_elem) => {\n      let [seriesLayer, seriesFieldName] = series_elem.target.split(': ');\n   \n      if (!(setSeriesByLayer[seriesLayer])) {\n        setSeriesByLayer[seriesLayer] = [];        \n      }\n\n      setSeriesByLayer[seriesLayer].push([seriesFieldName, ...series_elem.datapoints.map((elem)=>elem[0])])\n    });\n\n\n    // get one array and transform into a hash\n    let hashSeriesByLayerByKey = {}\n    Object.keys(setSeriesByLayer).forEach((layerName)=>{\n      if (!hashSeriesByLayerByKey[layerName])\n        hashSeriesByLayerByKey[layerName] = {};  \n\n      let superArray = setSeriesByLayer[layerName]\n      \n      for(let column=1; column<superArray[0].length; column++) {\n        let result = {}\n        for(let line=0; line<superArray.length; line++) {\n          result[superArray[line][0]] = superArray[line][column]\n        }\n\n        if(!hashSeriesByLayerByKey[layerName][result.id])\n          hashSeriesByLayerByKey[layerName][result.id] = []\n\n        hashSeriesByLayerByKey[layerName][result.id].push(result)\n      } \n    })\n\n    return hashSeriesByLayerByKey;\n  }\n}\n\n/*\n* Discard elements with value 0 or null\n* and hidden elements\n*/\nfunction filterEmptyAndZeroValues(data, hideEmpty, hideZero) {\n  return _.filter(data, (o) => { return !(hideEmpty && _.isNil(o.value)) && !(hideZero && o.value === 0) });\n}\n\nexport { filterEmptyAndZeroValues }"]}