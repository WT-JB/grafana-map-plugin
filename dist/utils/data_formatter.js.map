{"version":3,"sources":["../../src/utils/data_formatter.js"],"names":["filterEmptyAndZeroValues","data","hideEmpty","hideZero","_","filter","o","isNil","value","DataFormatter","series","pollutants","length","s_","getSeries","getDataValues","setSeries","serieType","forEach","serie","id","split","serieName","alias","datapoints","datapoint","index","datapointValue","parseFloat","valueAndType","push","latitudes","latitude","longitudes","longitude","values","ids","times","created_at","pollutantsAux","Error","JSON","parse","Object","keys","key","currentPoll","poll","keyString","toString","keyId","newKey","name","response","dataValue","locationLatitude","locationLongitude","type","time","thisPollutants","getPollutant","error","console","log"],"mappings":";;;;;;;;;;;;;AA0HA;;;;AAIA,WAASA,wBAAT,CAAkCC,IAAlC,EAAwCC,SAAxC,EAAmDC,QAAnD,EAA6D;AAC3D,WAAOC,EAAEC,MAAF,CAASJ,IAAT,EAAe,UAACK,CAAD,EAAO;AAAE,aAAO,EAAEJ,aAAaE,EAAEG,KAAF,CAAQD,EAAEE,KAAV,CAAf,KAAoC,EAAEL,YAAYG,EAAEE,KAAF,KAAY,CAA1B,CAA3C;AAAyE,KAAjG,CAAP;AACD;;;;AAhIMJ,O;;;;;;;;;;;;;;;;;;;;;AAIcK,mB;;;;;;;oCAETC,M,EAAQC,U,EAAY;AAC5B,gBAAI,CAACD,MAAD,IAAWA,OAAOE,MAAP,IAAgB,CAA/B,EACE,OAAO,EAAP;;AAEF,gBAAIC,KAAK,KAAKC,SAAL,CAAeJ,MAAf,EAAuBC,UAAvB,CAAT;AACJ;;AAEI;AACA,mBAAO,KAAKI,aAAL,EAAP;AACD;;;oCAESL,M,EAAQC,U,EAAY;AAAA;;AAC5B,gBAAIK,YAAY,EAAhB;AACA,gBAAIC,kBAAJ;;AAEAP,mBAAOQ,OAAP,CAAe,UAACC,KAAD,EAAW;AACxBF,0BAAYE,MAAMC,EAAN,CAASC,KAAT,CAAe,GAAf,EAAoB,CAApB,CAAZ;;AAEA;AACA;AACA;AACA,kBAAMC,YAAYH,MAAMI,KAAN,CAAYF,KAAZ,CAAkB,IAAlB,EAAwB,CAAxB,CAAlB;AACA;AACA;AACA,kBAAI,CAAEL,UAAUM,SAAV,CAAN,EAA6B;AAC3BN,0BAAUM,SAAV,IAAuB,EAAvB;AACD;;AAEDH,oBAAMK,UAAN,CAAiBN,OAAjB,CAAyB,UAACO,SAAD,EAAYC,KAAZ,EAAsB;AAC7C,oBAAMC,iBAAiBC,WAAWH,UAAU,CAAV,CAAX,CAAvB;AACA,oBAAMI,eAAe,EAAC,SAASF,cAAV,EAA0B,QAAQV,SAAlC,EAA6C,MAAMS,KAAnD,EAArB;AACAV,0BAAUM,SAAV,EAAqBQ,IAArB,CAA0BD,YAA1B;AACD,eAJD;AAKD,aAlBD;;AAoBA,iBAAKE,SAAL,GAAiBf,UAAUgB,QAA3B;AACA,iBAAKC,UAAL,GAAkBjB,UAAUkB,SAA5B;AACA,iBAAKC,MAAL,GAAcnB,UAAUR,KAAxB;AACA,iBAAK4B,GAAL,GAAWpB,UAAUI,EAArB;AACA,iBAAKiB,KAAL,GAAarB,UAAUsB,UAAvB;AACA,iBAAKC,aAAL,GAAqB,EAArB;;AAEA,gBAAK,EAAE,KAAKR,SAAL,IAAkB,KAAKE,UAAvB,IAAqC,KAAKE,MAA1C,IAAoD,KAAKC,GAAzD,IAAgE,KAAKC,KAAvE,CAAL,EAAqF;AACnF,oBAAM,IAAIG,KAAJ,CAAU,wHAAV,CAAN;AACD;;AAEDxB,sBAAUL,UAAV,GAAuB,EAAvB;;AAGA,iBAAKA,UAAL,GAAkB8B,KAAKC,KAAL,CAAW/B,UAAX,CAAlB;AACA,gBAAI,KAAKA,UAAT,EAAqB;AACnBgC,qBAAOC,IAAP,CAAY,KAAKjC,UAAjB,EAA6BO,OAA7B,CAAqC,UAAC2B,GAAD,EAAS;AAC5C,oBAAMC,cAAc,MAAKnC,UAAL,CAAgBkC,GAAhB,CAApB;;AAEA,oBAAI7B,UAAU6B,GAAV,CAAJ,EAAoB;AAClB;AACA7B,4BAAU6B,GAAV,EAAe3B,OAAf,CAAuB,UAAC6B,IAAD,EAAU;AAC/B,wBAAMC,YAAYH,IAAII,QAAJ,EAAlB;AACA,wBAAMC,QAAQH,KAAK3B,EAAL,CAAQ6B,QAAR,EAAd;AACA,wBAAME,SAASH,YAAYE,KAA3B;AACA,wBAAI,CAAE,MAAKX,aAAL,CAAmBY,MAAnB,CAAN,EAAmC;AACjC,4BAAKZ,aAAL,CAAmBY,MAAnB,IAA6B,EAAE,SAASJ,KAAKvC,KAAhB,EAA7B;AACD;AACF,mBAPD;AAQA,yBAAOQ,UAAU8B,YAAYM,IAAtB,CAAP;AACD;AACF,eAfD;AAgBD,aAjBD,MAiBO;AACL,oBAAM,IAAIZ,KAAJ,CAAU,0FAAV,CAAN;AACD;;AAED,mBAAOxB,SAAP;AACD;;;0CAEe;AAAA;;AACd,gBAAIqC,WAAW,EAAf;;AAEA,iBAAKtB,SAAL,CAAeb,OAAf,CAAuB,UAACV,KAAD,EAAQkB,KAAR,EAAkB;AACvC,kBAAI;AACF,oBAAI4B,aAAa;AACXC,oCAAkB/C,MAAMA,KADb;AAEXgD,qCAAmB,OAAKvB,UAAL,CAAgBP,KAAhB,EAAuBlB,KAF/B;AAGXA,yBAAO,OAAK2B,MAAL,CAAYT,KAAZ,EAAmBlB,KAHf;AAIXiD,wBAAM,OAAKtB,MAAL,CAAYT,KAAZ,EAAmB+B,IAJd;AAKXrC,sBAAI,OAAKgB,GAAL,CAASV,KAAT,EAAgBlB,KALT;AAMXkD,wBAAM,OAAKrB,KAAL,CAAWX,KAAX,EAAkBlB;AANb,iBAAjB;;AASA;AACA,oBAAIA,MAAMiD,IAAN,KAAe,oBAAnB,EAAyC;AACvC,sBAAME,iBAAiB,EAAvB;;AAEAhB,yBAAOC,IAAP,CAAY,OAAKjC,UAAjB,EAA6BO,OAA7B,CAAqC,UAAC2B,GAAD,EAAS;AAC5C,wBAAMe,eAAef,IAAII,QAAJ,KAAiBzC,MAAMY,EAAN,CAAS6B,QAAT,EAAtC;;AAEA,wBAAI,OAAKV,aAAL,CAAmBqB,YAAnB,CAAJ,EAAsC;AACpCD,qCAAe7B,IAAf,CAAoB,EAAC,QAAQe,GAAT,EAAc,SAAS,OAAKN,aAAL,CAAmBqB,YAAnB,EAAiCpD,KAAxD,EAApB;AACD;AACF,mBAND;;AAQA8C,6BAAU3C,UAAV,GAAuBgD,cAAvB;AACD;;AAEDN,yBAASvB,IAAT,CAAcwB,UAAd;AAED,eA3BD,CA2BE,OAAOO,KAAP,EAAc;AACdC,wBAAQC,GAAR,CAAYT,SAAZ;AACAQ,wBAAQC,GAAR,CAAYF,KAAZ;AACA,sBAAM,IAAIrB,KAAJ,CAAU,4BAAV,CAAN;AACD;AACF,aAjCD;AAkCA,mBAAOa,QAAP;AACD;;;;;;yBAlHkB5C,a;;0CA8HZT,wB","file":"data_formatter.js","sourcesContent":["import _ from 'lodash';\n// import decodeGeoHash from './geohash';\n//const allowedTypes = ['TrafficFlowObserved', 'AirQualityObserved'];\n\nexport default class DataFormatter {\n\n  getValues(series, pollutants) {\n    if (!series || series.length ==0)\n      return []\n\n    let s_ = this.getSeries(series, pollutants)\n//    console.log(s_)\n\n    //processing only latitudes  \n    return this.getDataValues();\n  }\n\n  getSeries(series, pollutants) {\n    let setSeries = {};\n    let serieType;\n\n    series.forEach((serie) => {\n      serieType = serie.id.split(':')[0];\n      \n      // if (allowedTypes.indexOf(serieType) === -1) {\n      //    console.log('Please make sure you group by your query');\n      // }\n      const serieName = serie.alias.split(': ')[1];\n      //console.log('serieType => '+serieType+', serieName => '+serieName)\n      // VERIFY HERE ALL TYPES RECEIVED\n      if (!(setSeries[serieName])) {\n        setSeries[serieName] = [];\n      }\n\n      serie.datapoints.forEach((datapoint, index) => {\n        const datapointValue = parseFloat(datapoint[0]);\n        const valueAndType = {'value': datapointValue, 'type': serieType, 'id': index};\n        setSeries[serieName].push(valueAndType);\n      });\n    });\n\n    this.latitudes = setSeries.latitude;\n    this.longitudes = setSeries.longitude;\n    this.values = setSeries.value;\n    this.ids = setSeries.id;\n    this.times = setSeries.created_at;\n    this.pollutantsAux = {};\n\n    if ( !(this.latitudes && this.longitudes && this.values && this.ids && this.times) ) {\n      throw new Error(\"Please make sure you selected Raw Data for latitude, longitude, value, id, created_at series and a group by expression\");\n    }\n\n    setSeries.pollutants = [];\n\n\n    this.pollutants = JSON.parse(pollutants)\n    if (this.pollutants) {\n      Object.keys(this.pollutants).forEach((key) => {\n        const currentPoll = this.pollutants[key];\n\n        if (setSeries[key]) {\n          // const receivedPoll = [];\n          setSeries[key].forEach((poll) => {     \n            const keyString = key.toString();\n            const keyId = poll.id.toString();\n            const newKey = keyString + keyId;\n            if (!(this.pollutantsAux[newKey])) {\n              this.pollutantsAux[newKey] = { 'value': poll.value };\n            }\n          });\n          delete setSeries[currentPoll.name];\n        }\n      });\n    } else {\n      throw new Error(\"For each datasource target, please insert a valid JSON in the Available Pollutants field\");\n    }\n\n    return setSeries;\n  }\n\n  getDataValues() {\n    let response = []\n\n    this.latitudes.forEach((value, index) => {\n      try {\n        let dataValue  = {\n              locationLatitude: value.value,\n              locationLongitude: this.longitudes[index].value,\n              value: this.values[index].value,\n              type: this.values[index].type,\n              id: this.ids[index].value,\n              time: this.times[index].value\n            };\n\n        // if AQI process add also info about pollutants\n        if (value.type === 'AirQualityObserved') {\n          const thisPollutants = [];        \n\n          Object.keys(this.pollutants).forEach((key) => {\n            const getPollutant = key.toString() + value.id.toString();\n\n            if (this.pollutantsAux[getPollutant]) {\n              thisPollutants.push({'name': key, 'value': this.pollutantsAux[getPollutant].value});\n            }\n          });\n\n          dataValue.pollutants = thisPollutants\n        } \n\n        response.push(dataValue);\n\n      } catch (error) {\n        console.log(dataValue)\n        console.log(error)\n        throw new Error(\"Error parsing a data value\");\n      }\n    });\n    return response;\n  }\n\n}\n\n/*\n* Discard elements with value 0 or null\n* and hidden elements\n*/\nfunction filterEmptyAndZeroValues(data, hideEmpty, hideZero) {\n  return _.filter(data, (o) => { return !(hideEmpty && _.isNil(o.value)) && !(hideZero && o.value === 0) });\n}\n\nexport { filterEmptyAndZeroValues }"]}