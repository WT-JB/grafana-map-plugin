{"version":3,"sources":["../../src/utils/data_utils.js"],"names":["DataFormatter","series","panelDefaultMetrics","length","getSeries","setSeries","setSeriesByLayer","forEach","series_elem","target","split","seriesLayer","seriesFieldName","push","datapoints","map","elem","hashSeriesByLayerByKey","Object","keys","layerName","superArray","column","result","line","id"],"mappings":";;;;;;;;;;;;;;AAAA;;IAEMA,a;;;;;;;8BAEMC,M,EAAQC,mB,EAAqB;AACrC,UAAI,CAACD,MAAD,IAAWA,OAAOE,MAAP,IAAiB,CAAhC,EACE,OAAO,EAAP;;AAEF,aAAO,KAAKC,SAAL,CAAeH,MAAf,EAAuBC,mBAAvB,CAAP;AACD;;;8BAESD,M,EAAQC,mB,EAAqB;AACrC,UAAIG,YAAY,EAAhB;AACA,UAAIC,mBAAmB,EAAvB;;AAEAL,aAAOM,OAAP,CAAe,UAACC,WAAD,EAAiB;AAAA,oCACOA,YAAYC,MAAZ,CAAmBC,KAAnB,CAAyB,IAAzB,CADP;AAAA;AAAA,YACzBC,WADyB;AAAA,YACZC,eADY;;AAG9B,YAAI,CAAEN,iBAAiBK,WAAjB,CAAN,EAAsC;AACpCL,2BAAiBK,WAAjB,IAAgC,EAAhC;AACD;;AAEDL,yBAAiBK,WAAjB,EAA8BE,IAA9B,EAAoCD,eAApC,4BAAwDJ,YAAYM,UAAZ,CAAuBC,GAAvB,CAA2B,UAACC,IAAD;AAAA,iBAAQA,KAAK,CAAL,CAAR;AAAA,SAA3B,CAAxD;AACD,OARD;;AAWA;AACA,UAAIC,yBAAyB,EAA7B;AACAC,aAAOC,IAAP,CAAYb,gBAAZ,EAA8BC,OAA9B,CAAsC,UAACa,SAAD,EAAa;AACjD,YAAI,CAACH,uBAAuBG,SAAvB,CAAL,EACEH,uBAAuBG,SAAvB,IAAoC,EAApC;;AAEF,YAAIC,aAAaf,iBAAiBc,SAAjB,CAAjB;;AAEA,aAAI,IAAIE,SAAO,CAAf,EAAkBA,SAAOD,WAAW,CAAX,EAAclB,MAAvC,EAA+CmB,QAA/C,EAAyD;AACvD,cAAIC,SAAS,EAAb;AACA,eAAI,IAAIC,OAAK,CAAb,EAAgBA,OAAKH,WAAWlB,MAAhC,EAAwCqB,MAAxC,EAAgD;AAC9CD,mBAAOF,WAAWG,IAAX,EAAiB,CAAjB,CAAP,IAA8BH,WAAWG,IAAX,EAAiBF,MAAjB,CAA9B;AACD;;AAED,cAAG,CAACL,uBAAuBG,SAAvB,EAAkCG,OAAOE,EAAzC,CAAJ,EACER,uBAAuBG,SAAvB,EAAkCG,OAAOE,EAAzC,IAA+C,EAA/C;;AAEFR,iCAAuBG,SAAvB,EAAkCG,OAAOE,EAAzC,EAA6CZ,IAA7C,CAAkDU,MAAlD;AACD;AACF,OAjBD;;AAmBA,aAAON,sBAAP;AACD;;;;;;QAIMjB,a,GAAAA,a","file":"data_utils.js","sourcesContent":["//import { isEqual, reduce, filter, transform, isObject } from 'lodash';\n\nclass DataFormatter {\n\n  getValues(series, panelDefaultMetrics) {\n    if (!series || series.length == 0)\n      return {}\n\n    return this.getSeries(series, panelDefaultMetrics)\n  }\n\n  getSeries(series, panelDefaultMetrics) {\n    let setSeries = {};\n    let setSeriesByLayer = {}\n\n    series.forEach((series_elem) => {\n      let [seriesLayer, seriesFieldName] = series_elem.target.split(': ');\n   \n      if (!(setSeriesByLayer[seriesLayer])) {\n        setSeriesByLayer[seriesLayer] = [];        \n      }\n\n      setSeriesByLayer[seriesLayer].push([seriesFieldName, ...series_elem.datapoints.map((elem)=>elem[0])])\n    });\n\n\n    // get one array and transform into a hash\n    let hashSeriesByLayerByKey = {}\n    Object.keys(setSeriesByLayer).forEach((layerName)=>{\n      if (!hashSeriesByLayerByKey[layerName])\n        hashSeriesByLayerByKey[layerName] = {};  \n\n      let superArray = setSeriesByLayer[layerName]\n      \n      for(let column=1; column<superArray[0].length; column++) {\n        let result = {}\n        for(let line=0; line<superArray.length; line++) {\n          result[superArray[line][0]] = superArray[line][column]\n        }\n\n        if(!hashSeriesByLayerByKey[layerName][result.id])\n          hashSeriesByLayerByKey[layerName][result.id] = []\n\n        hashSeriesByLayerByKey[layerName][result.id].push(result)\n      } \n    })\n\n    return hashSeriesByLayerByKey;\n  }\n}\n\n\nexport { DataFormatter }"]}