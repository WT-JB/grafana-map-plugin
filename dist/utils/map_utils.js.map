{"version":3,"sources":["../../src/utils/map_utils.js"],"names":["getTimeSeries","data","console","debug","valueValues","values","pollutantsValues","Object","keys","forEach","key","point","id","time","pollutants","value","pollutantsTemp","pollutant","name","push","dataTreatment","finalData","auxData","getUpdatedChartSeries","chartSeries","timeSeries","currentParameterForChart","currentTargetForChart","length","targetType","target","options","type","targetId","currentParameter","toLowerCase","lastMeasure","lastTime","timeTemp","val","Date","day","getDate","month","getMonth","year","getFullYear","hour","getHours","minutes","getMinutes","seconds","getSeconds","milliseconds","getMilliseconds","chartLastDisplayedValue","y","chartLastDisplayedTime","x","chartLastDisplayedId","split","parseInt","addPoint","UTC","error","log","processData","validatedPollutants","chartData","C_T_CHART","id_","type_","parameterUnit","title","abc","filter","elem","pollutantId","pollutantName","pollutantUnit","parameterChoice","sensor","createLine","values_","getCityCoordinates","city_name","url","NOMINATIM_ADDRESS","replace","fetch","then","response","json","latitude","lat","longitude","lon","catch","getSelectedCity","vars","cityenv_","city","current","calculateAQIIndex","aqiIndex","AQI","range","index","calculateCarsIntensityIndex","CARS_COUNT","drawPopups","panel_id","validated_pollutants","warn","selectedPointId","selectedPointType","selectedPointValues","hideAllGraphPopups","lastValueMeasure","allPollutants","pollutantsToShow","getPollutantsToShow","drawSelect","drawMeasuresPopup","document","getElementById","style","display","drawHealthConcernsPopup","risks","color","meaning","drawTrafficFlowPopup","drawDefaultPopups","showDataDetailsSelect","querySelector","getDataPointExtraFields","dataPoint","fillOpacity","aqi","aqiColor","aqiMeaning","aqiRisk","_","defaults","fillColor","markerColor","color_index","getMapMarkerClassName","resp","classColor","getDataPointStickyInfo","pollutantsTranslations","dataPointExtraFields","stickyInfo","getDataPointDetails","join","translatedValues","map","p","trans","unit","translatedValue","renderChart","drawChart","config","bootData","user","lightTheme","Highcharts","theme","HIGHCHARTS_THEME_DARK","setOptions","chart","height","zoomType","events","load","series","text","subtitle","xAxis","yAxis","legend","enabled","map_table_popups","map_table_popup","popup","providedPollutants","risk","map_size","healthConcernsWrapper","healthConcerns","healthConcernsColor","healthRisk","backgroundColor","innerHTML","_value","mapPointOptions","el","firstChild","removeChild","newPollutant","createElement","toUpperCase","selected","appendChild","selectBox","measuresTable","rows","deleteRow","row","insertRow","innerCell0","innerCell1","cell0","insertCell","cell1","Exporting","PANEL_DEFAULTS","TRANSLATIONS"],"mappings":"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","file":"map_utils.js","sourcesContent":["// draw components in the map\n/* Vendor specific */\nimport _ from 'lodash';\n//import Highcharts from './vendor/highcharts/highstock';\n//import \"../vendor/highcharts/highcharts.css!\";\n//import \"../vendor/highcharts/themes/dark-unica.css!\";\nimport Highcharts from \"../vendor/highcharts/highstock\";\nimport Exporting from '../vendor/highcharts/modules/exporting';\n// Initialize exporting module.\nExporting(Highcharts);\n\n/* Grafana Specific */\nimport config from 'app/core/config';\n\n/* App specific */\nimport { AQI, CARS_COUNT, NOMINATIM_ADDRESS, PANEL_DEFAULTS } from '../definitions';\nimport { HIGHCHARTS_THEME_DARK } from '../utils/highcharts/custom_themes';\n\nconst TRANSLATIONS = PANEL_DEFAULTS['pollutants']\n\n/**\n* Primary functions\n*/\n\n//helper to create series for chart display\nfunction getTimeSeries(data) {\n  console.debug('getTimeSeries')\n  console.debug(data)\n  const valueValues = {};\n  const values = [];\n  const pollutantsValues = [];\n\n  Object.keys(data).forEach((key) => {\n    data[key].forEach((point) => {\n      const id = point.id;\n      const time = point.time;\n      let pollutants = '';\n\n      const value = point.value;\n//      if (point.type === 'AirQualityObserved') {\n        pollutants = point.pollutants;\n        const pollutantsTemp = {};\n\n        pollutants.forEach((pollutant) => {\n          if (!(pollutantsValues[pollutant.name])) {\n            pollutantsValues[pollutant.name] = [];\n          }\n          pollutantsValues[pollutant.name].push({'time': time, 'value': pollutant.value, 'id': id});\n        });\n//      }\n\n      if (!valueValues[point.id]) {\n        valueValues[point.id] = [];\n      }\n      valueValues[point.id].push({'time': time, 'value': value, 'id': id});\n    });\n  });\n\n  return {'values': valueValues, 'pollutants': pollutantsValues};\n}\n\n// Agregate data by id\nfunction dataTreatment(data) {\n  const finalData = {};\n  let auxData;\n\n  data.forEach((value) => {\n    if (!finalData[value.id]) {\n      finalData[value.id] = [];\n    }\n\n    finalData[value.id].push( value );\n  });\n\n  return finalData;\n}\n\nfunction getUpdatedChartSeries(chartSeries, timeSeries, currentParameterForChart, currentTargetForChart) {\n\n  if(Object.keys(chartSeries).length === 0)\n    return chartSeries\n\n  const targetType = currentTargetForChart.target.options.type;\n  const targetId = currentTargetForChart.target.options.id;\n  const currentParameter = currentParameterForChart.toLowerCase();\n  let lastMeasure;\n  let lastTime;\n\n  try {\n    let timeTemp;\n    // if (currentParameter !== 'aqi' && targetType === 'AirQualityObserved'){    // \n      timeTemp = timeSeries.pollutants[currentParameter];\n      timeTemp.forEach((val) => {\n        if (val.id === targetId){\n          lastTime = val.time;\n          lastMeasure = val.value;\n        } \n      });\n    // } else {\n    //   timeTemp = timeSeries.values[targetId];\n    //   lastTime = timeTemp[timeTemp.length - 1].time\n    //   lastMeasure = timeTemp[timeTemp.length - 1].value;\n    // }\n   \n    const time = new Date(lastTime);\n    const day = time.getDate();\n    const month = time.getMonth();\n    const year = time.getFullYear();\n    const hour = time.getHours() - 1;\n    const minutes = time.getMinutes();\n    const seconds = time.getSeconds();\n    const milliseconds = time.getMilliseconds();      \n    const chartLastDisplayedValue = chartSeries.data[chartSeries.data.length - 1].y;\n    const chartLastDisplayedTime = chartSeries.data[chartSeries.data.length - 1].x;\n    let chartLastDisplayedId = chartSeries.name.split(' ');\n\n    chartLastDisplayedId = parseInt(chartLastDisplayedId[chartLastDisplayedId.length - 1]);      \n\n    if (!(lastTime === chartLastDisplayedTime && lastMeasure === chartLastDisplayedValue && targetId === chartLastDisplayedId)){\n      chartSeries.addPoint([Date.UTC(year, month, day, hour+1, minutes, seconds, milliseconds), lastMeasure], true, true);\n    }\n  } catch(error){\n    console.log(\"Error:\");\n    console.log(error);\n  }\n\n  return chartSeries;\n}\n\nfunction processData(chartSeries, timeSeries, validatedPollutants, currentParameterForChart, currentTargetForChart) {\n  //console.log(currentParameterForChart)\n  //console.log(currentTargetForChart)\n\n  let chartData = [];\n  let currentParameter = currentParameterForChart.toLowerCase();\n\n  //currentTargetForChart is the marker\n  const C_T_CHART = currentTargetForChart.target.options;\n  const id_ = C_T_CHART.id;\n  const type_ = C_T_CHART.type;\n\n  let parameterUnit = '';\n  let title = '';\n\n  if (validatedPollutants.length>0 ) {//type_ === 'AirQualityObserved' &&  currentParameter !== 'aqi'\n\n    if(!currentParameter){\n      console.log('currentParameter is empty. going to use the first one '+validatedPollutants[0][0])\n      currentParameter = validatedPollutants[0][0]\n    }\n\n    let abc = validatedPollutants.filter((elem)=>elem[0]===currentParameter)[0]\n    if(!abc)\n      abc = validatedPollutants[0]\n    let pollutantId = abc[0]\n    let pollutantName = abc[1] \n    let pollutantUnit = abc[2];\n\n//    parameterUnit = validated_pollutants[currentParameter].unit;\n    title = `${type_}: Device #${id_} - ${pollutantName}`;\n    parameterUnit = pollutantName + (pollutantUnit!='' ? ` (${pollutantUnit})` : '');\n\n\n    let parameterChoice = timeSeries.pollutants[currentParameter] || timeSeries.pollutants[0];\n    parameterChoice.forEach((sensor) => {\n      if (sensor.id === id_) {\n       chartData.push(createLine(sensor));\n      }\n    });\n  } else {\n    //without pollutants\n    if(type_ === 'AirQualityObserved') {\n      title = 'Air Quality Index: Device ' + id_;\n      parameterUnit = 'AQI'\n    } else\n    if(type_ === 'TrafficFlowObserved') {\n      title = 'Cars Intensity: Device ' + id_;\n      parameterUnit = 'Cars'\n    } else {\n      title = type_ + ': Device ' + id_;\n      parameterUnit = '';\n    }\n\n    const values_ = timeSeries.values[id_];\n    values_ && values_.forEach((value) => {\n      chartData.push(createLine(value));\n    });\n  }\n\n  return [chartData, parameterUnit, title]\n}\n\n/*\n* Auxiliar functions\n*/\n// just for improve DRY\nfunction createLine(value) {\n  const time = new Date(value.time);\n  const day = time.getDate();\n  const month = time.getMonth();\n  const year = time.getFullYear();\n  const hour = time.getHours() - 1;\n  const minutes = time.getMinutes();\n  const seconds = time.getSeconds();\n  const milliseconds = time.getMilliseconds();\n  return [Date.UTC(year, month, day, hour+1, minutes, seconds, milliseconds), value.value]\n}\n\n// Access remote api and gives the coordinates from a city center based on NOMINATIM url server\nfunction getCityCoordinates(city_name) {\n  let url = NOMINATIM_ADDRESS.replace('<city_name>', city_name)\n  return fetch(url)\n    .then(response => response.json())\n    .then(data => { return { latitude: data[0].lat, longitude: data[0].lon } })\n    .catch(error => console.error(error))\n}\n\n// Given vars passed as param, retrieves the selected city\nfunction getSelectedCity(vars) {\n  let cityenv_ = vars.filter(elem => elem.name===\"cityenv\")\n  let city = null;\n  if(cityenv_ && cityenv_.length === 1)\n    city = cityenv_[0].current.value\n\n  return city;\n}\n\n// gets the aqi index from the AQI var\nfunction calculateAQIIndex(value) {\n  let aqiIndex;\n  AQI.range.forEach((elem, index) => {\n    if (value >= elem) {\n      aqiIndex = index;\n    }\n  });\n  return aqiIndex;\n}\n// gets the index from the CARS_COUNT const var\nfunction calculateCarsIntensityIndex(value) {\n  CARS_COUNT.range.forEach((elem, index) => {\n    if (value >= elem) {\n      return index;\n    }\n  });\n  return 0;\n}\n\n/*\n* View components controllers\n*/\nfunction drawPopups(panel_id, timeSeries, validated_pollutants, currentParameterForChart, currentTargetForChart) {\n  if(!currentTargetForChart) {\n    console.warn('currentTargetForChart not setted')\n    return ;\n  }\n  if(!currentTargetForChart.target.options.id) {\n    console.warn('currentTargetForChart id not setted')\n    return ;\n  }\n\n  //console.log('drawPopups');\n  let selectedPointId = currentTargetForChart.target.options.id;\n  let selectedPointType = currentTargetForChart.target.options.type;\n  let selectedPointValues = timeSeries.values[selectedPointId];\n\n  hideAllGraphPopups(panel_id)\n\n  //render popups\n  try {\n    let lastValueMeasure = selectedPointValues[selectedPointValues.length - 1].value; //values array is the one for the AQI values\n\n    // Show Pollutants Legend (MAP)\n\n    //draw select\n    if(validated_pollutants) {\n      let allPollutants = timeSeries.pollutants;\n      let pollutantsToShow = getPollutantsToShow(allPollutants, selectedPointId)\n\n      drawSelect(panel_id, pollutantsToShow, validated_pollutants, currentParameterForChart, currentTargetForChart.target.options)\n      drawMeasuresPopup(panel_id, pollutantsToShow, validated_pollutants, currentParameterForChart)\n\n      switch(selectedPointType) {\n        case 'AirQualityObserved':\n          let aqiIndex = calculateAQIIndex(lastValueMeasure);\n          \n          document.getElementById('environment_table_'+panel_id).style.display = 'block';\n          //drawAQIPollutantsPopup(panel_id, validated_pollutants, allPollutants, selectedPointId, lastValueMeasure, currentParameterForChart);\n          drawHealthConcernsPopup(panel_id, validated_pollutants, AQI.risks[aqiIndex], AQI.color[aqiIndex], AQI.meaning[aqiIndex]);\n     \n          break;\n        case 'TrafficFlowObserved':\n          drawTrafficFlowPopup(panel_id);\n          break;\n        default:\n          drawDefaultPopups(panel_id);\n      }\n    }\n    \n  } catch(error) {\n    console.log(\"Error:\");\n    console.log(error);\n    console.log(\"selectedPointId: \" + selectedPointId + \", selectedPointType: \" + selectedPointType + \", selectedPointValues: \" + selectedPointValues)\n  }\n}\n\n/*\n* view components manipulation\n*/\nfunction showDataDetailsSelect(panel_id) {\n  document.querySelector('#data_details_'+panel_id).style.display = 'block';\n}\n\nfunction getDataPointExtraFields(dataPoint) {\n\n  const values = {\n    fillOpacity: 0.5\n  }\n\n  if(dataPoint.type==='AirQualityObserved') {\n    const aqi = calculateAQIIndex(dataPoint.value);\n    const aqiColor = AQI.color[aqi];\n    const aqiMeaning = AQI.meaning[aqi];\n    const aqiRisk = AQI.risks[aqi];\n\n    _.defaults(values, {\n      color: aqiColor,\n      fillColor: aqiColor,\n\n      aqiColor: aqiColor,\n      aqiMeaning: aqiMeaning,\n      aqiRisk: aqiRisk,\n      aqi: dataPoint.value,\n\n      markerColor: AQI.markerColor[aqi]\n    })    \n  } else {\n    if(dataPoint.type==='TrafficFlowObserved') {\n      let color_index = calculateCarsIntensityIndex(dataPoint.value)\n\n      _.defaults(values, {\n        color: CARS_COUNT.color[color_index], \n        fillColor: CARS_COUNT.color[color_index],\n        \n        markerColor: CARS_COUNT.markerColor[color_index]\n      })\n    }\n  }\n\n  return values;\n}\n\nfunction getMapMarkerClassName(type, value) {\n  let resp = 'map-marker-';\n  if(type==='AirQualityObserved') {\n    return resp+AQI.classColor[calculateAQIIndex(value)];\n  } else if(type==='TrafficFlowObserved')\n    return resp+CARS_COUNT.classColor[calculateCarsIntensityIndex(value)];\n  return resp+'default';\n}\n\nfunction getDataPointStickyInfo(dataPoint, pollutantsTranslations) {\n  let dataPointExtraFields = getDataPointExtraFields(dataPoint);  \n  let stickyInfo = '<div class=\"stycky-popup-info\">'\n\n  if(dataPoint.type==='AirQualityObserved') {\n    stickyInfo += '<div class=\"head air-quality\">Air Quality</div>'\n  } else {\n    if(dataPoint.type==='TrafficFlowObserved') {\n      stickyInfo += '<div class=\"head traffic-flow\">Cars Intensity</div>'\n    } else {\n      stickyInfo += '<div class=\"head\">' + dataPoint.type + '</div>'\n    }\n  }  \n\n  //body\n  stickyInfo += '<div class=\"body\">'+\n                  '<div>Id: ' + dataPoint.id + '</div>';\n  // if(dataPoint.type==='AirQualityObserved')\n  //   stickyInfo += '<div>AQI: ' + dataPoint.value + ' (' + dataPointExtraFields.aqiMeaning + ')</div>'\n  // else\n    stickyInfo += '<div>Value: '+dataPoint.value + '</div>'\n\n  //let qq = getDataPointDetails(dataPoint.pollutants)\n  //console.debug(qq)\n  stickyInfo += getDataPointDetails(dataPoint, pollutantsTranslations).join('')\n  stickyInfo += '</div>'\n  stickyInfo += '</div>'\n\n//console.debug(dataPoint)\n  return stickyInfo\n}\n\nfunction getDataPointDetails(dataPoint, pollutantsTranslations) {\n  let translatedValues = dataPoint.pollutants.map((p)=>{\n    let trans = pollutantsTranslations.filter((elem)=>elem[0]===p.name)\n    return trans.length>0 ? { 'name': trans[0][1], value: p.value, unit: trans[0][2] } : { 'name': p, value: dataPoint[p.name], unit: '' }\n  })\n\n  return translatedValues.map((translatedValue)=>`<div>${translatedValue.name}: ${translatedValue.value} ${translatedValue.unit||''}</div>`)\n}\n\nfunction renderChart(panel_id, chartSeries, chartData, parameterUnit, title) {\n\n  showDataDetailsSelect(panel_id);\n  drawChart(panel_id);\n\n  //config highchart acording with grafana theme\n  if(!config.bootData.user.lightTheme) {\n    Highcharts.theme = HIGHCHARTS_THEME_DARK;\n\n    // Apply the theme\n    Highcharts.setOptions(Highcharts.theme);\n  }\n\n  Highcharts.chart('graph_container_'+panel_id,\n    {\n      chart: {\n        type: 'line',\n        height: 200,\n        zoomType: 'x',\n        events: {\n          load: function () {            \n            chartSeries = this.series[0]; // set up the updating of the chart each second\n          }\n        }\n      },\n      title: {\n        text: title\n      },\n      subtitle: {\n        text: ''\n      },\n      xAxis: {\n        type: 'datetime'\n      },\n      yAxis: {\n        title: {\n          text: parameterUnit\n        }\n      },\n      legend: {\n        enabled: false\n      },\n      series: [{\n        name: title,\n        data: chartData\n      }]\n    }\n  );\n}\n\nfunction hideAllGraphPopups(panel_id) {\n  let map_table_popups = ['measures_table', 'health_concerns_wrapper', 'environment_table', 'traffic_table'];\n\n  for(let map_table_popup of map_table_popups) {\n    let popup = document.getElementById(map_table_popup+'_'+panel_id)\n    if(popup)\n      popup.style.display = 'none';\n  }\n}\nfunction drawHealthConcernsPopup(panel_id, providedPollutants, risk, color, meaning, map_size) {\n  const healthConcernsWrapper = document.getElementById('health_concerns_wrapper_'+panel_id);\n  const healthConcerns = document.querySelector('#health_concerns_wrapper_'+panel_id+'>div');\n  const healthConcernsColor = document.querySelector('#health_concerns_wrapper_'+panel_id+'>div>span>span.color');\n  const healthRisk = document.getElementById('health_risk_'+panel_id);\n\n  healthConcernsWrapper.style.display = 'block';\n  healthConcernsColor.style.backgroundColor = color;\n  healthRisk.innerHTML = risk;\n}\nfunction drawDefaultPopups() {  \n}\nfunction drawTrafficFlowPopup(panel_id) {\n  document.getElementById('traffic_table_'+panel_id).style.display = 'block';\n}\nfunction drawChart(panel_id) {\n  document.getElementById('data_chart_'+panel_id).style.display = 'block';\n}\n\n//show all accepted pollutants for a specific point id\nfunction getPollutantsToShow(allPollutants, id) {\n  const pollutantsToShow = {};\n  for (const key in allPollutants) {\n    allPollutants[key].forEach((_value) => {\n      if (_value.id === id) {\n        if (_value.value) {\n          if (!(pollutantsToShow[key])){\n            pollutantsToShow[key] = 0;\n          }\n          pollutantsToShow[key] = _value.value;\n        }\n      }\n    });\n  }\n\n//  pollutantsToShow['aqi'] = aqi;\n  return pollutantsToShow\n}\n\n//render the select in the specific panel, with the specif pollutants and select the option\nfunction drawSelect(panel_id, pollutantsToShow, providedPollutants, currentParameterForChart, mapPointOptions) {\n\n  // Remove air paramters from dropdown\n  let el = document.querySelector('#parameters_dropdown_'+panel_id);\n  while ( el.firstChild ) {\n    el.removeChild( el.firstChild )\n  }\n  //select population\n  for (const pollutant in pollutantsToShow){\n    let [pollutantId, pollutantName, pollutantUnit] = providedPollutants.filter((elem)=>elem[0]===pollutant)[0]\n\n    // Add Pollutants to Chart Dropdown\n    const newPollutant = document.createElement('option');\n    newPollutant.id = 'pollutantOption';\n    newPollutant.value = pollutant.toUpperCase();\n\n    if(currentParameterForChart===newPollutant.value)\n      newPollutant.selected = 'selected';\n    \n    newPollutant.innerHTML = pollutantName;\n\n    el.appendChild(newPollutant);\n    // ----\n  }\n  let selectBox = document.querySelector('#parameters_dropdown_'+panel_id)\n  if(selectBox.options.length>0)\n    selectBox.style.display = 'block';\n\n}\n\nfunction drawMeasuresPopup(panel_id, pollutantsToShow, providedPollutants, currentParameterForChart) {\n  const measuresTable = document.querySelector('#measures_table_'+panel_id+' > table > tbody');\n  while (measuresTable.rows[0]) measuresTable.deleteRow(0);\n\n  for (const pollutant in pollutantsToShow){\n    const row = measuresTable.insertRow(-1);    // -1 for inserting bottom\n\n    let [pollutantId, pollutantName, pollutantUnit] = providedPollutants.filter((elem)=>elem[0]===pollutant)[0]\n\n    const innerCell0 = pollutantName;\n    const innerCell1 = pollutantsToShow[pollutant] + ' ' + pollutantUnit;\n    const cell0 = row.insertCell(0);\n    const cell1 = row.insertCell(1);\n\n    cell0.innerHTML = innerCell0;\n    cell1.innerHTML = innerCell1;\n  }\n\n  document.getElementById('measures_table_'+panel_id).style.display = 'block';\n}\n\n\n// function drawAQIPollutantsPopup(panel_id, providedPollutants, allPollutants, selectedId, aqi, currentParameterForChart) {\n\n//   //no pollutants\n//   if(!providedPollutants || providedPollutants.length===0)\n//     return ;\n//   if(!selectedId) {\n//     console.warn('no selectedId here')\n//   }\n\n//   let pollutantsToShow = getPollutantsToShow(allPollutants, selectedId)\n//   drawAQIPopups(panel_id, pollutantsToShow, providedPollutants, currentParameterForChart)\n// }\n\nexport {\n  processData,\n  getTimeSeries, \n  dataTreatment, \n  getUpdatedChartSeries, \n\n  hideAllGraphPopups, \n  drawPopups,\n  renderChart,\n\n  getCityCoordinates,\n\n  getDataPointExtraFields,\n  getDataPointStickyInfo,\n\n  getSelectedCity,\n\n  getMapMarkerClassName\n}"]}