{"version":3,"sources":["../../src/utils/map_utils.js"],"names":["createLine","time_","value","time","Date","day","getDate","month","getMonth","year","getFullYear","hour","getHours","minutes","getMinutes","seconds","getSeconds","milliseconds","getMilliseconds","UTC","getCityCoordinates","city_name","url","NOMINATIM_ADDRESS","replace","fetch","then","response","json","latitude","data","lat","longitude","lon","catch","console","error","getSelectedCity","vars","cityenv_","filter","elem","name","city","length","current","calculateAQIIndex","aqiIndex","AQI","range","forEach","index","calculateCarsIntensityIndex","CARS_COUNT","drawPopups","panel_id","lastValueMeasure","validated_metrics","currentParameterForChart","hideAllGraphPopups","drawMeasuresPopup","type","document","getElementById","style","display","drawHealthConcernsPopup","risks","color","meaning","drawTrafficFlowPopup","drawDefaultPopups","log","getDataPointExtraFields","dataPoint","values","fillOpacity","aqiColor","_","defaults","fillColor","aqiMeaning","aqiRisk","aqi","markerColor","colorIndex","getMapMarkerClassName","resp","classColor","getDataPointStickyInfo","metricsTranslations","dataPointExtraFields","stickyInfo","getDataPointDetails","join","translatedValues","Object","keys","map","dpKey","dP","trans","unit","translatedValue","renderChart","panelId","selectedPointData","measurementUnits","chartDetails","debug","pointId","fieldName","drawChartCointainer","chartData","created_at","toLowerCase","getChartMetaInfo","props","AirQualityObserved","TrafficFlowObserved","title","units","chartInfo","config","bootData","user","lightTheme","Highcharts","theme","HIGHCHARTS_THEME_DARK","setOptions","chart","height","zoomType","events","load","series","text","subtitle","xAxis","yAxis","legend","enabled","map_table_popups","map_table_popup","popup","risk","map_size","healthConcernsWrapper","healthConcerns","querySelector","healthConcernsColor","healthRisk","backgroundColor","innerHTML","getMetricsToShow","allMetrics","id","metricsToShow","key","_value","drawSelect","providedMetrics","el","firstChild","removeChild","emptyOption","createElement","appendChild","metric","newMetric","toUpperCase","selected","selectBox","options","measuresTable","rows","deleteRow","row","insertRow","innerCell0","innerCell1","cell0","insertCell","cell1","Exporting","PANEL_DEFAULTS","TRANSLATIONS"],"mappings":"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","file":"map_utils.js","sourcesContent":["// draw components in the map\n/* Vendor specific */\nimport _ from 'lodash';\n//import Highcharts from './vendor/highcharts/highstock';\n//import \"../vendor/highcharts/highcharts.css!\";\n//import \"../vendor/highcharts/themes/dark-unica.css!\";\nimport Highcharts from \"../vendor/highcharts/highstock\";\nimport Exporting from '../vendor/highcharts/modules/exporting';\n// Initialize exporting module.\nExporting(Highcharts);\n\n/* Grafana Specific */\nimport config from 'app/core/config';\n\n/* App specific */\nimport { AQI, CARS_COUNT, NOMINATIM_ADDRESS, PANEL_DEFAULTS } from '../definitions';\nimport { HIGHCHARTS_THEME_DARK } from '../utils/highcharts/custom_themes';\n\nconst TRANSLATIONS = PANEL_DEFAULTS['metrics']\n\n/*\n* Auxiliar functions\n*/\n// just for improve DRY\nfunction createLine(time_, value) {\n  const time = new Date(time_);\n  const day = time.getDate();\n  const month = time.getMonth();\n  const year = time.getFullYear();\n  const hour = time.getHours() - 1;\n  const minutes = time.getMinutes();\n  const seconds = time.getSeconds();\n  const milliseconds = time.getMilliseconds();\n  return [Date.UTC(year, month, day, hour+1, minutes, seconds, milliseconds), value]\n}\n\n// Access remote api and gives the coordinates from a city center based on NOMINATIM url server\nfunction getCityCoordinates(city_name) {\n  let url = NOMINATIM_ADDRESS.replace('<city_name>', city_name)\n  return fetch(url)\n    .then(response => response.json())\n    .then(data => { return { latitude: data[0].lat, longitude: data[0].lon } })\n    .catch(error => console.error(error))\n}\n\n// Given vars passed as param, retrieves the selected city\nfunction getSelectedCity(vars) {\n  let cityenv_ = vars.filter(elem => elem.name===\"cityenv\")\n  let city = null;\n  if(cityenv_ && cityenv_.length === 1)\n    city = cityenv_[0].current.value\n\n  return city;\n}\n\n// gets the aqi index from the AQI var\nfunction calculateAQIIndex(value) {\n  let aqiIndex;\n  AQI.range.forEach((elem, index) => {\n    if (value >= elem) {\n      aqiIndex = index;\n    }\n  });\n  return aqiIndex;\n}\n// gets the index from the CARS_COUNT const var\nfunction calculateCarsIntensityIndex(value) {\n  CARS_COUNT.range.forEach((elem, index) => {\n    if (value >= elem) {\n      return index;\n    }\n  });\n  return 0;\n}\n\n/*\n* View components controllers\n*/\nfunction drawPopups(panel_id, lastValueMeasure, validated_metrics, currentParameterForChart) {\n\n  //render popups\n  try {\n    // Show Metrics Legend (MAP)\n\n    //draw select\n    if(validated_metrics) {\n\n      hideAllGraphPopups(panel_id)\n\n      drawMeasuresPopup(panel_id, lastValueMeasure, validated_metrics, currentParameterForChart)\n\n      switch(lastValueMeasure.type) {\n        case 'AirQualityObserved':\n          let aqiIndex = calculateAQIIndex(lastValueMeasure.value);\n          \n          document.getElementById('environment_table_'+panel_id).style.display = 'block';\n\n          drawHealthConcernsPopup(panel_id, AQI.risks[aqiIndex], AQI.color[aqiIndex], AQI.meaning[aqiIndex]);\n     \n          break;\n        case 'TrafficFlowObserved':\n          drawTrafficFlowPopup(panel_id);\n          break;\n        default:\n          drawDefaultPopups(panel_id);\n      }\n    }\n    \n  } catch(error) {\n    console.log(\"Error:\");\n    console.log(error);\n    console.log(\"lastValueMeasure: \")\n    console.log(lastValueMeasure)\n  }\n}\n\n\nfunction getDataPointExtraFields(dataPoint) {\n\n  const values = {\n    fillOpacity: 0.5\n  }\n\n  if(dataPoint.type==='AirQualityObserved') {\n    let aqiIndex = calculateAQIIndex(dataPoint.value);\n    let aqiColor = AQI.color[aqiIndex];\n\n    _.defaults(values, {\n      color: aqiColor,\n      fillColor: aqiColor,\n\n      aqiColor: aqiColor,\n      aqiMeaning: AQI.meaning[aqiIndex],\n      aqiRisk: AQI.risks[aqiIndex],\n      aqi: dataPoint.value,\n\n      markerColor: AQI.markerColor[aqiIndex]\n    })    \n  } else {\n    if(dataPoint.type==='TrafficFlowObserved') {\n      let colorIndex = calculateCarsIntensityIndex(dataPoint.value)\n\n      _.defaults(values, {\n        color: CARS_COUNT.color[colorIndex], \n        fillColor: CARS_COUNT.color[colorIndex],\n        \n        markerColor: CARS_COUNT.markerColor[colorIndex]\n      })\n    }\n  }\n\n  return values;\n}\n\nfunction getMapMarkerClassName(type, value) {\n  let resp = 'map-marker-';\n  if(type==='AirQualityObserved') {\n    return resp+AQI.classColor[calculateAQIIndex(value)];\n  } else if(type==='TrafficFlowObserved')\n    return resp+CARS_COUNT.classColor[calculateCarsIntensityIndex(value)];\n  return resp+'default';\n}\n\nfunction getDataPointStickyInfo(dataPoint, metricsTranslations) {\n  let dataPointExtraFields = getDataPointExtraFields(dataPoint);  \n  let stickyInfo = '<div class=\"stycky-popup-info\">'\n\n  if(dataPoint.type==='AirQualityObserved') {\n    stickyInfo += '<div class=\"head air-quality\">Air Quality</div>'\n  } else {\n    if(dataPoint.type==='TrafficFlowObserved') {\n      stickyInfo += '<div class=\"head traffic-flow\">Cars Intensity</div>'\n    } else {\n      stickyInfo += '<div class=\"head\">' + dataPoint.type + '</div>'\n    }\n  }  \n\n  //body\n  stickyInfo += '<div class=\"body\">'\n  stickyInfo += getDataPointDetails(dataPoint, metricsTranslations).join('')\n  stickyInfo += '</div>'\n  stickyInfo += '</div>'\n\n  //console.debug(dataPoint)\n  return stickyInfo\n}\n\nfunction getDataPointDetails(dataPoint, metricsTranslations) {\n  let translatedValues = Object.keys(dataPoint).map((dpKey)=>{\n    let dP = dataPoint[dpKey]\n    let trans = metricsTranslations.filter((elem)=>elem[0]===dpKey)\n    return { 'name': (trans.length>0 ? trans[0][1] : dpKey ), value: dP, unit: (trans.length>0 ? trans[0][2] : '') }\n  })\n\n  return translatedValues.map((translatedValue)=>`<div>${translatedValue.name}: ${translatedValue.value} ${translatedValue.unit||''}</div>`)\n}\n\nfunction renderChart(panelId, selectedPointData, measurementUnits, chartDetails) {\n  console.debug('renderChart')\n  let [type, pointId, fieldName] = chartDetails\n\n  drawChartCointainer(panelId);\n\n  //prepare data to chart\n  let chartData = selectedPointData.map((elem)=>createLine(elem.created_at, elem[fieldName.toLowerCase()]));\n\n  function getChartMetaInfo() {\n    let props = {\n      AirQualityObserved: 'Air Quality',\n      TrafficFlowObserved: 'Cars'\n    }\n\n    return { \n        title: `${props[type]||type}: Device ${pointId} - ${measurementUnits[1]}`,\n        units: (measurementUnits[2] ? `${measurementUnits[1]} (${measurementUnits[2]})` : measurementUnits[1])\n      }\n  }\n\n\n  let chartInfo = getChartMetaInfo();\n  \n  //config highchart acording with grafana theme\n  if(!config.bootData.user.lightTheme) {\n    Highcharts.theme = HIGHCHARTS_THEME_DARK;\n\n    // Apply the theme\n    Highcharts.setOptions(Highcharts.theme);\n  }\n\n  Highcharts.chart('graph_container_'+panelId,\n    {\n      chart: {\n        type: 'line',\n        height: 200,\n        zoomType: 'x',\n        events: {\n          load: function () {            \n            chartData = this.series[0]; // set up the updating of the chart each second\n          }\n        }\n      },\n      title: {\n        text: chartInfo.title\n      },\n      subtitle: {\n        text: ''\n      },\n      xAxis: {\n        type: 'datetime'\n      },\n      yAxis: {\n        title: {\n          text: chartInfo.units\n        }\n      },\n      legend: {\n        enabled: false\n      },\n      series: [{\n        name: chartInfo.units,\n        data: chartData\n      }]\n    }\n  );\n}\n\nfunction hideAllGraphPopups(panel_id) {\n  let map_table_popups = ['measures_table', 'health_concerns_wrapper', 'environment_table', 'traffic_table'];\n\n  for(let map_table_popup of map_table_popups) {\n    let popup = document.getElementById(map_table_popup+'_'+panel_id)\n    if(popup)\n      popup.style.display = 'none';\n  }\n}\nfunction drawHealthConcernsPopup(panel_id, risk, color, meaning, map_size) {\n  const healthConcernsWrapper = document.getElementById('health_concerns_wrapper_'+panel_id);\n  const healthConcerns = document.querySelector('#health_concerns_wrapper_'+panel_id+'>div');\n  const healthConcernsColor = document.querySelector('#health_concerns_wrapper_'+panel_id+'>div>span>span.color');\n  const healthRisk = document.getElementById('health_risk_'+panel_id);\n\n  healthConcernsWrapper.style.display = 'block';\n  healthConcernsColor.style.backgroundColor = color;\n  healthRisk.innerHTML = risk;\n}\nfunction drawDefaultPopups() {  \n}\nfunction drawTrafficFlowPopup(panel_id) {\n  document.getElementById('traffic_table_'+panel_id).style.display = 'block';\n}\nfunction drawChartCointainer(panel_id) {\n  document.querySelector('#data_details_'+panel_id).style.display = 'block';\n  document.getElementById('data_chart_'+panel_id).style.display = 'block';\n}\n\n//show all accepted metrics for a specific point id\nfunction getMetricsToShow(allMetrics, id) {\n  const metricsToShow = {};\n  for (const key in allMetrics) {\n    allMetrics[key].forEach((_value) => {\n      if (_value.id === id) {\n        if (_value.value) {\n          if (!(metricsToShow[key])){\n            metricsToShow[key] = 0;\n          }\n          metricsToShow[key] = _value.value;\n        }\n      }\n    });\n  }\n\n  //  metricsToShow['aqi'] = aqi;\n  return metricsToShow\n}\n\n//render the select in the specific panel, with the specif metrics and select the option\nfunction drawSelect(panel_id, metricsToShow, providedMetrics, currentParameterForChart) {\n\n  // Remove air paramters from dropdown\n  let el = document.querySelector('#parameters_dropdown_'+panel_id);\n  while ( el.firstChild ) {\n    el.removeChild( el.firstChild )\n  }\n\n  //default option\n  let emptyOption = document.createElement('option');\n  emptyOption.id = 'metricsOption_'+panel_id;\n  emptyOption.value = 'value';\n  emptyOption.innerHTML = 'Select Metric';\n  el.appendChild(emptyOption);\n\n  //select population\n  Object.keys(metricsToShow).forEach((metric)=>{\n    providedMetrics.forEach((elem)=>{\n      if(elem[0] == metric) {\n        let newMetric = document.createElement('option');\n        newMetric.id = 'metricsOption_'+panel_id;\n        newMetric.value = metric.toUpperCase();\n\n        if(currentParameterForChart===newMetric.value)\n          newMetric.selected = 'selected';\n        \n        newMetric.innerHTML = elem[1];\n\n        el.appendChild(newMetric);\n      }\n    })\n  })\n\n  let selectBox = document.querySelector('#parameters_dropdown_'+panel_id)\n  if(selectBox.options.length>0)\n    selectBox.style.display = 'block';\n\n}\n\nfunction drawMeasuresPopup(panel_id, metricsToShow, providedMetrics, currentParameterForChart) {\n  const measuresTable = document.querySelector('#measures_table_'+panel_id+' > table > tbody');\n  while (measuresTable.rows[0]) measuresTable.deleteRow(0);\n\n  Object.keys(metricsToShow).forEach((metric)=>{\n    providedMetrics.forEach((elem)=>{\n      if(elem[0] == metric) {\n        let row = measuresTable.insertRow();    // -1 for inserting bottom\n        let innerCell0 = elem[1];\n        let innerCell1 = (metricsToShow[metric] ? metricsToShow[metric] : '-') + (elem[2]?` ${elem[2]}`:'');\n        let cell0 = row.insertCell(0);\n        let cell1 = row.insertCell(1);\n\n        cell0.innerHTML = innerCell0;\n        cell1.innerHTML = innerCell1;        \n      }\n    })\n\n  })\n\n  document.getElementById('measures_table_'+panel_id).style.display = 'block';\n}\n\nexport {\n\n  hideAllGraphPopups, \n  drawPopups,\n  drawSelect,\n  renderChart,\n\n  getCityCoordinates,\n\n  getDataPointExtraFields,\n  getDataPointStickyInfo,\n\n  getSelectedCity,\n\n  getMapMarkerClassName\n}"]}