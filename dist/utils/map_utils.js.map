{"version":3,"sources":["../../src/utils/map_utils.js"],"names":["calculateAQI","aqi","aqiIndex","AQI","range","forEach","value","index","calculateCarsIntensityIndex","CARS_COUNT","elem","getTimeSeries","data","valueValues","values","pollutantsValues","Object","keys","key","point","id","time","pollutants","type","pollutantsTemp","pollutant","name","push","dataTreatment","finalData","auxData","locationLatitude","locationLongitude","getUpdatedChartSeries","chartSeries","timeSeries","currentTargetForChart","currentParameterForChart","length","targetType","target","options","targetId","currentParameter","toLowerCase","lastMeasure","lastTime","timeTemp","val","Date","day","getDate","month","getMonth","year","getFullYear","hour","getHours","minutes","getMinutes","seconds","getSeconds","milliseconds","getMilliseconds","chartLastDisplayedValue","y","chartLastDisplayedTime","x","chartLastDisplayedId","split","parseInt","addPoint","UTC","error","console","log","processData","validated_pollutants","chartData","parameterUnit","title","unit","parameterChoice","sensor","createLine","getCityCoordinates","city_name","url","nominatim_address","replace","fetch","then","response","json","latitude","lat","longitude","lon","catch","getSelectedCity","vars","cityenv_","filter","city","current","drawPopups","hideAllGraphPopups","lastValueMeasure","allPollutants","drawPollutantsPopup","drawHealthConcernsPopup","risks","color","meaning","drawTrafficFlowPopup","drawDefaultPopups","showDataDetailsSelect","document","querySelector","style","display","getStickyInfo","dataPoint","stickyPopupInfo","fillOpacity","aqiColor","aqiMeaning","aqiRisk","_","defaults","fillColor","color_index","renderChart","drawChart","config","bootData","user","lightTheme","window","Highcharts","setOptions","HIGHCHARTS_THEME_DARK","stockChart","chart","height","zoomType","events","load","series","text","subtitle","xAxis","yAxis","legend","enabled","rangeSelector","buttons","count","inputEnabled","selected","getElementById","providedPollutants","risk","map_size","healthConcernsWrapper","healthConcerns","healthConcernsColor","healthRisk","backgroundColor","innerHTML","measuresTable","rows","deleteRow","el","firstChild","removeChild","pollutantsToShow","_value","row","insertRow","innerCell0","innerCell1","cell0","insertCell","cell1","newPollutant","createElement","toUpperCase","appendChild"],"mappings":"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","file":"map_utils.js","sourcesContent":["// draw components in the map\n/* Vendor specific */\nimport _ from 'lodash';\n\n/* Grafana Specific */\nimport config from 'app/core/config';\n\n/* App specific */\nimport { AQI, CARS_COUNT, HIGHCHARTS_THEME_DARK, nominatim_address } from '../definitions';\n\n/**\n* Primary functions\n*/\n// gets the aqi index from the AQI var\nfunction calculateAQI(aqi) {\n  let aqiIndex;\n  AQI.range.forEach((value, index) => {\n    if (aqi >= value) {\n      aqiIndex = index;\n    }\n  });\n  return aqiIndex;\n}\nfunction calculateCarsIntensityIndex(value) {\n  CARS_COUNT.range.forEach((elem, index) => {\n    if (value >= elem) {\n      return index;\n    }\n  });\n  return 0;\n}\n\n//helper to create series for chart display\nfunction getTimeSeries(data) {\n  const valueValues = {};\n  const values = [];\n  const pollutantsValues = [];\n\n  Object.keys(data).forEach((key) => {\n    data[key].forEach((point) => {\n      const id = point.id;\n      const time = point.time;\n      let pollutants = '';\n\n      const value = point.value;\n      if (point.type === 'AirQualityObserved') {\n        pollutants = point.pollutants;\n        const pollutantsTemp = {};\n\n        pollutants.forEach((pollutant) => {\n          if (!(pollutantsValues[pollutant.name])) {\n            pollutantsValues[pollutant.name] = [];\n          }\n          pollutantsValues[pollutant.name].push({'time': time, 'value': pollutant.value, 'id': id});\n        });\n      }\n\n      if (!(valueValues[point.id])) {\n        valueValues[point.id] = [];\n      }\n      valueValues[point.id].push({'time': time, 'value': value, 'id': id});\n    });\n  });\n\n  return {'values': valueValues, 'pollutants': pollutantsValues};\n}\n\n// Agregate data by id\nfunction dataTreatment(data) {\n  const finalData = {};\n  let auxData;\n\n  data.forEach((value) => {\n    if (!(finalData[value.id])) {\n      finalData[value.id] = [];\n    }\n\n    auxData = {\n        'id': value.id, \n        'locationLatitude': value.locationLatitude, \n        'locationLongitude': value.locationLongitude, \n        'time': value.time, \n        'type': value.type, \n        'value': value.value\n      }\n\n    if (value.type === 'AirQualityObserved')\n      auxData.pollutants = value.pollutants;\n\n    finalData[value.id].push( auxData );\n  });\n\n  return finalData;\n}\n\nfunction getUpdatedChartSeries(chartSeries, timeSeries, currentTargetForChart, currentParameterForChart) {\n\n  if(Object.keys(chartSeries).length === 0)\n    return chartSeries\n\n  const targetType = currentTargetForChart.target.options.type;\n  const targetId = currentTargetForChart.target.options.id;\n  const currentParameter = currentParameterForChart.toLowerCase();\n  let lastMeasure;\n  let lastTime;\n\n  try {\n    let timeTemp;\n    if (currentParameter !== 'aqi' && targetType === 'AirQualityObserved'){\n      timeTemp = timeSeries.pollutants[currentParameter];\n      timeTemp.forEach((val) => {\n        if (val.id === targetId){\n          lastTime = val.time;\n          lastMeasure = val.value;\n        } \n      });\n    } else {\n      timeTemp = timeSeries.values[targetId];\n      lastMeasure = timeTemp[timeTemp.length - 1].value;\n      lastTime = timeTemp[timeTemp.length - 1].time\n    }\n   \n    const time = new Date(lastTime);\n    const day = time.getDate();\n    const month = time.getMonth();\n    const year = time.getFullYear();\n    const hour = time.getHours() - 1;\n    const minutes = time.getMinutes();\n    const seconds = time.getSeconds();\n    const milliseconds = time.getMilliseconds();      \n    const chartLastDisplayedValue = chartSeries.data[chartSeries.data.length - 1].y;\n    const chartLastDisplayedTime = chartSeries.data[chartSeries.data.length - 1].x;\n    let chartLastDisplayedId = chartSeries.name.split(' ');\n\n    chartLastDisplayedId = parseInt(chartLastDisplayedId[chartLastDisplayedId.length - 1]);      \n\n    if (!(lastTime === chartLastDisplayedTime && lastMeasure === chartLastDisplayedValue && targetId === chartLastDisplayedId)){\n      chartSeries.addPoint([Date.UTC(year, month, day, hour+1, minutes, seconds, milliseconds), lastMeasure], true, true);\n    }\n  } catch(error){\n    console.log(\"Error:\");\n    console.log(error);\n  }\n\n  return chartSeries;\n}\n\nfunction processData(chartSeries, timeSeries, validated_pollutants, currentParameterForChart, currentTargetForChart) {\n  let chartData = [];\n  const currentParameter = currentParameterForChart.toLowerCase();\n  const id = currentTargetForChart.target.options.id;\n  const type = currentTargetForChart.target.options.type;\n  const values = timeSeries.values[id];\n\n  let parameterUnit = '';\n  let title = '';\n\n  if (type === 'AirQualityObserved' && currentParameter !== 'aqi') {\n    parameterUnit = validated_pollutants[currentParameter].unit;\n    title = validated_pollutants[currentParameter].name + ' - Device ' + id;\n\n    const parameterChoice = timeSeries.pollutants[currentParameter];      \n    parameterChoice.forEach((sensor) => {\n      if (sensor.id === id) {\n       chartData.push(createLine(sensor));\n      }\n    });\n  } else {\n    if(type === 'TrafficFlowObserved') {\n      title = 'Cars Intensity - Device ' + id;\n      parameterUnit = 'Cars'\n    } else {\n      title = type + ' - Device ' + id;\n      parameterUnit = type;\n    }\n\n    values.forEach((value) => {\n      chartData.push(createLine(value));\n    });\n  }\n\n  return [chartData, parameterUnit, title]\n}\n\n\n\n/*\n* Auxiliar functions\n*/\n// just for improve DRY\nfunction createLine(value) {\n  const time = new Date(value.time);\n  const day = time.getDate();\n  const month = time.getMonth();\n  const year = time.getFullYear();\n  const hour = time.getHours() - 1;\n  const minutes = time.getMinutes();\n  const seconds = time.getSeconds();\n  const milliseconds = time.getMilliseconds();\n  return [Date.UTC(year, month, day, hour+1, minutes, seconds, milliseconds), value.value]\n}\n\n// Access remote api and gives the coordinates from a city center based on nominatin url server\nfunction getCityCoordinates(city_name) {\n  let url = nominatim_address.replace('<city_name>', city_name)\n  return fetch(url)\n    .then(response => response.json())\n    .then(data => { return { latitude: data[0].lat, longitude: data[0].lon } })\n    .catch(error => console.error(error))\n}\n\n// Given vars passed as param, retrieves the selected city\nfunction getSelectedCity(vars) {\n  let cityenv_ = vars.filter(elem => elem.name===\"cityenv\")\n  let city = null;\n  if(cityenv_ && cityenv_.length === 1)\n    city = cityenv_[0].current.value\n\n  return city;\n}\n\n\n\n\n/*\n* View components controllers\n*/\nfunction drawPopups(timeSeries, validated_pollutants, currentParameterForChart, currentTargetForChart) {\n  //console.log('drawPopups');\n  const id = currentTargetForChart.target.options.id;\n  const type = currentTargetForChart.target.options.type;\n  const values = timeSeries.values[id];\n\n  hideAllGraphPopups()\n\n  //render popups\n  try {\n    const lastValueMeasure = values[values.length - 1].value; //values array is the one for the AQI values\n    const aqiIndex = calculateAQI(lastValueMeasure);\n\n    // Show Pollutants Legend (MAP)\n\n    switch(type) {\n      case 'AirQualityObserved':\n        const allPollutants = timeSeries.pollutants;\n\n        if(validated_pollutants) {\n          drawPollutantsPopup(validated_pollutants, allPollutants, id, lastValueMeasure, currentParameterForChart);\n          drawHealthConcernsPopup(validated_pollutants, AQI.risks[aqiIndex], AQI.color[aqiIndex], AQI.meaning[aqiIndex]);\n        }\n        break;\n      case 'TrafficFlowObserved':\n        drawTrafficFlowPopup();\n        break;\n      default:\n        drawDefaultPopups();\n    }\n    \n  } catch(error) {\n    console.log(\"Exception:\");\n    console.log(error);\n    console.log(\"id: \" + id + \", type: \" + type + \", values: \" + values)\n  }\n}\n\n\n\n/*\n* view components manipulation\n*/\nfunction showDataDetailsSelect() {\n  document.querySelector('#data_details').style.display = 'block';\n}\nfunction getStickyInfo(dataPoint) {\n  let stickyPopupInfo = '';\n  const values = {\n    id: dataPoint.id,\n    type: dataPoint.type,\n    latitude: dataPoint.locationLatitude,\n    longitude: dataPoint.locationLongitude,\n    fillOpacity: 0.5\n  }\n\n  stickyPopupInfo = '<div class=\"stycky-popup-info\">'\n\n  if(dataPoint.type==='AirQualityObserved') {\n    const aqi = calculateAQI(dataPoint.value);\n    const aqiColor = AQI.color[aqi];\n    const aqiMeaning = AQI.meaning[aqi];\n    const aqiRisk = AQI.risks[aqi];\n\n    const pollutants = dataPoint.pollutants;\n    if(pollutants)\n      pollutants.push({'name': 'aqi', 'value': dataPoint.value});\n\n    _.defaults(values, {\n      color: aqiColor,\n      fillColor: aqiColor,\n      aqiColor: aqiColor,\n      aqiMeaning: aqiMeaning,\n      aqiRisk: aqiRisk,\n      pollutants: pollutants,\n      aqi: dataPoint.value\n    })\n\n    stickyPopupInfo += '<div>Air Quality</div>' +\n      '<div>Device: ' + dataPoint.id + '</div>' +\n      '<div>AQI: ' + dataPoint.value + ' (' + aqiMeaning + ')</div>';\n  } else {\n    if(dataPoint.type==='TrafficFlowObserved') {\n      console.log('aqui')\n      let color_index = calculateCarsIntensityIndex(dataPoint.value)\n      _.defaults(values, {\n        color: CARS_COUNT.color[color_index],\n        fillColor: CARS_COUNT[color_index]\n      })\n\n      stickyPopupInfo += '<div>Cars Intensity</div>'\n    } else\n      stickyPopupInfo += '<div>'+dataPoint.type + '</div>'\n\n    stickyPopupInfo += '<div>Device: ' + dataPoint.id + '</div>' +\n        '<div>Value: '+dataPoint.value + '</div>'\n  }\n\n\n  stickyPopupInfo += '</div>'\n\n  return [values, stickyPopupInfo];\n}\nfunction renderChart(chartSeries, chartData, parameterUnit, title) {\n\n  showDataDetailsSelect();\n  drawChart();\n\n  //config highchart acording with grafana theme\n  if(!config.bootData.user.lightTheme)\n    window.Highcharts.setOptions(HIGHCHARTS_THEME_DARK);\n\n  window.Highcharts.stockChart('graph_container', \n    {\n      chart: {\n        height: 200,\n        zoomType: 'x',\n        events: {\n          load: function () {            \n            chartSeries = this.series[0]; // set up the updating of the chart each second\n          }\n        }\n      },\n      title: {\n          text: title\n      },\n      subtitle: {\n          text: ''\n      },\n      xAxis: {\n          type: 'datetime'\n      },\n      yAxis: {\n          title: {\n              text: parameterUnit\n          }\n      },\n      legend: {\n          enabled: false\n      },\n      rangeSelector: {\n        buttons: [{\n            count: 5,\n            type: 'minute',\n            text: '5M'\n        }, {\n            count: 10,\n            type: 'minute',\n            text: '10M'\n        }, {\n            type: 'all',\n            text: 'All'\n        }],\n        inputEnabled: false,\n        selected: 2\n      },\n\n      series: [{\n          name: title,\n          data: chartData\n      }]\n    }\n  );\n}\nfunction hideAllGraphPopups() {\n  document.getElementById('measures_table').style.display = 'none';\n  document.getElementById('health_concerns_wrapper').style.display = 'none';\n  document.getElementById('environment_table').style.display = 'none';\n  document.getElementById('traffic_table').style.display = 'none';\n}\nfunction drawHealthConcernsPopup(providedPollutants, risk, color, meaning, map_size) {\n  const healthConcernsWrapper = document.getElementById('health_concerns_wrapper');\n  const healthConcerns = document.querySelector('#health_concerns_wrapper>div');\n  const healthConcernsColor = document.querySelector('#health_concerns_wrapper>div>span>span.color');\n  const healthRisk = document.getElementById('health_risk');\n\n  healthConcernsWrapper.style.display = 'block';\n  healthConcernsColor.style.backgroundColor = color;\n  healthRisk.innerHTML = risk;\n}\nfunction drawDefaultPopups() {  \n}\nfunction drawTrafficFlowPopup() {\n  document.getElementById('traffic_table').style.display = 'block';\n}\nfunction drawChart() {\n  document.getElementById('data_chart').style.display = 'block';\n}\nfunction drawPollutantsPopup(providedPollutants, allPollutants, id, aqi, currentParameterForChart) {\n  const measuresTable = document.querySelector('#measures_table > table > tbody');\n  while (measuresTable.rows[0]) measuresTable.deleteRow(0);\n\n  // Remove air paramters from dropdown\n  var el = document.getElementById('air_parameters_dropdown');\n  while ( el.firstChild ) {\n    el.removeChild( el.firstChild )\n  }\n\n  const pollutantsToShow = {};\n  for (const key in allPollutants) {    \n    allPollutants[key].forEach((_value) => {\n      if (_value.id === id) {\n        if (_value.value) {\n          if (!(pollutantsToShow[key])){\n            pollutantsToShow[key] = 0;\n          }\n          pollutantsToShow[key] = _value.value;\n        }\n      }\n    });\n  }\n\n  pollutantsToShow['aqi'] = aqi;\n\n  for (const pollutant in pollutantsToShow){\n    const row = measuresTable.insertRow(0);\n    const innerCell0 = providedPollutants[pollutant].name;\n    const innerCell1 = pollutantsToShow[pollutant] + ' ' + providedPollutants[pollutant].unit;\n    const cell0 = row.insertCell(0);\n    const cell1 = row.insertCell(1);\n\n    cell0.innerHTML = innerCell0;\n    cell1.innerHTML = innerCell1;\n\n    // Add Pollutants to Chart Dropdown\n    const newPollutant = document.createElement('option');\n    newPollutant.id = 'pollutantOption';\n    newPollutant.value = pollutant.toUpperCase();\n\n    if(currentParameterForChart===newPollutant.value)\n      newPollutant.selected = 'selected';\n    \n    newPollutant.innerHTML = providedPollutants[pollutant].name;\n\n    el.appendChild(newPollutant);\n    // ----\n  }\n\n  document.getElementById('environment_table').style.display = 'block';\n  document.getElementById('measures_table').style.display = 'block';\n}\n\nexport {\n  calculateAQI, \n  processData,\n  getTimeSeries, \n  dataTreatment, \n  getUpdatedChartSeries, \n\n  hideAllGraphPopups, \n  drawPopups,\n  renderChart,\n\n  getCityCoordinates,\n\n  getStickyInfo,\n\n  getSelectedCity\n}"]}