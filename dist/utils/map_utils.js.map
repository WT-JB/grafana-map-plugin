{"version":3,"sources":["../../src/utils/map_utils.js"],"names":["drawPopups","panelId","lastValueMeasure","validatedMetrics","hideAllGraphPopups","drawMeasuresPopup","type","aqiIndex","calculateAQIIndex","value","document","getElementById","style","display","drawHealthConcernsPopup","risks","color","meaning","drawTrafficFlowPopup","drawDefaultPopups","error","console","log","drawSelect","metricsToShow","providedMetrics","currentParameterForChart","el","querySelector","firstChild","removeChild","emptyOption","createElement","id","innerHTML","appendChild","Object","keys","forEach","metric","elem","newMetric","toUpperCase","selected","selectBox","options","length","renderChart","selectedPointData","measurementUnits","chartDetails","debug","pointId","fieldName","drawChartCointainer","chartData","map","createLine","created_at","toLowerCase","getChartMetaInfo","props","AirQualityObserved","TrafficFlowObserved","title","units","chartInfo","bootData","user","lightTheme","theme","setOptions","chart","height","zoomType","events","load","series","text","subtitle","xAxis","yAxis","legend","enabled","name","data","getDataPointExtraFields","dataPoint","values","fillOpacity","aqiColor","defaults","fillColor","aqiMeaning","aqiRisk","aqi","markerColor","colorIndex","calculateCarsIntensityIndex","getMapMarkerClassName","resp","classColor","getDataPointStickyInfo","metricsTranslations","dataPointExtraFields","stickyInfo","getDataPointDetails","join","translatedValues","dpKey","dP","trans","filter","unit","translatedValue","getMetricsToShow","allMetrics","key","_value","getSelectedCity","vars","cityenv_","city","current","map_table_popups","map_table_popup","popup","risk","map_size","healthConcernsWrapper","healthConcerns","healthConcernsColor","healthRisk","backgroundColor","measuresTable","rows","deleteRow","row","insertRow","innerCell0","innerCell1","cell0","insertCell","cell1","getCityCoordinates","city_name","url","replace","fetch","then","response","json","latitude","lat","longitude","lon","catch","range","index","time_","time","Date","day","getDate","month","getMonth","year","getFullYear","hour","getHours","minutes","getMinutes","seconds","getSeconds","milliseconds","getMilliseconds","UTC"],"mappings":"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","file":"map_utils.js","sourcesContent":["// draw components in the map\n/* Vendor specific */\nimport _ from 'lodash';\n\nimport Highcharts from \"../vendor/highcharts/highcharts\";\nimport Exporting from '../vendor/highcharts/modules/exporting';\n// Initialize exporting module.\nExporting(Highcharts);\n\n/* Grafana Specific */\nimport config from 'app/core/config';\n\nimport { titleize } from './string'\n\n/* App specific */\nimport { AQI, CARS_COUNT, NOMINATIM_ADDRESS } from '../definitions';\nimport { HIGHCHARTS_THEME_DARK } from '../utils/highcharts/custom_themes';\n\n\n/*\n* Primary functions\n*/\n\n/**\n* Display popups based in the click in map's marker\n*/\nfunction drawPopups(panelId, lastValueMeasure, validatedMetrics) {\n\n  //render popups\n  try {\n    // Show Metrics Legend (MAP)\n\n    //draw select\n    if(validatedMetrics) {\n\n      hideAllGraphPopups(panelId)\n\n      drawMeasuresPopup(panelId, lastValueMeasure, validatedMetrics)\n\n      switch(lastValueMeasure.type) {\n        case 'AirQualityObserved':\n          let aqiIndex = calculateAQIIndex(lastValueMeasure.value);\n          \n          document.getElementById('environment_table_'+panelId).style.display = 'block';\n\n          drawHealthConcernsPopup(panelId, AQI.risks[aqiIndex], AQI.color[aqiIndex], AQI.meaning[aqiIndex]);\n     \n          break;\n        case 'TrafficFlowObserved':\n          drawTrafficFlowPopup(panelId);\n          break;\n        default:\n          drawDefaultPopups(panelId);\n      }\n    }\n    \n  } catch(error) {\n    console.log(\"Error:\");\n    console.log(error);\n    console.log(\"lastValueMeasure: \")\n    console.log(lastValueMeasure)\n  }\n}\n/*\n* Draw the select box in the specific panel, with the specif metrics and select the option\n*/\nfunction drawSelect(panelId, metricsToShow, providedMetrics, currentParameterForChart) {\n  // Remove air paramters from dropdown\n  let el = document.querySelector('#parameters_dropdown_'+panelId);\n  while ( el.firstChild ) {\n    el.removeChild( el.firstChild )\n  }\n\n  //default option\n  let emptyOption = document.createElement('option');\n  emptyOption.id = 'metricsOption_'+panelId;\n  emptyOption.value = 'value';\n  emptyOption.innerHTML = 'Select Metric';\n  el.appendChild(emptyOption);\n\n  //select population\n  Object.keys(metricsToShow).forEach((metric)=>{\n    providedMetrics.forEach((elem)=>{\n      if(elem[0] == metric) {\n        let newMetric = document.createElement('option');\n        newMetric.id = 'metricsOption_'+panelId;\n        newMetric.value = metric.toUpperCase();\n\n        if(currentParameterForChart===newMetric.value)\n          newMetric.selected = 'selected';\n        \n        newMetric.innerHTML = elem[1]?elem[1]:titleize(elem[0]);\n\n        el.appendChild(newMetric);\n      }\n    })\n  })\n\n  let selectBox = document.querySelector('#parameters_dropdown_'+panelId)\n  if(selectBox.options.length>0)\n    selectBox.style.display = 'block';\n}\n/**\n* Render's the chart in panel\n*/\nfunction renderChart(panelId, selectedPointData, measurementUnits, chartDetails) {\n  console.debug('renderChart')\n  let [type, pointId, fieldName] = chartDetails\n\n  drawChartCointainer(panelId);\n\n  //prepare data to chart\n  let chartData = selectedPointData.map((elem)=>createLine(elem.created_at, elem[fieldName.toLowerCase()]));\n\n  function getChartMetaInfo() {\n    let props = {\n      AirQualityObserved: 'Air Quality',\n      TrafficFlowObserved: 'Cars'\n    }\n\n    return { \n        title: `${props[type]||type}: Device ${pointId} - ${measurementUnits[1]?measurementUnits[1]:titleize(measurementUnits[0])}`,\n        units: (measurementUnits[2] ? `${measurementUnits[1]} (${measurementUnits[2]})` : measurementUnits[1])\n      }\n  }\n\n\n  let chartInfo = getChartMetaInfo();\n  \n  //config highchart acording with grafana theme\n  if(!config.bootData.user.lightTheme) {\n    Highcharts.theme = HIGHCHARTS_THEME_DARK;\n\n    // Apply the theme\n    Highcharts.setOptions(Highcharts.theme);\n  }\n\n  Highcharts.chart('graph_container_'+panelId,\n    {\n      chart: {\n        type: 'line',\n        height: 200,\n        zoomType: 'x',\n        events: {\n          load: function () {            \n            chartData = this.series[0]; // set up the updating of the chart each second\n          }\n        }\n      },\n      title: {\n        text: chartInfo.title\n      },\n      subtitle: {\n        text: ''\n      },\n      xAxis: {\n        type: 'datetime'\n      },\n      yAxis: {\n        title: {\n          text: chartInfo.units\n        }\n      },\n      legend: {\n        enabled: false\n      },\n      series: [{\n        name: chartInfo.units,\n        data: chartData\n      }]\n    }\n  );\n}\n\n\n/**\n* private functions\n*/\nfunction getDataPointExtraFields(dataPoint) {\n\n  const values = {\n    fillOpacity: 0.5\n  }\n\n  if(dataPoint.type==='AirQualityObserved') {\n    let aqiIndex = calculateAQIIndex(dataPoint.value);\n    let aqiColor = AQI.color[aqiIndex];\n\n    _.defaults(values, {\n      color: aqiColor,\n      fillColor: aqiColor,\n\n      aqiColor: aqiColor,\n      aqiMeaning: AQI.meaning[aqiIndex],\n      aqiRisk: AQI.risks[aqiIndex],\n      aqi: dataPoint.value,\n\n      markerColor: AQI.markerColor[aqiIndex]\n    })    \n  } else {\n    if(dataPoint.type==='TrafficFlowObserved') {\n      let colorIndex = calculateCarsIntensityIndex(dataPoint.value)\n\n      _.defaults(values, {\n        color: CARS_COUNT.color[colorIndex], \n        fillColor: CARS_COUNT.color[colorIndex],\n        \n        markerColor: CARS_COUNT.markerColor[colorIndex]\n      })\n    }\n  }\n\n  return values;\n}\n\nfunction getMapMarkerClassName(type, value) {\n  let resp = 'map-marker-';\n  if(type==='AirQualityObserved') {\n    return resp+AQI.classColor[calculateAQIIndex(value)];\n  } else if(type==='TrafficFlowObserved')\n    return resp+CARS_COUNT.classColor[calculateCarsIntensityIndex(value)];\n  return resp+'default';\n}\n\nfunction getDataPointStickyInfo(dataPoint, metricsTranslations) {\n  let dataPointExtraFields = getDataPointExtraFields(dataPoint);  \n  let stickyInfo = '<div class=\"stycky-popup-info\">'\n\n  if(dataPoint.type==='AirQualityObserved') {\n    stickyInfo += '<div class=\"head air-quality\">Air Quality</div>'\n  } else {\n    if(dataPoint.type==='TrafficFlowObserved') {\n      stickyInfo += '<div class=\"head traffic-flow\">Cars Intensity</div>'\n    } else {\n      stickyInfo += '<div class=\"head\">' + dataPoint.type + '</div>'\n    }\n  }  \n\n  //body\n  stickyInfo += '<div class=\"body\">'\n  stickyInfo += getDataPointDetails(dataPoint, metricsTranslations).join('')\n  stickyInfo += '</div>'\n  stickyInfo += '</div>'\n\n  //console.debug(dataPoint)\n  return stickyInfo\n}\n\nfunction getDataPointDetails(dataPoint, metricsTranslations) {\n  let translatedValues = Object.keys(dataPoint).map((dpKey)=>{\n    let dP = dataPoint[dpKey]\n    let trans = metricsTranslations.filter((elem)=>elem[0]===dpKey)\n    return { 'name': (trans.length>0 && trans[0][1] ? trans[0][1] : titleize(dpKey) ), value: dP||'-', unit: (trans.length>0 ? trans[0][2] : '') }\n  })\n\n  return translatedValues.map((translatedValue)=>`<div>${translatedValue.name}: ${translatedValue.value} ${translatedValue.unit||''}</div>`)\n}\n\n//show all accepted metrics for a specific point id\nfunction getMetricsToShow(allMetrics, id) {\n  const metricsToShow = {};\n  for (const key in allMetrics) {\n    allMetrics[key].forEach((_value) => {\n      if (_value.id === id) {\n        if (_value.value) {\n          if (!(metricsToShow[key])){\n            metricsToShow[key] = 0;\n          }\n          metricsToShow[key] = _value.value;\n        }\n      }\n    });\n  }\n\n  //  metricsToShow['aqi'] = aqi;\n  return metricsToShow\n}\n\n// Given vars passed as param, retrieves the selected city\nfunction getSelectedCity(vars) {\n  let cityenv_ = vars.filter(elem => elem.name===\"cityenv\")\n  let city = null;\n  if(cityenv_ && cityenv_.length === 1)\n    city = cityenv_[0].current.value\n\n  return city;\n}\n\nfunction hideAllGraphPopups(panelId) {\n  let map_table_popups = ['measures_table', 'health_concerns_wrapper', 'environment_table', 'traffic_table'];\n\n  for(let map_table_popup of map_table_popups) {\n    let popup = document.getElementById(map_table_popup+'_'+panelId)\n    if(popup)\n      popup.style.display = 'none';\n  }\n}\n\nfunction drawDefaultPopups() {  \n}\n/*\n* Draw Traffic Flow Popup\n*/\nfunction drawTrafficFlowPopup(panelId) {\n  document.getElementById('traffic_table_'+panelId).style.display = 'block';\n}\n/*\n* Draw Health Concerns Popup\n*/\nfunction drawHealthConcernsPopup(panelId, risk, color, meaning, map_size) {\n  const healthConcernsWrapper = document.getElementById('health_concerns_wrapper_'+panelId);\n  const healthConcerns = document.querySelector('#health_concerns_wrapper_'+panelId+'>div');\n  const healthConcernsColor = document.querySelector('#health_concerns_wrapper_'+panelId+'>div>span>span.color');\n  const healthRisk = document.getElementById('health_risk_'+panelId);\n\n  healthConcernsWrapper.style.display = 'block';\n  healthConcernsColor.style.backgroundColor = color;\n  healthRisk.innerHTML = risk;\n}\n/*\n* Draw Measures Popup - The popup info is related with the choosed value \n*  from select box and with the metrics that came from result set\n*  and from a list of what to show metrics\n*/\nfunction drawMeasuresPopup(panelId, metricsToShow, providedMetrics) {\n  const measuresTable = document.querySelector('#measures_table_'+panelId+' > table > tbody');\n  while (measuresTable.rows[0]) measuresTable.deleteRow(0);\n\n  Object.keys(metricsToShow).forEach((metric)=>{\n    providedMetrics.forEach((elem)=>{\n      if(elem[0] == metric) {\n        let row = measuresTable.insertRow();    // -1 for inserting bottom\n        let innerCell0 = elem[1]?elem[1]:titleize(elem[0]);\n        let innerCell1 = (metricsToShow[metric] ? metricsToShow[metric] : '-') + (elem[2]?` ${elem[2]}`:'');\n        let cell0 = row.insertCell(0);\n        let cell1 = row.insertCell(1);\n\n        cell0.innerHTML = innerCell0;\n        cell1.innerHTML = innerCell1;        \n      }\n    })\n\n  })\n\n  document.getElementById('measures_table_'+panelId).style.display = 'block';\n}\n/*\n* Draw Chart\n*/\nfunction drawChartCointainer(panelId) {\n  document.querySelector('#data_details_'+panelId).style.display = 'block';\n  document.getElementById('data_chart_'+panelId).style.display = 'block';\n}\n\n// Access remote api and gives the coordinates from a city center based on NOMINATIM url server\nfunction getCityCoordinates(city_name) {\n  let url = NOMINATIM_ADDRESS.replace('<city_name>', city_name)\n  return fetch(url)\n    .then(response => response.json())\n    .then(data => { return { latitude: data[0].lat, longitude: data[0].lon } })\n    .catch(error => console.error(error))\n}\n\n// gets the aqi index from the AQI var\nfunction calculateAQIIndex(value) {\n  let aqiIndex;\n  AQI.range.forEach((elem, index) => {\n    if (value >= elem) {\n      aqiIndex = index;\n    }\n  });\n  return aqiIndex;\n}\n// gets the index from the CARS_COUNT const var\nfunction calculateCarsIntensityIndex(value) {\n  CARS_COUNT.range.forEach((elem, index) => {\n    if (value >= elem) {\n      return index;\n    }\n  });\n  return 0;\n}\n\n/*\n* Auxiliar functions\n*/\n// just for improve DRY\nfunction createLine(time_, value) {\n  const time = new Date(time_);\n  const day = time.getDate();\n  const month = time.getMonth();\n  const year = time.getFullYear();\n  const hour = time.getHours() - 1;\n  const minutes = time.getMinutes();\n  const seconds = time.getSeconds();\n  const milliseconds = time.getMilliseconds();\n  return [Date.UTC(year, month, day, hour+1, minutes, seconds, milliseconds), value]\n}\n\nexport {\n\n  hideAllGraphPopups, \n  drawPopups,\n  drawSelect,\n  renderChart,\n\n  getCityCoordinates,\n\n  getDataPointExtraFields,\n  getDataPointStickyInfo,\n\n  getSelectedCity,\n\n  getMapMarkerClassName\n}"]}