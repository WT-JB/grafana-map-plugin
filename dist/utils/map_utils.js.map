{"version":3,"sources":["../../src/utils/map_utils.js"],"names":["drawPollutantsPopup","providedPollutants","allPollutants","id","aqi","currentParameterForChart","measuresTable","document","querySelector","rows","deleteRow","el","getElementById","firstChild","removeChild","pollutantsToShow","key","forEach","_value","value","pollutant","row","insertRow","innerCell0","name","innerCell1","unit","cell0","insertCell","cell1","innerHTML","newPollutant","createElement","toUpperCase","selected","appendChild","getMapSize","mapDivWidth","mapDivHeight","MIN_HEIGHT_TO_SHOW_MAP_POPUPS","MIN_WIDTH_TO_SHOW_MAP_POPUPS","style","display","drawHealthConcernsPopup","risk","color","meaning","healthConcernsWrapper","healthConcerns","healthConcernsColor","healthRisk","backgroundColor","drawDefaultPopups","console","log","hideAll","drawPopups","timeSeries","validated_pollutants","currentTargetForChart","target","options","type","values","lastValueMeasure","length","aqiIndex","calculateAQI","pollutants","AQI","risks","error","range","index","getTimeSeries","data","valueValues","pollutantsValues","Object","keys","point","time","pollutantsTemp","push","dataTreatment","finalData","auxData","locationLatitude","locationLongitude","getUpdatedChartSeries","chartSeries","targetType","targetId","currentParameter","toLowerCase","lastMeasure","lastTime","timeTemp","val","Date","day","getDate","month","getMonth","year","getFullYear","hour","getHours","minutes","getMinutes","seconds","getSeconds","milliseconds","getMilliseconds","chartLastDisplayedValue","y","chartLastDisplayedTime","x","chartLastDisplayedId","split","parseInt","addPoint","UTC","map_svg","width","baseVal","height","hideAllByMapSize","addPollDropdown","removePollDropdown","processData","chartData","parameterUnit","title","parameterChoice","sensor","createLine","renderChart","config","bootData","user","lightTheme","window","Highcharts","setOptions","HIGHCHARTS_THEME_DARK","stockChart","chart","zoomType","events","load","series","text","subtitle","xAxis","yAxis","legend","enabled","rangeSelector","buttons","count","inputEnabled"],"mappings":"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","file":"map_utils.js","sourcesContent":["// draw components in the map\n\n/* Grafana Specific */\nimport config from 'app/core/config';\nimport { AQI, HIGHCHARTS_THEME_DARK, MIN_WIDTH_TO_SHOW_MAP_POPUPS, MIN_HEIGHT_TO_SHOW_MAP_POPUPS } from '../definitions';\n\nfunction drawPollutantsPopup(providedPollutants, allPollutants, id, aqi, currentParameterForChart) {\n  const measuresTable = document.querySelector('#measures_table > table > tbody');\n  while (measuresTable.rows[0]) measuresTable.deleteRow(0);\n\n  // Remove air paramters from dropdown\n  var el = document.getElementById('air_parameters_dropdown');\n  while ( el.firstChild ) {\n    el.removeChild( el.firstChild )\n  }\n\n  const pollutantsToShow = {};\n  for (const key in allPollutants) {    \n    allPollutants[key].forEach((_value) => {\n      if (_value.id === id) {\n        if (_value.value) {\n          if (!(pollutantsToShow[key])){\n            pollutantsToShow[key] = 0;\n          }\n          pollutantsToShow[key] = _value.value;\n        }\n      }\n    });\n  }\n\n  pollutantsToShow['aqi'] = aqi;\n\n  for (const pollutant in pollutantsToShow){\n    const row = measuresTable.insertRow(0);\n    const innerCell0 = providedPollutants[pollutant].name;\n    const innerCell1 = pollutantsToShow[pollutant] + ' ' + providedPollutants[pollutant].unit;\n    const cell0 = row.insertCell(0);\n    const cell1 = row.insertCell(1);\n\n    cell0.innerHTML = innerCell0;\n    cell1.innerHTML = innerCell1;\n\n    // Add Pollutants to Chart Dropdown\n    const newPollutant = document.createElement('option');\n    newPollutant.id = 'pollutantOption';\n    newPollutant.value = pollutant.toUpperCase();\n\n    if(currentParameterForChart===newPollutant.value)\n      newPollutant.selected = 'selected';\n    \n    newPollutant.innerHTML = providedPollutants[pollutant].name;\n\n    el.appendChild(newPollutant);\n    // ----\n  }\n\n  const [mapDivWidth, mapDivHeight] = getMapSize();\n\n  // Only show the map secundary data (tables) when the map div is not too small\n  if (mapDivHeight >= MIN_HEIGHT_TO_SHOW_MAP_POPUPS && mapDivWidth >= MIN_WIDTH_TO_SHOW_MAP_POPUPS) {\n    document.getElementById('environment_table').style.display = 'block';\n    document.getElementById('measures_table').style.display = 'block';\n  }\n}\n\nfunction drawHealthConcernsPopup(providedPollutants, risk, color, meaning) {\n  const healthConcernsWrapper = document.getElementById('health_concerns_wrapper');\n  const healthConcerns = document.querySelector('#health_concerns_wrapper>div');\n  const healthConcernsColor = document.querySelector('#health_concerns_wrapper>div>span>span.color');\n  const healthRisk = document.getElementById('health_risk');\n\n  const [mapDivWidth, mapDivHeight] = getMapSize();\n  // Only show the map secundary data (tables) when the map div is not too small\n  if (mapDivHeight >= MIN_HEIGHT_TO_SHOW_MAP_POPUPS && mapDivWidth >= MIN_WIDTH_TO_SHOW_MAP_POPUPS) {\n    healthConcernsWrapper.style.display = 'block';\n    healthConcernsColor.style.backgroundColor = color;\n    healthRisk.innerHTML = risk;\n  }\n}\n\nfunction drawDefaultPopups() {\n  console.log('drawDefaultPopups');\n  hideAll()\n\n  const [mapDivWidth, mapDivHeight] = getMapSize();\n  if (mapDivHeight >= MIN_HEIGHT_TO_SHOW_MAP_POPUPS && mapDivWidth >= MIN_WIDTH_TO_SHOW_MAP_POPUPS) {\n    document.getElementById('traffic_table').style.display = 'block';\n  }\n\n}\n\nfunction drawPopups(timeSeries, validated_pollutants, currentParameterForChart, currentTargetForChart) {\n  //console.log('drawPopups');\n  const id = currentTargetForChart.target.options.id;\n  const type = currentTargetForChart.target.options.type;\n  const values = timeSeries.values[id];\n\n  document.getElementById('data_chart').style.display = 'block';\n\n  //render popups\n  try {\n    const lastValueMeasure = values[values.length - 1].value; //values array is the one for the AQI values\n    const aqiIndex = calculateAQI(lastValueMeasure);\n\n    // Show Pollutants Legend (MAP)\n    if (type === 'AirQualityObserved') {\n      const allPollutants = timeSeries.pollutants;\n\n      if(validated_pollutants) {\n        drawPollutantsPopup(validated_pollutants, allPollutants, id, lastValueMeasure, currentParameterForChart);\n        drawHealthConcernsPopup(validated_pollutants, AQI.risks[aqiIndex], AQI.color[aqiIndex], AQI.meaning[aqiIndex]);\n      }\n    } else { // Hide legend\n      drawDefaultPopups();\n    }\n  } catch(error) {\n    console.log(\"Exception:\");\n    console.log(error);\n    console.log(\"id:\")\n    console.log(id);\n    console.log(\"type:\")\n    console.log(type);\n    console.log(\"values are:\")\n    console.log(values)\n  }\n}\n\nfunction calculateAQI(aqi) {\n  let aqiIndex;\n  AQI.range.forEach((value, index) => {\n    if (aqi >= value) {\n      aqiIndex = index;\n    }\n  });\n  return aqiIndex;\n}\n\nfunction getTimeSeries(data) {\n    const valueValues = {};\n    const values = [];\n    const pollutantsValues = [];\n\n    Object.keys(data).forEach((key) => {\n      data[key].forEach((point) => {\n        const id = point.id;\n        const time = point.time;\n        let pollutants = '';\n\n        const value = point.value;\n        if (point.type === 'AirQualityObserved') {\n          pollutants = point.pollutants;\n          const pollutantsTemp = {};\n\n          pollutants.forEach((pollutant) => {\n            if (!(pollutantsValues[pollutant.name])) {\n              pollutantsValues[pollutant.name] = [];\n            }\n            pollutantsValues[pollutant.name].push({'time': time, 'value': pollutant.value, 'id': id});\n          });\n        }\n\n        if (!(valueValues[point.id])) {\n          valueValues[point.id] = [];\n        }\n        valueValues[point.id].push({'time': time, 'value': value, 'id': id});\n      });\n    });\n\n    return {'values': valueValues, 'pollutants': pollutantsValues};\n}\n/*\n* Agregate data by id\n*/\nfunction dataTreatment(data) {\n  const finalData = {};\n  let auxData = {};\n\n  data.forEach((value) => {\n    if (!(finalData[value.id])) {\n      finalData[value.id] = [];\n    }\n\n    //if (value.type === 'AirQualityObserved'){\n        finalData[value.id].push(\n          {\n            'id': value.id, \n            'locationLatitude': value.locationLatitude, \n            'locationLongitude': value.locationLongitude, \n            'time': value.time, \n            'type': value.type, \n            'value': value.value,\n            'pollutants': value.pollutants\n          });\n    // }\n    // else {\n    //     finalData[value.id].push(\n    //       {\n    //         'id': value.id, \n    //         'locationLatitude': value.locationLatitude, \n    //         'locationLongitude': value.locationLongitude, \n    //         'time': value.time, \n    //         'type': value.type, \n    //         'value': value.value\n    //       });\n    // }\n  });\n\n  return finalData;\n}\n\nfunction getUpdatedChartSeries(chartSeries, timeSeries, currentTargetForChart, currentParameterForChart) {\n\n  if(Object.keys(chartSeries).length === 0)\n    return chartSeries\n\n  const targetType = currentTargetForChart.target.options.type;\n  const targetId = currentTargetForChart.target.options.id;\n  const currentParameter = currentParameterForChart.toLowerCase();\n  let lastMeasure;\n  let lastTime;\n\n  try {\n    let timeTemp;\n    if (currentParameter !== 'aqi' && targetType === 'AirQualityObserved'){\n      timeTemp = timeSeries.pollutants[currentParameter];\n      timeTemp.forEach((val) => {\n        if (val.id === targetId){\n          lastTime = val.time;\n          lastMeasure = val.value;\n        } \n      });\n    } else {\n      timeTemp = timeSeries.values[targetId];\n      lastMeasure = timeTemp[timeTemp.length - 1].value;\n      lastTime = timeTemp[timeTemp.length - 1].time\n    }\n   \n    const time = new Date(lastTime);\n    const day = time.getDate();\n    const month = time.getMonth();\n    const year = time.getFullYear();\n    const hour = time.getHours() - 1;\n    const minutes = time.getMinutes();\n    const seconds = time.getSeconds();\n    const milliseconds = time.getMilliseconds();      \n    const chartLastDisplayedValue = chartSeries.data[chartSeries.data.length - 1].y;\n    const chartLastDisplayedTime = chartSeries.data[chartSeries.data.length - 1].x;\n    let chartLastDisplayedId = chartSeries.name.split(' ');\n\n    chartLastDisplayedId = parseInt(chartLastDisplayedId[chartLastDisplayedId.length - 1]);      \n\n    if (!(lastTime === chartLastDisplayedTime && lastMeasure === chartLastDisplayedValue && targetId === chartLastDisplayedId)){\n      chartSeries.addPoint([Date.UTC(year, month, day, hour+1, minutes, seconds, milliseconds), lastMeasure], true, true);\n    }\n  } catch(error){\n    console.log(\"Woaa! Something went wrong... Probably there is no recent data for the selected device. Here you have the error:\");\n    console.log(error);\n  }\n\n  return chartSeries;\n}\n\nfunction getMapSize() {\n  //return [ document.getElementsByClassName('map-container')[0].offsetHeight, document.getElementsByClassName('map-container')[0].offsetWidth];\n  let map_svg = document.querySelector('.map-container svg');\n  return [map_svg.width.baseVal.value, map_svg.height.baseVal.value]\n}\n\nfunction hideAllByMapSize() {\n  const [mapDivWidth, mapDivHeight] = getMapSize();\n  // Remove the map secundary data (tables) when the map div is too small\n  if (mapDivHeight <= MIN_HEIGHT_TO_SHOW_MAP_POPUPS || mapDivHeight <= MIN_WIDTH_TO_SHOW_MAP_POPUPS) {\n    hideAll()\n  }\n}\n\nfunction hideAll() {\n  document.getElementById('measures_table').style.display = 'none';\n  document.getElementById('health_concerns_wrapper').style.display = 'none';\n  document.getElementById('environment_table').style.display = 'none';\n  document.getElementById('traffic_table').style.display = 'none';\n}\n\nfunction addPollDropdown() {\n  // Add pollutants chart dropdown \n  document.getElementById('data_details').style.display = 'block';\n  // Remove traffic colors table\n  document.getElementById('traffic_table').style.display = 'none';\n\n  const [mapDivWidth, mapDivHeight] = getMapSize();\n  // Only show the map secundary data (tables) when the map div is not too small\n  if (mapDivHeight >= MIN_HEIGHT_TO_SHOW_MAP_POPUPS && mapDivWidth >= MIN_WIDTH_TO_SHOW_MAP_POPUPS) {\n    // Add environment colors table\n    document.getElementById('environment_table').style.display = 'block';\n  }\n} \n\n//Not used\nfunction removePollDropdown() {  \n  document.getElementById('data_details').style.display = 'none'; // Remove pollutants chart dropdown  \n  document.getElementById('environment_table').style.display = 'none'; // Remove environmentcolors table\n\n  const [mapDivWidth, mapDivHeight] = getMapSize();\n  // Only show the map secundary data (tables) when the map div is not too small\n  if (mapDivHeight >= MIN_HEIGHT_TO_SHOW_MAP_POPUPS && mapDivWidth >= MIN_WIDTH_TO_SHOW_MAP_POPUPS) {\n    // Add traffic colors table\n    document.getElementById('traffic_table').style.display = 'block';\n  }\n}\n\nfunction processData(chartSeries, timeSeries, validated_pollutants, currentParameterForChart, currentTargetForChart) {\n  let chartData = [];\n  const currentParameter = currentParameterForChart.toLowerCase();\n  const id = currentTargetForChart.target.options.id;\n  const type = currentTargetForChart.target.options.type;\n  const values = timeSeries.values[id];\n\n  let parameterUnit = validated_pollutants[currentParameter].unit;\n  let title = validated_pollutants[currentParameter].name + ' - Device ' + id;\n\n  if (type === 'AirQualityObserved' && currentParameter !== 'aqi') {\n    const parameterChoice = timeSeries.pollutants[currentParameter];      \n    parameterChoice.forEach((sensor) => {\n      if (sensor.id === id) {\n       chartData.push(createLine(sensor));\n      }\n    });\n  } else {\n    if(type === 'TrafficFlowObserved') {\n      title = 'Cars Intensity - Device ' + id;\n      parameterUnit = 'Cars'\n    } else {\n      title = type + ' - Device ' + id;\n      parameterUnit = type;\n    }\n\n    values.forEach((value) => {\n      chartData.push(createLine(value));\n    });\n  }\n\n\n  return [chartData, parameterUnit, title]\n}\n\nfunction createLine(value) {\n  const time = new Date(value.time);\n  const day = time.getDate();\n  const month = time.getMonth();\n  const year = time.getFullYear();\n  const hour = time.getHours() - 1;\n  const minutes = time.getMinutes();\n  const seconds = time.getSeconds();\n  const milliseconds = time.getMilliseconds();\n  return [Date.UTC(year, month, day, hour+1, minutes, seconds, milliseconds), value.value]\n}\n\n\nfunction renderChart(chartSeries, chartData, parameterUnit, title) {\n  //config highchart acording with grafana theme\n  if(!config.bootData.user.lightTheme)\n    window.Highcharts.setOptions(HIGHCHARTS_THEME_DARK);\n\n  window.Highcharts.stockChart('graph_container', \n    {\n      chart: {\n        height: 200,\n        zoomType: 'x',\n        events: {\n          load: function () {            \n            chartSeries = this.series[0]; // set up the updating of the chart each second\n          }\n        }\n      },\n      title: {\n          text: title\n      },\n      subtitle: {\n          text: ''\n      },\n      xAxis: {\n          type: 'datetime'\n      },\n      yAxis: {\n          title: {\n              text: parameterUnit\n          }\n      },\n      legend: {\n          enabled: false\n      },\n      rangeSelector: {\n        buttons: [{\n            count: 5,\n            type: 'minute',\n            text: '5M'\n        }, {\n            count: 10,\n            type: 'minute',\n            text: '10M'\n        }, {\n            type: 'all',\n            text: 'All'\n        }],\n        inputEnabled: false,\n        selected: 2\n      },\n\n      series: [{\n          name: title,\n          data: chartData\n      }]\n    }\n  );\n}\n\nexport {\n  drawPopups,\n  calculateAQI, \n  getTimeSeries, \n  dataTreatment, \n  getUpdatedChartSeries, \n  hideAllByMapSize, \n  hideAll, \n  addPollDropdown, \n  removePollDropdown,\n  processData,\n  renderChart\n}"]}