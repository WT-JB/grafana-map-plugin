{"version":3,"sources":["../../src/utils/map_utils.js"],"names":["getTimeSeries","data","valueValues","values","pollutantsValues","Object","keys","forEach","key","point","id","time","pollutants","value","type","pollutantsTemp","pollutant","name","push","dataTreatment","finalData","auxData","locationLatitude","locationLongitude","getUpdatedChartSeries","chartSeries","timeSeries","currentParameterForChart","currentTargetForChart","length","targetType","target","options","targetId","currentParameter","toLowerCase","lastMeasure","lastTime","timeTemp","val","Date","day","getDate","month","getMonth","year","getFullYear","hour","getHours","minutes","getMinutes","seconds","getSeconds","milliseconds","getMilliseconds","chartLastDisplayedValue","y","chartLastDisplayedTime","x","chartLastDisplayedId","split","parseInt","addPoint","UTC","error","console","log","processData","validated_pollutants","chartData","parameterUnit","title","unit","parameterChoice","sensor","createLine","getCityCoordinates","city_name","url","NOMINATIM_ADDRESS","replace","fetch","then","response","json","latitude","lat","longitude","lon","catch","getSelectedCity","vars","cityenv_","filter","elem","city","current","calculateAQIIndex","aqiIndex","AQI","range","index","calculateCarsIntensityIndex","CARS_COUNT","drawPopups","panel_id","selected_id","hideAllGraphPopups","lastValueMeasure","allPollutants","drawPollutantsPopup","drawHealthConcernsPopup","risks","color","meaning","drawTrafficFlowPopup","drawDefaultPopups","showDataDetailsSelect","document","querySelector","style","display","getDataPointValues","dataPoint","fillOpacity","aqi","aqiColor","aqiMeaning","aqiRisk","_","defaults","fillColor","color_index","getMapMarkerClassName","resp","classColor","getDataPointStickyInfo","stickyInfo","renderChart","drawChart","config","bootData","user","lightTheme","window","Highcharts","setOptions","HIGHCHARTS_THEME_DARK","stockChart","chart","height","zoomType","events","load","series","text","subtitle","xAxis","yAxis","legend","enabled","rangeSelector","buttons","count","inputEnabled","selected","map_table_popups","map_table_popup","popup","getElementById","providedPollutants","risk","map_size","healthConcernsWrapper","healthConcerns","healthConcernsColor","healthRisk","backgroundColor","innerHTML","measuresTable","rows","deleteRow","el","firstChild","removeChild","pollutantsToShow","_value","row","insertRow","innerCell0","innerCell1","cell0","insertCell","cell1","newPollutant","createElement","toUpperCase","appendChild"],"mappings":"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","file":"map_utils.js","sourcesContent":["// draw components in the map\n/* Vendor specific */\nimport _ from 'lodash';\n\n/* Grafana Specific */\nimport config from 'app/core/config';\n\n/* App specific */\nimport { AQI, CARS_COUNT, HIGHCHARTS_THEME_DARK, NOMINATIM_ADDRESS } from '../definitions';\n\n/**\n* Primary functions\n*/\n\n//helper to create series for chart display\nfunction getTimeSeries(data) {\n  const valueValues = {};\n  const values = [];\n  const pollutantsValues = [];\n\n  Object.keys(data).forEach((key) => {\n    data[key].forEach((point) => {\n      const id = point.id;\n      const time = point.time;\n      let pollutants = '';\n\n      const value = point.value;\n      if (point.type === 'AirQualityObserved') {\n        pollutants = point.pollutants;\n        const pollutantsTemp = {};\n\n        pollutants.forEach((pollutant) => {\n          if (!(pollutantsValues[pollutant.name])) {\n            pollutantsValues[pollutant.name] = [];\n          }\n          pollutantsValues[pollutant.name].push({'time': time, 'value': pollutant.value, 'id': id});\n        });\n      }\n\n      if (!(valueValues[point.id])) {\n        valueValues[point.id] = [];\n      }\n      valueValues[point.id].push({'time': time, 'value': value, 'id': id});\n    });\n  });\n\n  return {'values': valueValues, 'pollutants': pollutantsValues};\n}\n\n// Agregate data by id\nfunction dataTreatment(data) {\n  const finalData = {};\n  let auxData;\n\n  data.forEach((value) => {\n    if (!(finalData[value.id])) {\n      finalData[value.id] = [];\n    }\n\n    auxData = {\n        'id': value.id, \n        'locationLatitude': value.locationLatitude, \n        'locationLongitude': value.locationLongitude, \n        'time': value.time, \n        'type': value.type, \n        'value': value.value\n      }\n\n    if (value.type === 'AirQualityObserved')\n      auxData.pollutants = value.pollutants;\n\n    finalData[value.id].push( auxData );\n  });\n\n  return finalData;\n}\n\nfunction getUpdatedChartSeries(chartSeries, timeSeries, currentParameterForChart, currentTargetForChart) {\n\n  if(Object.keys(chartSeries).length === 0)\n    return chartSeries\n\n  const targetType = currentTargetForChart.target.options.type;\n  const targetId = currentTargetForChart.target.options.id;\n  const currentParameter = currentParameterForChart.toLowerCase();\n  let lastMeasure;\n  let lastTime;\n\n  try {\n    let timeTemp;\n    if (currentParameter !== 'aqi' && targetType === 'AirQualityObserved'){\n      timeTemp = timeSeries.pollutants[currentParameter];\n      timeTemp.forEach((val) => {\n        if (val.id === targetId){\n          lastTime = val.time;\n          lastMeasure = val.value;\n        } \n      });\n    } else {\n      timeTemp = timeSeries.values[targetId];\n      lastMeasure = timeTemp[timeTemp.length - 1].value;\n      lastTime = timeTemp[timeTemp.length - 1].time\n    }\n   \n    const time = new Date(lastTime);\n    const day = time.getDate();\n    const month = time.getMonth();\n    const year = time.getFullYear();\n    const hour = time.getHours() - 1;\n    const minutes = time.getMinutes();\n    const seconds = time.getSeconds();\n    const milliseconds = time.getMilliseconds();      \n    const chartLastDisplayedValue = chartSeries.data[chartSeries.data.length - 1].y;\n    const chartLastDisplayedTime = chartSeries.data[chartSeries.data.length - 1].x;\n    let chartLastDisplayedId = chartSeries.name.split(' ');\n\n    chartLastDisplayedId = parseInt(chartLastDisplayedId[chartLastDisplayedId.length - 1]);      \n\n    if (!(lastTime === chartLastDisplayedTime && lastMeasure === chartLastDisplayedValue && targetId === chartLastDisplayedId)){\n      chartSeries.addPoint([Date.UTC(year, month, day, hour+1, minutes, seconds, milliseconds), lastMeasure], true, true);\n    }\n  } catch(error){\n    console.log(\"Error:\");\n    console.log(error);\n  }\n\n  return chartSeries;\n}\n\nfunction processData(chartSeries, timeSeries, validated_pollutants, currentParameterForChart, currentTargetForChart) {\n//  console.log(currentParameterForChart)\n//  console.log(currentTargetForChart)\n  let chartData = [];\n  const currentParameter = currentParameterForChart.toLowerCase();\n  const id = currentTargetForChart.target.options.id;\n  const type = currentTargetForChart.target.options.type;\n  const values = timeSeries.values[id];\n\n  let parameterUnit = '';\n  let title = '';\n\n  if (type === 'AirQualityObserved' && currentParameter !== 'aqi') {\n    parameterUnit = validated_pollutants[currentParameter].unit;\n    title = validated_pollutants[currentParameter].name + ' - Device ' + id;\n\n    const parameterChoice = timeSeries.pollutants[currentParameter];      \n    parameterChoice.forEach((sensor) => {\n      if (sensor.id === id) {\n       chartData.push(createLine(sensor));\n      }\n    });\n  } else {\n    if(type === 'TrafficFlowObserved') {\n      title = 'Cars Intensity - Device ' + id;\n      parameterUnit = 'Cars'\n    } else {\n      title = type + ' - Device ' + id;\n      parameterUnit = type;\n    }\n\n    values && values.forEach((value) => {\n      chartData.push(createLine(value));\n    });\n  }\n\n  return [chartData, parameterUnit, title]\n}\n\n\n\n/*\n* Auxiliar functions\n*/\n// just for improve DRY\nfunction createLine(value) {\n  const time = new Date(value.time);\n  const day = time.getDate();\n  const month = time.getMonth();\n  const year = time.getFullYear();\n  const hour = time.getHours() - 1;\n  const minutes = time.getMinutes();\n  const seconds = time.getSeconds();\n  const milliseconds = time.getMilliseconds();\n  return [Date.UTC(year, month, day, hour+1, minutes, seconds, milliseconds), value.value]\n}\n\n// Access remote api and gives the coordinates from a city center based on NOMINATIM url server\nfunction getCityCoordinates(city_name) {\n  let url = NOMINATIM_ADDRESS.replace('<city_name>', city_name)\n  return fetch(url)\n    .then(response => response.json())\n    .then(data => { return { latitude: data[0].lat, longitude: data[0].lon } })\n    .catch(error => console.error(error))\n}\n\n// Given vars passed as param, retrieves the selected city\nfunction getSelectedCity(vars) {\n  let cityenv_ = vars.filter(elem => elem.name===\"cityenv\")\n  let city = null;\n  if(cityenv_ && cityenv_.length === 1)\n    city = cityenv_[0].current.value\n\n  return city;\n}\n\n// gets the aqi index from the AQI var\nfunction calculateAQIIndex(value) {\n  let aqiIndex;\n  AQI.range.forEach((elem, index) => {\n    if (value >= elem) {\n      aqiIndex = index;\n    }\n  });\n  return aqiIndex;\n}\n// gets the index from the CARS_COUNT const var\nfunction calculateCarsIntensityIndex(value) {\n  CARS_COUNT.range.forEach((elem, index) => {\n    if (value >= elem) {\n      return index;\n    }\n  });\n  return 0;\n}\n\n/*\n* View components controllers\n*/\nfunction drawPopups(panel_id, timeSeries, validated_pollutants, currentParameterForChart, currentTargetForChart) {\n  if(!currentTargetForChart)\n    return ;\n\n  //console.log('drawPopups');\n  const selected_id = currentTargetForChart.target.options.id;\n  const type = currentTargetForChart.target.options.type;\n  const values = timeSeries.values[selected_id];\n\n  hideAllGraphPopups(panel_id)\n\n  //render popups\n  try {\n    const lastValueMeasure = values[values.length - 1].value; //values array is the one for the AQI values\n    const aqiIndex = calculateAQIIndex(lastValueMeasure);\n\n    // Show Pollutants Legend (MAP)\n\n    switch(type) {\n      case 'AirQualityObserved':\n        const allPollutants = timeSeries.pollutants;\n\n        if(validated_pollutants) {\n          drawPollutantsPopup(panel_id, validated_pollutants, allPollutants, selected_id, lastValueMeasure, currentParameterForChart);\n          drawHealthConcernsPopup(panel_id, validated_pollutants, AQI.risks[aqiIndex], AQI.color[aqiIndex], AQI.meaning[aqiIndex]);\n        }\n        break;\n      case 'TrafficFlowObserved':\n        drawTrafficFlowPopup(panel_id);\n        break;\n      default:\n        drawDefaultPopups(panel_id);\n    }\n    \n  } catch(error) {\n    console.log(\"Error:\");\n//    console.log(error);\n    console.log(\"selected_id: \" + selected_id + \", type: \" + type + \", values: \" + values)\n  }\n}\n\n\n\n/*\n* view components manipulation\n*/\nfunction showDataDetailsSelect(panel_id) {\n  document.querySelector('#data_details_'+panel_id).style.display = 'block';\n}\n\nfunction getDataPointValues(dataPoint) {\n\n  const values = {\n    id: dataPoint.id,\n    type: dataPoint.type,\n    latitude: dataPoint.locationLatitude,\n    longitude: dataPoint.locationLongitude,\n    value: dataPoint.value,\n    fillOpacity: 0.5\n  }\n\n  if(dataPoint.type==='AirQualityObserved') {\n    const aqi = calculateAQIIndex(dataPoint.value);\n    const aqiColor = AQI.color[aqi];\n    const aqiMeaning = AQI.meaning[aqi];\n    const aqiRisk = AQI.risks[aqi];\n\n    const pollutants = dataPoint.pollutants;\n    if(pollutants) {\n      pollutants.push({'name': 'aqi', 'value': dataPoint.value});\n    }\n\n    _.defaults(values, {\n      color: aqiColor,\n      fillColor: aqiColor,\n      aqiColor: aqiColor,\n      aqiMeaning: aqiMeaning,\n      aqiRisk: aqiRisk,\n      pollutants: pollutants,\n      aqi: dataPoint.value\n    })    \n  } else {\n    if(dataPoint.type==='TrafficFlowObserved') {\n      let color_index = calculateCarsIntensityIndex(dataPoint.value)\n      _.defaults(values, {\n        color: CARS_COUNT.color[color_index], \n        fillColor: CARS_COUNT.color[color_index]\n      })\n    }\n  }\n\n  return values;\n}\n\nfunction getMapMarkerClassName(type, value) {\n  let resp = 'map-marker-';\n  if(type==='AirQualityObserved') {\n    return resp+AQI.classColor[calculateAQIIndex(value)];\n  } else if(type==='TrafficFlowObserved')\n    return resp+CARS_COUNT.classColor[calculateCarsIntensityIndex(value)];\n  return resp+'default';\n}\n\nfunction getDataPointStickyInfo(dataPoint) {\n\n  let data = getDataPointValues(dataPoint);\n  \n  let stickyInfo = '<div class=\"stycky-popup-info\">'\n\n  if(data.type==='AirQualityObserved') {\n    stickyInfo += '<div class=\"head air-quality\">Air Quality</div>' +\n      '<div class=\"body\">'+\n        '<div>Device: ' + data.id + '</div>' +\n        '<div>AQI: ' + data.value + ' (' + data.aqiMeaning + ')</div>'+\n      '</div>'\n\n  } else {\n    if(data.type==='TrafficFlowObserved') {\n      stickyInfo += '<div class=\"head traffic-flow\">Cars Intensity</div>'\n    } else {\n      stickyInfo += '<div class=\"head\">' + data.type + '</div>'\n    }\n\n    stickyInfo += '<div class=\"body\">'+\n      '<div>Device: ' + data.id + '</div>' +\n      '<div>Value: '+data.value + '</div>' +\n    '</div>'\n  }\n  stickyInfo += '</div>'\n\n  return stickyInfo\n}\n\n\nfunction renderChart(panel_id, chartSeries, chartData, parameterUnit, title) {\n\n  showDataDetailsSelect(panel_id);\n  drawChart(panel_id);\n\n  //config highchart acording with grafana theme\n  if(!config.bootData.user.lightTheme)\n    window.Highcharts.setOptions(HIGHCHARTS_THEME_DARK);\n\n  window.Highcharts.stockChart('graph_container_'+panel_id, \n    {\n      chart: {\n        height: 200,\n        zoomType: 'x',\n        events: {\n          load: function () {            \n            chartSeries = this.series[0]; // set up the updating of the chart each second\n          }\n        }\n      },\n      title: {\n          text: title\n      },\n      subtitle: {\n          text: ''\n      },\n      xAxis: {\n          type: 'datetime'\n      },\n      yAxis: {\n          title: {\n              text: parameterUnit\n          }\n      },\n      legend: {\n          enabled: false\n      },\n      rangeSelector: {\n        buttons: [{\n            count: 5,\n            type: 'minute',\n            text: '5M'\n        }, {\n            count: 10,\n            type: 'minute',\n            text: '10M'\n        }, {\n            type: 'all',\n            text: 'All'\n        }],\n        inputEnabled: false,\n        selected: 2\n      },\n\n      series: [{\n          name: title,\n          data: chartData\n      }]\n    }\n  );\n}\nfunction hideAllGraphPopups(panel_id) {\n  let map_table_popups = ['measures_table', 'health_concerns_wrapper', 'environment_table', 'traffic_table'];\n\n  for(let map_table_popup of map_table_popups) {\n    let popup = document.getElementById(map_table_popup+'_'+panel_id)\n    if(popup)\n      popup.style.display = 'none';\n  }\n}\nfunction drawHealthConcernsPopup(panel_id, providedPollutants, risk, color, meaning, map_size) {\n  const healthConcernsWrapper = document.getElementById('health_concerns_wrapper_'+panel_id);\n  const healthConcerns = document.querySelector('#health_concerns_wrapper_'+panel_id+'>div');\n  const healthConcernsColor = document.querySelector('#health_concerns_wrapper_'+panel_id+'>div>span>span.color');\n  const healthRisk = document.getElementById('health_risk_'+panel_id);\n\n  healthConcernsWrapper.style.display = 'block';\n  healthConcernsColor.style.backgroundColor = color;\n  healthRisk.innerHTML = risk;\n}\nfunction drawDefaultPopups() {  \n}\nfunction drawTrafficFlowPopup(panel_id) {\n  document.getElementById('traffic_table_'+panel_id).style.display = 'block';\n}\nfunction drawChart(panel_id) {\n  document.getElementById('data_chart_'+panel_id).style.display = 'block';\n}\nfunction drawPollutantsPopup(panel_id, providedPollutants, allPollutants, id, aqi, currentParameterForChart) {\n\n  //no pollutants\n  if(!providedPollutants || Object.keys(providedPollutants).length===0)\n    return ;\n\n  const measuresTable = document.querySelector('#measures_table_'+panel_id+' > table > tbody');\n  while (measuresTable.rows[0]) measuresTable.deleteRow(0);\n\n  // Remove air paramters from dropdown\n  var el = document.querySelector('#air_parameters_dropdown_'+panel_id);\n  while ( el.firstChild ) {\n    el.removeChild( el.firstChild )\n  }\n\n  const pollutantsToShow = {};\n  for (const key in allPollutants) {    \n    allPollutants[key].forEach((_value) => {\n      if (_value.id === id) {\n        if (_value.value) {\n          if (!(pollutantsToShow[key])){\n            pollutantsToShow[key] = 0;\n          }\n          pollutantsToShow[key] = _value.value;\n        }\n      }\n    });\n  }\n\n  pollutantsToShow['aqi'] = aqi;\n\n  for (const pollutant in pollutantsToShow){\n    const row = measuresTable.insertRow(0);\n    const innerCell0 = providedPollutants[pollutant].name;\n    const innerCell1 = pollutantsToShow[pollutant] + ' ' + providedPollutants[pollutant].unit;\n    const cell0 = row.insertCell(0);\n    const cell1 = row.insertCell(1);\n\n    cell0.innerHTML = innerCell0;\n    cell1.innerHTML = innerCell1;\n\n    // Add Pollutants to Chart Dropdown\n    const newPollutant = document.createElement('option');\n    newPollutant.id = 'pollutantOption';\n    newPollutant.value = pollutant.toUpperCase();\n\n    if(currentParameterForChart===newPollutant.value)\n      newPollutant.selected = 'selected';\n    \n    newPollutant.innerHTML = providedPollutants[pollutant].name;\n\n    el.appendChild(newPollutant);\n    // ----\n  }\n\n  document.getElementById('environment_table_'+panel_id).style.display = 'block';\n  document.getElementById('measures_table_'+panel_id).style.display = 'block';\n}\n\nexport {\n  processData,\n  getTimeSeries, \n  dataTreatment, \n  getUpdatedChartSeries, \n\n  hideAllGraphPopups, \n  drawPopups,\n  renderChart,\n\n  getCityCoordinates,\n\n  getDataPointValues,\n  getDataPointStickyInfo,\n\n  getSelectedCity,\n\n  getMapMarkerClassName\n}"]}