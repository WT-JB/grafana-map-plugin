{"version":3,"sources":["../../src/utils/map_utils.js"],"names":["drawPopups","panelId","lastValueMeasure","validatedMetrics","hideAllGraphPopups","drawMeasuresPopup","type","aqiIndex","calculateAQIIndex","value","document","getElementById","style","display","drawHealthConcernsPopup","AQI","risks","color","meaning","drawTrafficFlowPopup","drawDefaultPopups","error","console","log","drawSelect","metricsToShow","providedMetrics","currentParameterForChart","el","querySelector","firstChild","removeChild","emptyOption","createElement","id","innerHTML","appendChild","Object","keys","forEach","metric","elem","newMetric","toUpperCase","selected","titleize","selectBox","options","length","renderChart","selectedPointData","measurementUnits","chartDetails","debug","pointId","fieldName","drawChartCointainer","chartData","map","createLine","created_at","toLowerCase","getChartMetaInfo","props","AirQualityObserved","TrafficFlowObserved","title","units","chartInfo","config","bootData","user","lightTheme","Highcharts","theme","HIGHCHARTS_THEME_DARK","setOptions","chart","height","zoomType","events","load","series","text","subtitle","xAxis","yAxis","legend","enabled","name","data","getDataPointExtraFields","dataPoint","values","fillOpacity","aqiColor","_","defaults","fillColor","aqiMeaning","aqiRisk","aqi","markerColor","colorIndex","calculateCarsIntensityIndex","CARS_COUNT","getMapMarkerClassName","resp","classColor","getDataPointStickyInfo","metricsTranslations","dataPointExtraFields","stickyInfo","getDataPointDetails","join","translatedValues","dpKey","dP","trans","filter","unit","translatedValue","getMetricsToShow","allMetrics","key","_value","getSelectedCity","vars","cityenv_","city","current","map_table_popups","map_table_popup","popup","risk","map_size","healthConcernsWrapper","healthConcerns","healthConcernsColor","healthRisk","backgroundColor","measuresTable","rows","deleteRow","row","insertRow","innerCell0","innerCell1","cell0","insertCell","cell1","getCityCoordinates","city_name","url","NOMINATIM_ADDRESS","replace","fetch","then","response","json","latitude","lat","longitude","lon","catch","range","index","time_","time","Date","day","getDate","month","getMonth","year","getFullYear","hour","getHours","minutes","getMinutes","seconds","getSeconds","milliseconds","getMilliseconds","UTC","Exporting"],"mappings":"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","file":"map_utils.js","sourcesContent":["// draw components in the map\n/* Vendor specific */\nimport _ from 'lodash';\n\nimport Highcharts from \"../vendor/highcharts/highcharts\";\nimport Exporting from '../vendor/highcharts/modules/exporting';\n// Initialize exporting module.\nExporting(Highcharts);\n\n/* Grafana Specific */\nimport config from 'app/core/config';\n\nimport { titleize } from './string'\n\n/* App specific */\nimport { AQI, CARS_COUNT, NOMINATIM_ADDRESS } from '../definitions';\nimport { HIGHCHARTS_THEME_DARK } from '../utils/highcharts/custom_themes';\n\n\n/*\n* Primary functions\n*/\n\n/**\n* Display popups based in the click in map's marker\n*/\nfunction drawPopups(panelId, lastValueMeasure, validatedMetrics) {\n\n  //render popups\n  try {\n    // Show Metrics Legend (MAP)\n\n    //draw select\n    if(validatedMetrics) {\n\n      hideAllGraphPopups(panelId)\n\n      drawMeasuresPopup(panelId, lastValueMeasure, validatedMetrics)\n\n      switch(lastValueMeasure.type) {\n        case 'AirQualityObserved':\n          let aqiIndex = calculateAQIIndex(lastValueMeasure.value);\n          \n          document.getElementById('environment_table_'+panelId).style.display = 'block';\n\n          drawHealthConcernsPopup(panelId, AQI.risks[aqiIndex], AQI.color[aqiIndex], AQI.meaning[aqiIndex]);\n     \n          break;\n        case 'TrafficFlowObserved':\n          drawTrafficFlowPopup(panelId);\n          break;\n        default:\n          drawDefaultPopups(panelId);\n      }\n    }\n    \n  } catch(error) {\n    console.log(\"Error:\");\n    console.log(error);\n    console.log(\"lastValueMeasure: \")\n    console.log(lastValueMeasure)\n  }\n}\n/*\n* Draw the select box in the specific panel, with the specif metrics and select the option\n*/\nfunction drawSelect(panelId, metricsToShow, providedMetrics, currentParameterForChart) {\n  // Remove air paramters from dropdown\n  let el = document.querySelector('#parameters_dropdown_'+panelId);\n  while ( el.firstChild ) {\n    el.removeChild( el.firstChild )\n  }\n\n  //default option\n  let emptyOption = document.createElement('option');\n  emptyOption.id = 'metricsOption_'+panelId;\n  emptyOption.value = 'value';\n  emptyOption.innerHTML = 'Select Metric';\n  el.appendChild(emptyOption);\n\n  //select population\n  Object.keys(metricsToShow).forEach((metric)=>{\n    providedMetrics.forEach((elem)=>{\n      if(elem[0] == metric) {\n        let newMetric = document.createElement('option');\n        newMetric.id = 'metricsOption_'+panelId;\n        newMetric.value = metric.toUpperCase();\n\n        if(currentParameterForChart===newMetric.value)\n          newMetric.selected = 'selected';\n        \n        newMetric.innerHTML = elem[1]?elem[1]:titleize(elem[0]);\n\n        el.appendChild(newMetric);\n      }\n    })\n  })\n\n  let selectBox = document.querySelector('#parameters_dropdown_'+panelId)\n  if(selectBox.options.length>0)\n    selectBox.style.display = 'block';\n}\n/**\n* Render's the chart in panel\n*/\nfunction renderChart(panelId, selectedPointData, measurementUnits, chartDetails) {\n  console.debug('renderChart')\n  let [type, pointId, fieldName] = chartDetails\n\n  drawChartCointainer(panelId);\n\n  //prepare data to chart\n  let chartData = selectedPointData.map((elem)=>createLine(elem.created_at, elem[fieldName.toLowerCase()]));\n\n  function getChartMetaInfo() {\n    let props = {\n      AirQualityObserved: 'Air Quality',\n      TrafficFlowObserved: 'Cars'\n    }\n\n    return { \n        title: `${props[type]||type}: Device ${pointId} - ${measurementUnits[1]?measurementUnits[1]:titleize(measurementUnits[0])}`,\n        units: (measurementUnits[2] ? `${measurementUnits[1]} (${measurementUnits[2]})` : measurementUnits[1])\n      }\n  }\n\n\n  let chartInfo = getChartMetaInfo();\n  \n  //config highchart acording with grafana theme\n  if(!config.bootData.user.lightTheme) {\n    Highcharts.theme = HIGHCHARTS_THEME_DARK;\n\n    // Apply the theme\n    Highcharts.setOptions(Highcharts.theme);\n  }\n\n  Highcharts.chart('graph_container_'+panelId,\n    {\n      chart: {\n        type: 'line',\n        height: 200,\n        zoomType: 'x',\n        events: {\n          load: function () {            \n            chartData = this.series[0]; // set up the updating of the chart each second\n          }\n        }\n      },\n      title: {\n        text: chartInfo.title\n      },\n      subtitle: {\n        text: ''\n      },\n      xAxis: {\n        type: 'datetime'\n      },\n      yAxis: {\n        title: {\n          text: chartInfo.units\n        }\n      },\n      legend: {\n        enabled: false\n      },\n      series: [{\n        name: chartInfo.units,\n        data: chartData\n      }]\n    }\n  );\n}\n\n\n/**\n* private functions\n*/\nfunction getDataPointExtraFields(dataPoint) {\n\n  const values = {\n    fillOpacity: 0.5\n  }\n\n  if(dataPoint.type==='AirQualityObserved') {\n    let aqiIndex = calculateAQIIndex(dataPoint.value);\n    let aqiColor = AQI.color[aqiIndex];\n\n    _.defaults(values, {\n      color: aqiColor,\n      fillColor: aqiColor,\n\n      aqiColor: aqiColor,\n      aqiMeaning: AQI.meaning[aqiIndex],\n      aqiRisk: AQI.risks[aqiIndex],\n      aqi: dataPoint.value,\n\n      markerColor: AQI.markerColor[aqiIndex]\n    })    \n  } else {\n    if(dataPoint.type==='TrafficFlowObserved') {\n      let colorIndex = calculateCarsIntensityIndex(dataPoint.value)\n\n      _.defaults(values, {\n        color: CARS_COUNT.color[colorIndex], \n        fillColor: CARS_COUNT.color[colorIndex],\n        \n        markerColor: CARS_COUNT.markerColor[colorIndex]\n      })\n    }\n  }\n\n  return values;\n}\n\nfunction getMapMarkerClassName(type, value) {\n  let resp = 'map-marker-';\n  if(type==='AirQualityObserved') {\n    return resp+AQI.classColor[calculateAQIIndex(value)];\n  } else if(type==='TrafficFlowObserved')\n    return resp+CARS_COUNT.classColor[calculateCarsIntensityIndex(value)];\n  return resp+'default';\n}\n\nfunction getDataPointStickyInfo(dataPoint, metricsTranslations) {\n  let dataPointExtraFields = getDataPointExtraFields(dataPoint);  \n  let stickyInfo = '<div class=\"stycky-popup-info\">'\n\n  if(dataPoint.type==='AirQualityObserved') {\n    stickyInfo += '<div class=\"head air-quality\">Air Quality</div>'\n  } else {\n    if(dataPoint.type==='TrafficFlowObserved') {\n      stickyInfo += '<div class=\"head traffic-flow\">Cars Intensity</div>'\n    } else {\n      stickyInfo += '<div class=\"head\">' + dataPoint.type + '</div>'\n    }\n  }  \n\n  //body\n  stickyInfo += '<div class=\"body\">'\n  stickyInfo += getDataPointDetails(dataPoint, metricsTranslations).join('')\n  stickyInfo += '</div>'\n  stickyInfo += '</div>'\n\n  //console.debug(dataPoint)\n  return stickyInfo\n}\n\nfunction getDataPointDetails(dataPoint, metricsTranslations) {\n  let translatedValues = Object.keys(dataPoint).map((dpKey)=>{\n    let dP = dataPoint[dpKey]\n    let trans = metricsTranslations.filter((elem)=>elem[0]===dpKey)\n    return { 'name': (trans.length>0 && trans[0][1] ? trans[0][1] : titleize(dpKey) ), value: dP||'-', unit: (trans.length>0 ? trans[0][2] : '') }\n  })\n\n  return translatedValues.map((translatedValue)=>`<div>${translatedValue.name}: ${translatedValue.value} ${translatedValue.unit||''}</div>`)\n}\n\n//show all accepted metrics for a specific point id\nfunction getMetricsToShow(allMetrics, id) {\n  const metricsToShow = {};\n  for (const key in allMetrics) {\n    allMetrics[key].forEach((_value) => {\n      if (_value.id === id) {\n        if (_value.value) {\n          if (!(metricsToShow[key])){\n            metricsToShow[key] = 0;\n          }\n          metricsToShow[key] = _value.value;\n        }\n      }\n    });\n  }\n\n  //  metricsToShow['aqi'] = aqi;\n  return metricsToShow\n}\n\n// Given vars passed as param, retrieves the selected city\nfunction getSelectedCity(vars) {\n  let cityenv_ = vars.filter(elem => elem.name===\"cityenv\")\n  let city = null;\n  if(cityenv_ && cityenv_.length === 1)\n    city = cityenv_[0].current.value\n\n  return city;\n}\n\nfunction hideAllGraphPopups(panelId) {\n  let map_table_popups = ['measures_table', 'health_concerns_wrapper', 'environment_table', 'traffic_table'];\n\n  for(let map_table_popup of map_table_popups) {\n    let popup = document.getElementById(map_table_popup+'_'+panelId)\n    if(popup)\n      popup.style.display = 'none';\n  }\n}\n\nfunction drawDefaultPopups() {  \n}\n/*\n* Draw Traffic Flow Popup\n*/\nfunction drawTrafficFlowPopup(panelId) {\n  document.getElementById('traffic_table_'+panelId).style.display = 'block';\n}\n/*\n* Draw Health Concerns Popup\n*/\nfunction drawHealthConcernsPopup(panelId, risk, color, meaning, map_size) {\n  const healthConcernsWrapper = document.getElementById('health_concerns_wrapper_'+panelId);\n  const healthConcerns = document.querySelector('#health_concerns_wrapper_'+panelId+'>div');\n  const healthConcernsColor = document.querySelector('#health_concerns_wrapper_'+panelId+'>div>span>span.color');\n  const healthRisk = document.getElementById('health_risk_'+panelId);\n\n  healthConcernsWrapper.style.display = 'block';\n  healthConcernsColor.style.backgroundColor = color;\n  healthRisk.innerHTML = risk;\n}\n/*\n* Draw Measures Popup - The popup info is related with the choosed value \n*  from select box and with the metrics that came from result set\n*  and from a list of what to show metrics\n*/\nfunction drawMeasuresPopup(panelId, metricsToShow, providedMetrics) {\n  const measuresTable = document.querySelector('#measures_table_'+panelId+' > table > tbody');\n  while (measuresTable.rows[0]) measuresTable.deleteRow(0);\n\n  Object.keys(metricsToShow).forEach((metric)=>{\n    providedMetrics.forEach((elem)=>{\n      if(elem[0] == metric) {\n        let row = measuresTable.insertRow();    // -1 for inserting bottom\n        let innerCell0 = elem[1]?elem[1]:titleize(elem[0]);\n        let innerCell1 = (metricsToShow[metric] ? metricsToShow[metric] : '-') + (elem[2]?` ${elem[2]}`:'');\n        let cell0 = row.insertCell(0);\n        let cell1 = row.insertCell(1);\n\n        cell0.innerHTML = innerCell0;\n        cell1.innerHTML = innerCell1;        \n      }\n    })\n\n  })\n\n  document.getElementById('measures_table_'+panelId).style.display = 'block';\n}\n/*\n* Draw Chart\n*/\nfunction drawChartCointainer(panelId) {\n  document.querySelector('#data_details_'+panelId).style.display = 'block';\n  document.getElementById('data_chart_'+panelId).style.display = 'block';\n}\n\n// Access remote api and gives the coordinates from a city center based on NOMINATIM url server\nfunction getCityCoordinates(city_name) {\n  let url = NOMINATIM_ADDRESS.replace('<city_name>', city_name)\n  return fetch(url)\n    .then(response => response.json())\n    .then(data => { return { latitude: data[0].lat, longitude: data[0].lon } })\n    .catch(error => console.error(error))\n}\n\n// gets the aqi index from the AQI var\nfunction calculateAQIIndex(value) {\n  let aqiIndex;\n  AQI.range.forEach((elem, index) => {\n    if (value >= elem) {\n      aqiIndex = index;\n    }\n  });\n  return aqiIndex;\n}\n// gets the index from the CARS_COUNT const var\nfunction calculateCarsIntensityIndex(value) {\n  CARS_COUNT.range.forEach((elem, index) => {\n    if (value >= elem) {\n      return index;\n    }\n  });\n  return 0;\n}\n\n/*\n* Auxiliar functions\n*/\n// just for improve DRY\nfunction createLine(time_, value) {\n  const time = new Date(time_);\n  const day = time.getDate();\n  const month = time.getMonth();\n  const year = time.getFullYear();\n  const hour = time.getHours() - 1;\n  const minutes = time.getMinutes();\n  const seconds = time.getSeconds();\n  const milliseconds = time.getMilliseconds();\n  return [Date.UTC(year, month, day, hour+1, minutes, seconds, milliseconds), value]\n}\n\nexport {\n\n  hideAllGraphPopups, \n  drawPopups,\n  drawSelect,\n  renderChart,\n\n  getCityCoordinates,\n\n  getDataPointExtraFields,\n  getDataPointStickyInfo,\n\n  getSelectedCity,\n\n  getMapMarkerClassName\n}"]}