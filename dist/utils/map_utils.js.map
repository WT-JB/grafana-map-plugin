{"version":3,"sources":["../../src/utils/map_utils.js"],"names":["drawPollutantsPopup","providedPollutants","allPollutants","id","aqi","currentParameterForChart","measuresTable","document","querySelector","rows","deleteRow","el","getElementById","firstChild","removeChild","pollutantsToShow","key","forEach","_value","value","pollutant","row","insertRow","innerCell0","name","innerCell1","unit","cell0","insertCell","cell1","innerHTML","newPollutant","createElement","toUpperCase","selected","appendChild","style","display","drawHealthConcernsPopup","risk","color","meaning","map_size","healthConcernsWrapper","healthConcerns","healthConcernsColor","healthRisk","backgroundColor","drawDefaultPopups","drawTrafficFlowPopup","drawPopups","timeSeries","validated_pollutants","currentTargetForChart","target","options","type","values","hideAll","lastValueMeasure","length","aqiIndex","calculateAQI","pollutants","AQI","risks","error","console","log","range","index","getTimeSeries","data","valueValues","pollutantsValues","Object","keys","point","time","pollutantsTemp","push","dataTreatment","finalData","auxData","locationLatitude","locationLongitude","getUpdatedChartSeries","chartSeries","targetType","targetId","currentParameter","toLowerCase","lastMeasure","lastTime","timeTemp","val","Date","day","getDate","month","getMonth","year","getFullYear","hour","getHours","minutes","getMinutes","seconds","getSeconds","milliseconds","getMilliseconds","chartLastDisplayedValue","y","chartLastDisplayedTime","x","chartLastDisplayedId","split","parseInt","addPoint","UTC","processData","chartData","parameterUnit","title","parameterChoice","sensor","createLine","renderChart","showDataDetailsSelect","config","bootData","user","lightTheme","window","Highcharts","setOptions","HIGHCHARTS_THEME_DARK","stockChart","chart","height","zoomType","events","load","series","text","subtitle","xAxis","yAxis","legend","enabled","rangeSelector","buttons","count","inputEnabled","getCityCoordinates","city_name","url","nominatim_address","replace","fetch","then","response","json","latitude","lat","longitude","lon","catch","getStickyInfo","dataPoint","stickyPopupInfo","aqiColor","aqiMeaning","aqiRisk","_","defaults","fillColor","fillOpacity","trim","getSelectedCity","vars","cityenv_","filter","elem","city","current"],"mappings":"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","file":"map_utils.js","sourcesContent":["// draw components in the map\n/* Vendor specific */\nimport _ from 'lodash';\n\n/* Grafana Specific */\nimport config from 'app/core/config';\n\nimport { AQI, HIGHCHARTS_THEME_DARK, nominatim_address } from '../definitions';\n\nfunction drawPollutantsPopup(providedPollutants, allPollutants, id, aqi, currentParameterForChart) {\n  const measuresTable = document.querySelector('#measures_table > table > tbody');\n  while (measuresTable.rows[0]) measuresTable.deleteRow(0);\n\n  // Remove air paramters from dropdown\n  var el = document.getElementById('air_parameters_dropdown');\n  while ( el.firstChild ) {\n    el.removeChild( el.firstChild )\n  }\n\n  const pollutantsToShow = {};\n  for (const key in allPollutants) {    \n    allPollutants[key].forEach((_value) => {\n      if (_value.id === id) {\n        if (_value.value) {\n          if (!(pollutantsToShow[key])){\n            pollutantsToShow[key] = 0;\n          }\n          pollutantsToShow[key] = _value.value;\n        }\n      }\n    });\n  }\n\n  pollutantsToShow['aqi'] = aqi;\n\n  for (const pollutant in pollutantsToShow){\n    const row = measuresTable.insertRow(0);\n    const innerCell0 = providedPollutants[pollutant].name;\n    const innerCell1 = pollutantsToShow[pollutant] + ' ' + providedPollutants[pollutant].unit;\n    const cell0 = row.insertCell(0);\n    const cell1 = row.insertCell(1);\n\n    cell0.innerHTML = innerCell0;\n    cell1.innerHTML = innerCell1;\n\n    // Add Pollutants to Chart Dropdown\n    const newPollutant = document.createElement('option');\n    newPollutant.id = 'pollutantOption';\n    newPollutant.value = pollutant.toUpperCase();\n\n    if(currentParameterForChart===newPollutant.value)\n      newPollutant.selected = 'selected';\n    \n    newPollutant.innerHTML = providedPollutants[pollutant].name;\n\n    el.appendChild(newPollutant);\n    // ----\n  }\n\n  document.getElementById('environment_table').style.display = 'block';\n  document.getElementById('measures_table').style.display = 'block';\n}\n\nfunction drawHealthConcernsPopup(providedPollutants, risk, color, meaning, map_size) {\n  const healthConcernsWrapper = document.getElementById('health_concerns_wrapper');\n  const healthConcerns = document.querySelector('#health_concerns_wrapper>div');\n  const healthConcernsColor = document.querySelector('#health_concerns_wrapper>div>span>span.color');\n  const healthRisk = document.getElementById('health_risk');\n\n  healthConcernsWrapper.style.display = 'block';\n  healthConcernsColor.style.backgroundColor = color;\n  healthRisk.innerHTML = risk;\n}\n\nfunction drawDefaultPopups() {  \n}\nfunction drawTrafficFlowPopup() {\n  document.getElementById('traffic_table').style.display = 'block';\n}\n\nfunction drawPopups(timeSeries, validated_pollutants, currentParameterForChart, currentTargetForChart) {\n  //console.log('drawPopups');\n  const id = currentTargetForChart.target.options.id;\n  const type = currentTargetForChart.target.options.type;\n  const values = timeSeries.values[id];\n\n  document.getElementById('data_chart').style.display = 'block';\n\n  hideAll()\n\n  //render popups\n  try {\n    const lastValueMeasure = values[values.length - 1].value; //values array is the one for the AQI values\n    const aqiIndex = calculateAQI(lastValueMeasure);\n\n    // Show Pollutants Legend (MAP)\n\n    switch(type) {\n      case 'AirQualityObserved':\n        const allPollutants = timeSeries.pollutants;\n\n        if(validated_pollutants) {\n          drawPollutantsPopup(validated_pollutants, allPollutants, id, lastValueMeasure, currentParameterForChart);\n          drawHealthConcernsPopup(validated_pollutants, AQI.risks[aqiIndex], AQI.color[aqiIndex], AQI.meaning[aqiIndex]);\n        }\n        break;\n      case 'TrafficFlowObserved':\n        drawTrafficFlowPopup();\n        break;\n      default:\n        drawDefaultPopups();\n    }\n    \n  } catch(error) {\n    console.log(\"Exception:\");\n    console.log(error);\n    console.log(\"id: \" + id + \", type: \" + type + \", values: \" + values)\n  }\n}\n\nfunction calculateAQI(aqi) {\n  let aqiIndex;\n  AQI.range.forEach((value, index) => {\n    if (aqi >= value) {\n      aqiIndex = index;\n    }\n  });\n  return aqiIndex;\n}\n\nfunction getTimeSeries(data) {\n    const valueValues = {};\n    const values = [];\n    const pollutantsValues = [];\n\n    Object.keys(data).forEach((key) => {\n      data[key].forEach((point) => {\n        const id = point.id;\n        const time = point.time;\n        let pollutants = '';\n\n        const value = point.value;\n        if (point.type === 'AirQualityObserved') {\n          pollutants = point.pollutants;\n          const pollutantsTemp = {};\n\n          pollutants.forEach((pollutant) => {\n            if (!(pollutantsValues[pollutant.name])) {\n              pollutantsValues[pollutant.name] = [];\n            }\n            pollutantsValues[pollutant.name].push({'time': time, 'value': pollutant.value, 'id': id});\n          });\n        }\n\n        if (!(valueValues[point.id])) {\n          valueValues[point.id] = [];\n        }\n        valueValues[point.id].push({'time': time, 'value': value, 'id': id});\n      });\n    });\n\n    return {'values': valueValues, 'pollutants': pollutantsValues};\n}\n/*\n* Agregate data by id\n*/\nfunction dataTreatment(data) {\n  const finalData = {};\n  let auxData;\n\n  data.forEach((value) => {\n    if (!(finalData[value.id])) {\n      finalData[value.id] = [];\n    }\n\n    auxData = {\n        'id': value.id, \n        'locationLatitude': value.locationLatitude, \n        'locationLongitude': value.locationLongitude, \n        'time': value.time, \n        'type': value.type, \n        'value': value.value\n      }\n\n    if (value.type === 'AirQualityObserved')\n      auxData.pollutants = value.pollutants;\n\n    finalData[value.id].push( auxData );\n  });\n\n  return finalData;\n}\n\nfunction getUpdatedChartSeries(chartSeries, timeSeries, currentTargetForChart, currentParameterForChart) {\n\n  if(Object.keys(chartSeries).length === 0)\n    return chartSeries\n\n  const targetType = currentTargetForChart.target.options.type;\n  const targetId = currentTargetForChart.target.options.id;\n  const currentParameter = currentParameterForChart.toLowerCase();\n  let lastMeasure;\n  let lastTime;\n\n  try {\n    let timeTemp;\n    if (currentParameter !== 'aqi' && targetType === 'AirQualityObserved'){\n      timeTemp = timeSeries.pollutants[currentParameter];\n      timeTemp.forEach((val) => {\n        if (val.id === targetId){\n          lastTime = val.time;\n          lastMeasure = val.value;\n        } \n      });\n    } else {\n      timeTemp = timeSeries.values[targetId];\n      lastMeasure = timeTemp[timeTemp.length - 1].value;\n      lastTime = timeTemp[timeTemp.length - 1].time\n    }\n   \n    const time = new Date(lastTime);\n    const day = time.getDate();\n    const month = time.getMonth();\n    const year = time.getFullYear();\n    const hour = time.getHours() - 1;\n    const minutes = time.getMinutes();\n    const seconds = time.getSeconds();\n    const milliseconds = time.getMilliseconds();      \n    const chartLastDisplayedValue = chartSeries.data[chartSeries.data.length - 1].y;\n    const chartLastDisplayedTime = chartSeries.data[chartSeries.data.length - 1].x;\n    let chartLastDisplayedId = chartSeries.name.split(' ');\n\n    chartLastDisplayedId = parseInt(chartLastDisplayedId[chartLastDisplayedId.length - 1]);      \n\n    if (!(lastTime === chartLastDisplayedTime && lastMeasure === chartLastDisplayedValue && targetId === chartLastDisplayedId)){\n      chartSeries.addPoint([Date.UTC(year, month, day, hour+1, minutes, seconds, milliseconds), lastMeasure], true, true);\n    }\n  } catch(error){\n    console.log(\"Woaa! Something went wrong... Probably there is no recent data for the selected device. Here you have the error:\");\n    console.log(error);\n  }\n\n  return chartSeries;\n}\n\nfunction hideAll() {\n  document.getElementById('measures_table').style.display = 'none';\n  document.getElementById('health_concerns_wrapper').style.display = 'none';\n  document.getElementById('environment_table').style.display = 'none';\n  document.getElementById('traffic_table').style.display = 'none';\n}\n\nfunction processData(chartSeries, timeSeries, validated_pollutants, currentParameterForChart, currentTargetForChart) {\n  let chartData = [];\n  const currentParameter = currentParameterForChart.toLowerCase();\n  const id = currentTargetForChart.target.options.id;\n  const type = currentTargetForChart.target.options.type;\n  const values = timeSeries.values[id];\n\n  let parameterUnit = '';\n  let title = '';\n\n  if (type === 'AirQualityObserved' && currentParameter !== 'aqi') {\n    parameterUnit = validated_pollutants[currentParameter].unit;\n    title = validated_pollutants[currentParameter].name + ' - Device ' + id;\n\n    const parameterChoice = timeSeries.pollutants[currentParameter];      \n    parameterChoice.forEach((sensor) => {\n      if (sensor.id === id) {\n       chartData.push(createLine(sensor));\n      }\n    });\n  } else {\n    if(type === 'TrafficFlowObserved') {\n      title = 'Cars Intensity - Device ' + id;\n      parameterUnit = 'Cars'\n    } else {\n      title = type + ' - Device ' + id;\n      parameterUnit = type;\n    }\n\n    values.forEach((value) => {\n      chartData.push(createLine(value));\n    });\n  }\n\n  return [chartData, parameterUnit, title]\n}\n\nfunction createLine(value) {\n  const time = new Date(value.time);\n  const day = time.getDate();\n  const month = time.getMonth();\n  const year = time.getFullYear();\n  const hour = time.getHours() - 1;\n  const minutes = time.getMinutes();\n  const seconds = time.getSeconds();\n  const milliseconds = time.getMilliseconds();\n  return [Date.UTC(year, month, day, hour+1, minutes, seconds, milliseconds), value.value]\n}\n\nfunction renderChart(chartSeries, chartData, parameterUnit, title) {\n  showDataDetailsSelect();\n\n  //config highchart acording with grafana theme\n  if(!config.bootData.user.lightTheme)\n    window.Highcharts.setOptions(HIGHCHARTS_THEME_DARK);\n\n  window.Highcharts.stockChart('graph_container', \n    {\n      chart: {\n        height: 200,\n        zoomType: 'x',\n        events: {\n          load: function () {            \n            chartSeries = this.series[0]; // set up the updating of the chart each second\n          }\n        }\n      },\n      title: {\n          text: title\n      },\n      subtitle: {\n          text: ''\n      },\n      xAxis: {\n          type: 'datetime'\n      },\n      yAxis: {\n          title: {\n              text: parameterUnit\n          }\n      },\n      legend: {\n          enabled: false\n      },\n      rangeSelector: {\n        buttons: [{\n            count: 5,\n            type: 'minute',\n            text: '5M'\n        }, {\n            count: 10,\n            type: 'minute',\n            text: '10M'\n        }, {\n            type: 'all',\n            text: 'All'\n        }],\n        inputEnabled: false,\n        selected: 2\n      },\n\n      series: [{\n          name: title,\n          data: chartData\n      }]\n    }\n  );\n}\n\nfunction showDataDetailsSelect() {\n  document.querySelector('#data_details').style.display = 'block';\n}\n\n// gives the coordinates from a city center based on nominatin url server\nfunction getCityCoordinates(city_name) {\n  let url = nominatim_address.replace('<city_name>', city_name)\n//  console.log(url)\n  \n  return fetch(url)\n    .then(response => response.json())\n    .then(data => { return { latitude: data[0].lat, longitude: data[0].lon } })\n    .catch(error => console.error(error))\n}\n\nfunction getStickyInfo(dataPoint) {\n  let stickyPopupInfo = '';\n  const values = {\n    id: dataPoint.id,\n    type: dataPoint.type,\n    latitude: dataPoint.locationLatitude,\n    longitude: dataPoint.locationLongitude\n  }\n\n  if(dataPoint.type==='AirQualityObserved') {\n    const aqi = calculateAQI(dataPoint.value);\n    const aqiColor = AQI.color[aqi];\n    const aqiMeaning = AQI.meaning[aqi];\n    const aqiRisk = AQI.risks[aqi];\n\n    const pollutants = dataPoint.pollutants;\n    if(pollutants)\n      pollutants.push({'name': 'aqi', 'value': dataPoint.value});\n\n    _.defaults(values, {\n      color: aqiColor,\n      fillColor: aqiColor,\n      fillOpacity: 0.5,\n      aqiColor: aqiColor,\n      aqiMeaning: aqiMeaning,\n      aqiRisk: aqiRisk,\n      pollutants: pollutants,\n      aqi: dataPoint.value\n    })\n    stickyPopupInfo = ('AQI: ' + dataPoint.value + ' (' + aqiMeaning + ')').trim();\n  } else {\n    _.defaults(values, {fillOpacity: 0.5})\n\n    if(dataPoint.type==='TrafficFlowObserved') {\n      stickyPopupInfo = 'Cars Intensity - Device: ' + dataPoint.id;\n    } else\n      stickyPopupInfo = dataPoint.type + ' - Device: ' + dataPoint.id +', Value: '+dataPoint.value;\n  }\n\n  return [values, stickyPopupInfo];\n}\n\n\nfunction getSelectedCity(vars) {\n  let cityenv_ = vars.filter(elem => elem.name===\"cityenv\")\n  let city = null;\n  if(cityenv_ && cityenv_.length === 1)\n    city = cityenv_[0].current.value\n\n  return city;\n}\n\n\nexport {\n  calculateAQI, \n  processData,\n  getTimeSeries, \n  dataTreatment, \n  getUpdatedChartSeries, \n\n  hideAll, \n  drawPopups,\n  renderChart,\n\n  getCityCoordinates,\n\n  getStickyInfo,\n\n  getSelectedCity\n}"]}