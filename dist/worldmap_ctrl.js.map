{"version":3,"sources":["../src/worldmap_ctrl.js"],"names":["dataFormatter","WorldmapCtrl","$scope","$injector","contextSrv","setMapProvider","panel","mapLocationsLabels","Object","keys","iconTypes","defaultMetrics","markerColors","environmentVars","templateSrv","variables","map","elem","name","events","on","onInitEditMode","bind","onDataError","onDataReceived","onPanelTeardown","handleClickAddMetric","addMetric","handleRemoveMetric","removeMetric","metrics","push","index","splice","refresh","addEditorTab","dataList","dashboard","snapshot","locations","snapshotLocationData","console","debug","length","data","getValues","layerNames","Set","target","split","render","error","warn","message","worldMap","remove","tileServer","user","lightTheme","saturationClass","mapCenter","setNewCoords","then","catch","info","mapCenterLatitude","mapCenterLongitude","mapCenterMoved","cityEnvVariable","city","coordinates","latitude","longitude","setZoom","initialZoom","showLegend","removeLegend","clearLayers","updateThresholdData","legend","update","scope","attrs","ctrl","templateUrl"],"mappings":";;;;;;;;AAGA;;AACA;;;;AACA;;;;AAEA;;AAEA;;AACA;;AAEA;;AAEA;;;;AACA;;AAEA;;AACA;;;;;;;;;;+eAlBA;;AAEA;;AAIA;;AAEA;;;AAYA,IAAIA,gBAAgB,+BAApB;;IAEqBC,Y;;;AAEnB,wBAAYC,MAAZ,EAAoBC,SAApB,EAA+BC,UAA/B,EAA2C;AAAA;;AAAA,4HACnCF,MADmC,EAC3BC,SAD2B;;AAEzC,UAAKE,cAAL,CAAoBD,UAApB;AACA,8BAAa,MAAKE,KAAlB;;AAEA;AACA,UAAKC,kBAAL,gCAA8BC,OAAOC,IAAP,4BAA9B,IAA0D,mBAA1D,EAA+E,QAA/E;AACA,UAAKC,SAAL;AACA,UAAKC,cAAL;AACA,UAAKC,YAAL;AACA,UAAKC,eAAL,GAAuB,MAAKC,WAAL,CAAiBC,SAAjB,CAA2BC,GAA3B,CAA+B,UAACC,IAAD;AAAA,aAAQA,KAAKC,IAAb;AAAA,KAA/B,CAAvB;;AAEA;AACA,UAAKC,MAAL,CAAYC,EAAZ,CAAe,gBAAf,EAAiC,MAAKC,cAAL,CAAoBC,IAApB,OAAjC;AACA,UAAKH,MAAL,CAAYC,EAAZ,CAAe,YAAf,EAA6B,MAAKG,WAAL,CAAiBD,IAAjB,OAA7B;AACA,UAAKH,MAAL,CAAYC,EAAZ,CAAe,eAAf,EAAgC,MAAKI,cAAL,CAAoBF,IAApB,OAAhC,EAfyC,CAeyB;AAClE,UAAKH,MAAL,CAAYC,EAAZ,CAAe,gBAAf,EAAiC,MAAKK,eAAL,CAAqBH,IAArB,OAAjC;AACA,UAAKH,MAAL,CAAYC,EAAZ,CAAe,oBAAf,EAAqC,MAAKI,cAAL,CAAoBF,IAApB,OAArC;;AAEA;AACA,UAAKI,oBAAL,GAA4B,MAAKC,SAAL,CAAeL,IAAf,OAA5B;AACA,UAAKM,kBAAL,GAA0B,MAAKC,YAAL,CAAkBP,IAAlB,OAA1B;AArByC;AAsB1C;;AAED;;;;;gCACY;AACV,WAAKhB,KAAL,CAAWwB,OAAX,CAAmBC,IAAnB,CAAwB,CAAC,EAAD,EAAI,EAAJ,EAAO,EAAP,CAAxB;AACD;AACD;;;;iCACaC,K,EAAO;AAClB,WAAK1B,KAAL,CAAWwB,OAAX,CAAmBG,MAAnB,CAA0BD,KAA1B,EAAiC,CAAjC;AACA,WAAKE,OAAL;AACD;AACD;;;;qCACiB;AACf,WAAKC,YAAL,CAAkB,UAAlB,qDAAoE,CAApE;AACD;;AAED;;;;;;;mCAIeC,Q,EAAU;AACvB;AACA;;AAEA,UAAI,KAAKC,SAAL,CAAeC,QAAf,IAA2B,KAAKC,SAApC,EAA+C;AAC7C,aAAKjC,KAAL,CAAWkC,oBAAX,GAAkC,KAAKD,SAAvC;AACD;;AAED,UAAI,CAACH,QAAL,EAAe;AACbK,gBAAQC,KAAR,CAAc,mDAAd;AACA;AACD;AACD,UAAGN,SAASO,MAAT,KAAkB,CAArB,EAAuB;AACrBF,gBAAQC,KAAR,CAAc,8BAAd;AACA;AACD;;AAED,WAAKE,IAAL,GAAY5C,cAAc6C,SAAd,CAAwBT,QAAxB,EAAkC,KAAK9B,KAAL,CAAWwB,OAA7C,CAAZ;AACA,WAAKgB,UAAL,gCAAsB,IAAIC,GAAJ,CAAQX,SAASpB,GAAT,CAAa,UAACC,IAAD;AAAA,eAAQA,KAAK+B,MAAL,CAAYC,KAAZ,CAAkB,GAAlB,EAAuB,CAAvB,CAAR;AAAA,OAAb,CAAR,CAAtB;;AAEA;AACA;;AAEA,WAAKC,MAAL;AACD;;;gCAEWC,K,EAAO;AACjB,UAAGA,SAASA,MAAMP,IAAf,IAAuBO,MAAMP,IAAN,CAAWO,KAArC,EAA4C;AAC1CV,gBAAQW,IAAR,CAAa,YAAUD,MAAMP,IAAN,CAAWO,KAAX,CAAiBE,OAAxC;AACD;AACD,WAAK7B,cAAL,CAAoB,EAApB;AACD;;;sCAEiB;AAChB,UAAI,KAAK8B,QAAT,EAAmB;AACjBb,gBAAQC,KAAR,CAAc,cAAd;AACA,aAAKY,QAAL,CAActC,GAAd,CAAkBuC,MAAlB;AACD;AACF;;;mCAEcnD,U,EAAY;AACzB,WAAKoD,UAAL,GAAkBpD,WAAWqD,IAAX,CAAgBC,UAAhB,GAA6B,kBAA7B,GAAkD,cAApE;AACA,WAAKC,eAAL,GAAuB,KAAKH,UAAL,KAAoB,cAApB,GAAqC,YAArC,GAAoD,EAA3E;AACD;;;sCAEiB;AAAA;;AAChB,UAAI,KAAKlD,KAAL,CAAWsD,SAAX,KAAyB,mBAA7B,EAAkD;AAAC;AACjD,aAAKC,YAAL,GACGC,IADH,CACQ;AAAA,iBAAI,OAAKZ,MAAL,EAAJ;AAAA,SADR,EAEGa,KAFH,CAES;AAAA,iBAAStB,QAAQW,IAAR,CAAaD,KAAb,CAAT;AAAA,SAFT;;AAIA;AACD;;AAED,UAAI,KAAK7C,KAAL,CAAWsD,SAAX,KAAyB,QAA7B,EAAuC;AAAE;AACvCnB,gBAAQuB,IAAR,CAAa,mCAAb;AACA,aAAK1D,KAAL,CAAW2D,iBAAX,GAA+B,2BAAc,KAAK3D,KAAL,CAAWsD,SAAzB,EAAoCK,iBAAnE;AACA,aAAK3D,KAAL,CAAW4D,kBAAX,GAAgC,2BAAc,KAAK5D,KAAL,CAAWsD,SAAzB,EAAoCM,kBAApE;AACD;;AAED,WAAKC,cAAL,GAAsB,IAAtB;AACA,WAAKjB,MAAL;AACD;;;sCAEiB;AAChB,aAAQ,gCAAgB,KAAKpC,WAAL,CAAiBC,SAAjC,EAA4C,KAAKT,KAAL,CAAW8D,eAAvD,MAA0E,KAAK9D,KAAL,CAAW+D,IAA7F;AACD;;;mCAEc;AAAA;;AACb,UAAIA,OAAO,gCAAgB,KAAKvD,WAAL,CAAiBC,SAAjC,EAA4C,KAAKT,KAAL,CAAW8D,eAAvD,CAAX;;AAEA,aAAO,mCAAmBC,IAAnB,EACJP,IADI,CACC,uBAAe;AACnB,eAAKxD,KAAL,CAAW+D,IAAX,GAAkBA,IAAlB;AACA,eAAK/D,KAAL,CAAW2D,iBAAX,GAA+BK,YAAYC,QAA3C;AACA,eAAKjE,KAAL,CAAW4D,kBAAX,GAAgCI,YAAYE,SAA5C;AACD,OALI,CAAP;AAMD;;;8BAES;AACR,WAAKlB,QAAL,CAAcmB,OAAd,CAAsB,KAAKnE,KAAL,CAAWoE,WAAjC;AACD;;;mCAEc;AACb,UAAI,CAAC,KAAKpE,KAAL,CAAWqE,UAAhB,EAA4B;AAC1B,aAAKrB,QAAL,CAAcsB,YAAd;AACD;AACD,WAAK1B,MAAL;AACD;;;yCAEoB;AACnB,WAAKI,QAAL,CAAcuB,WAAd;AACA,WAAK3B,MAAL;AACD;;;uCAEkB;AACjB,WAAK4B,mBAAL;AACA,WAAKxB,QAAL,CAAcyB,MAAd,CAAqBC,MAArB;AACA,WAAK9B,MAAL;AACD;;AAED;;;;yBACK+B,K,EAAOhE,I,EAAMiE,K,EAAOC,I,EAAM;AAC7B,kCAAYF,KAAZ,EAAmBhE,IAAnB,EAAyBiE,KAAzB,EAAgCC,IAAhC;AACD;;;;;;kBApJkBlF,Y;;;AAwJrBA,aAAamF,WAAb,GAA2B,sBAA3B","file":"worldmap_ctrl.js","sourcesContent":["/* eslint import/no-extraneous-dependencies: 0 */\n\n/* Grafana Specific */\nimport {MetricsPanelCtrl} from 'app/plugins/sdk';\nimport TimeSeries from 'app/core/time_series2';\nimport kbn from 'app/core/utils/kbn';\n/* Vendor specific */\nimport { defaultsDeep } from 'lodash';\n/* App specific */\nimport { PLUGIN_PATH, PANEL_DEFAULTS, DEFAULT_METRICS, MAP_LOCATIONS, ICON_TYPES, MARKER_COLORS } from './definitions'\nimport { getDatasources, getValidDatasources } from './utils/datasource';\n\nimport { getCityCoordinates, getSelectedCity } from './utils/map_utils';\n\nimport mapRenderer from './map_renderer';\nimport { DataFormatter, dataRecievedIsTheSame } from './utils/data_utils';\n\nimport './css/worldmap-panel.css!';\nimport './vendor/leaflet/leaflet.css!';\n\nlet dataFormatter = new DataFormatter();\n\nexport default class WorldmapCtrl extends MetricsPanelCtrl {\n\n  constructor($scope, $injector, contextSrv) {\n    super($scope, $injector);\n    this.setMapProvider(contextSrv);\n    defaultsDeep(this.panel, PANEL_DEFAULTS);\n\n    //helper vars definitions to be used in editor\n    this.mapLocationsLabels = [...Object.keys(MAP_LOCATIONS), 'Location Variable', 'Custom'];\n    this.iconTypes = ICON_TYPES;\n    this.defaultMetrics = DEFAULT_METRICS;\n    this.markerColors = MARKER_COLORS;\n    this.environmentVars = this.templateSrv.variables.map((elem)=>elem.name)\n\n    //bind grafana events\n    this.events.on('init-edit-mode', this.onInitEditMode.bind(this));\n    this.events.on('data-error', this.onDataError.bind(this));\n    this.events.on('data-received', this.onDataReceived.bind(this));  //process resultset as a result of the execution of all queries\n    this.events.on('panel-teardown', this.onPanelTeardown.bind(this));\n    this.events.on('data-snapshot-load', this.onDataReceived.bind(this));\n\n    //bind specific editor events\n    this.handleClickAddMetric = this.addMetric.bind(this)\n    this.handleRemoveMetric = this.removeMetric.bind(this)\n  }\n\n  //adds a empty line in order to allow adding new metric in editor\n  addMetric() {\n    this.panel.metrics.push(['','',''])\n  }\n  //removes specific metric in editor\n  removeMetric(index) {\n    this.panel.metrics.splice(index, 1)\n    this.refresh();\n  }\n  //process the event of clicking the Worldmap Tab\n  onInitEditMode() {\n    this.addEditorTab('Worldmap', `${PLUGIN_PATH}partials/editor.html`, 2);\n  }\n\n  /* \n  * Process the resultset\n  * @dataList: The resultset from the executed query \n  */\n  onDataReceived(dataList) {\n    //console.debug('dataList:')\n    //console.debug(dataList)\n\n    if (this.dashboard.snapshot && this.locations) {\n      this.panel.snapshotLocationData = this.locations;\n    }\n\n    if (!dataList) {\n      console.debug('No dataList recieved but continuing. returning...')\n      return ;\n    }\n    if(dataList.length===0){\n      console.debug('Enpty dataList. returning...')\n      return ;\n    }\n\n    this.data = dataFormatter.getValues(dataList, this.panel.metrics);\n    this.layerNames = [...new Set(dataList.map((elem)=>elem.target.split(':')[0]))]\n\n    //console.debug('data recieved >')\n    //console.debug(this.data)\n\n    this.render();\n  }\n\n  onDataError(error) {    \n    if(error && error.data && error.data.error) {\n      console.warn('Error: '+error.data.error.message)\n    }\n    this.onDataReceived([]);\n  }\n\n  onPanelTeardown() {\n    if (this.worldMap) {\n      console.debug('Cleaning map')\n      this.worldMap.map.remove();\n    }\n  }\n\n  setMapProvider(contextSrv) {\n    this.tileServer = contextSrv.user.lightTheme ? 'CartoDB Positron' : 'CartoDB Dark';\n    this.saturationClass = this.tileServer === 'CartoDB Dark' ? 'map-darken' : ''; \n  }\n\n  setNewMapCenter() {\n    if (this.panel.mapCenter === 'Location Variable') {// && this.isADiferentCity()\n      this.setNewCoords()\n        .then(()=>this.render())\n        .catch(error => console.warn(error))\n\n      return ;\n    }\n\n    if (this.panel.mapCenter !== 'Custom') { // center at continent or area\n      console.info('centering at pre-defined location')\n      this.panel.mapCenterLatitude = MAP_LOCATIONS[this.panel.mapCenter].mapCenterLatitude;\n      this.panel.mapCenterLongitude = MAP_LOCATIONS[this.panel.mapCenter].mapCenterLongitude;\n    }\n\n    this.mapCenterMoved = true;\n    this.render();\n  }\n\n  isADiferentCity() {\n    return (getSelectedCity(this.templateSrv.variables, this.panel.cityEnvVariable)!==this.panel.city)\n  }\n\n  setNewCoords() {\n    let city = getSelectedCity(this.templateSrv.variables, this.panel.cityEnvVariable)\n    \n    return getCityCoordinates(city)\n      .then(coordinates => {\n        this.panel.city = city;\n        this.panel.mapCenterLatitude = coordinates.latitude;\n        this.panel.mapCenterLongitude = coordinates.longitude;\n      })\n  }\n\n  setZoom() {\n    this.worldMap.setZoom(this.panel.initialZoom);\n  }\n\n  toggleLegend() {\n    if (!this.panel.showLegend) {\n      this.worldMap.removeLegend();\n    }\n    this.render();\n  }\n\n  toggleStickyLabels() {\n    this.worldMap.clearLayers();\n    this.render();\n  }\n\n  changeThresholds() {\n    this.updateThresholdData();\n    this.worldMap.legend.update();\n    this.render();\n  }\n\n  // eslint class-methods-use-this: 0\n  link(scope, elem, attrs, ctrl) {\n    mapRenderer(scope, elem, attrs, ctrl);\n  }\n\n}\n\nWorldmapCtrl.templateUrl = 'partials/module.html';\n"]}