{"version":3,"sources":["../src/worldmap_ctrl.js"],"names":["MetricsPanelCtrl","TimeSeries","kbn","_","PLUGIN_PATH","panelDefaults","mapCenters","ICON_TYPES","getDatasources","getValidDatasources","getCityCoordinates","getSelectedCity","mapRenderer","DataFormatter","dataFormatter","WorldmapCtrl","$scope","$injector","contextSrv","setMapProvider","console","info","panel","defaultsDeep","iconTypes","events","on","onInitEditMode","bind","onDataError","onDataReceived","addEditorTab","dataList","dashboard","snapshot","locations","snapshotLocationData","layerNames","Set","map","elem","target","split","series","seriesHandler","data","getValues","resources","airQualityObserved","pollutants","render","error","warn","message","seriesData","datapoints","alias","flotpairs","getFlotPairs","nullPointMode","worldMap","remove","tileServer","user","lightTheme","setMapSaturationClass","saturationClass","mapCenter","setNewCoords","then","catch","log","mapCenterLatitude","mapCenterLongitude","mapCenterMoved","templateSrv","variables","city","coordinates","latitude","longitude","setZoom","initialZoom","showLegend","removeLegend","clearLayers","updateThresholdData","legend","update","scope","attrs","ctrl","templateUrl"],"mappings":"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","file":"worldmap_ctrl.js","sourcesContent":["/* eslint import/no-extraneous-dependencies: 0 */\n\n/* Grafana Specific */\nimport {MetricsPanelCtrl} from 'app/plugins/sdk';\nimport TimeSeries from 'app/core/time_series2';\nimport kbn from 'app/core/utils/kbn';\n/* Vendor specific */\nimport _ from 'lodash';\n/* App specific */\nimport { PLUGIN_PATH, panelDefaults, mapCenters, ICON_TYPES } from './definitions'\nimport { getDatasources, getValidDatasources } from './utils/datasource';\n\nimport { getCityCoordinates, getSelectedCity } from './utils/map_utils';\n\nimport mapRenderer from './map_renderer';\nimport DataFormatter from './utils/data_formatter';\n\nimport './css/worldmap-panel.css!';\nimport './vendor/leaflet/leaflet.css!';\n\nlet dataFormatter = new DataFormatter();\n\nexport default class WorldmapCtrl extends MetricsPanelCtrl {\n\n  constructor($scope, $injector, contextSrv) {\n    super($scope, $injector);\n    this.setMapProvider(contextSrv);\n    console.info(this.panel)\n    _.defaultsDeep(this.panel, panelDefaults);\n    this.iconTypes = ICON_TYPES;\n    //this.mapCenterMoved=true;\n\n    this.events.on('init-edit-mode', this.onInitEditMode.bind(this));\n    this.events.on('data-error', this.onDataError.bind(this));\n    this.events.on('data-received', this.onDataReceived.bind(this));  //process resultset as a result of the execution of all queries\n    this.events.on('data-snapshot-load', this.onDataReceived.bind(this));\n    //this.handleDatasourceParamsChange = this.applyDatasourceParamsChange.bind(this)\n    //this.handleMapLayerIconsChange = this.changeMapLayerIcons.bind(this)\n  }\n\n  onInitEditMode() {\n    this.addEditorTab('Worldmap', `${PLUGIN_PATH}partials/editor.html`, 2);\n  }\n\n  /* \n  * Process the resultset\n  * @dataList: The resultset from the executed query \n  */\n  onDataReceived(dataList) {\n    if (!dataList) return;    //no result sets\n    if (this.dashboard.snapshot && this.locations) {\n      this.panel.snapshotLocationData = this.locations;\n    }\n    this.layerNames = [...new Set(dataList.map((elem)=>elem.target.split(':')[0]))]\n    this.series = dataList.map(this.seriesHandler.bind(this));\n    this.data = dataFormatter.getValues(this.series, this.panel.resources.airQualityObserved.pollutants);\n    this.render();\n  }\n\n  onDataError(error) {    \n    if(error && error.data && error.data.error) {\n      console.warn('Error: ')\n      console.warn(error.data.error.message)\n    }\n    this.onDataReceived([]);\n  }\n\n  // onDataSnapshotLoad(snapshotData) {\n  //   this.onDataReceived(snapshotData);\n  // }\n\n  seriesHandler(seriesData) {\n    const series = new TimeSeries({\n      datapoints: seriesData.datapoints,\n      alias: seriesData.target,\n    });\n\n    series.flotpairs = series.getFlotPairs(this.panel.nullPointMode);\n    return series;\n  }\n\n/*  changeMapLayerIcons(mapLayer) {\n    console.log('mapLayer')\n    console.log(mapLayer)\n    //this.panel.layersIcons[mapLayer]=mapLayer\n\n    console.log('panel')\n\n    console.log(this.panel.layersIcons)\n\n    this.render()\n  }*/\n\n  onPanelTeardown() {\n    if (this.worldMap) this.worldMap.remove();\n  }\n\n  setMapProvider(contextSrv) {\n    this.tileServer = contextSrv.user.lightTheme ? 'CartoDB Positron' : 'CartoDB Dark';\n    this.setMapSaturationClass();\n  }\n\n  setMapSaturationClass() {\n    this.saturationClass = this.tileServer === 'CartoDB Dark' ? 'map-darken' : '';    \n  }\n\n  setNewMapCenter() {    \n    if (this.panel.mapCenter === 'cityenv') {// && this.isADiferentCity()\n      this.setNewCoords()\n        .then(()=>this.render())\n        .catch(error => console.log(error))\n\n      return ;\n    }\n\n    if (this.panel.mapCenter !== 'custom') { // center at continent or area\n      console.info('centering !== custom')\n      this.panel.mapCenterLatitude = mapCenters[this.panel.mapCenter].mapCenterLatitude;\n      this.panel.mapCenterLongitude = mapCenters[this.panel.mapCenter].mapCenterLongitude;\n    }\n\n    this.mapCenterMoved = true;\n    this.render();\n  }\n\n  isADiferentCity() {\n    return getSelectedCity(this.templateSrv.variables) !== this.panel.city\n  }\n\n  setNewCoords() {\n    let city = getSelectedCity(this.templateSrv.variables)\n    \n    return getCityCoordinates(city)\n      .then(coordinates => {\n        this.panel.city = city;\n        this.panel.mapCenterLatitude = coordinates.latitude;\n        this.panel.mapCenterLongitude = coordinates.longitude;\n      })\n  }\n\n  setZoom() {\n    this.worldMap.setZoom(this.panel.initialZoom);\n  }\n\n  toggleLegend() {\n    if (!this.panel.showLegend) {\n      this.worldMap.removeLegend();\n    }\n    this.render();\n  }\n\n  toggleStickyLabels() {\n    this.worldMap.clearLayers();\n    this.render();\n  }\n\n  changeThresholds() {\n    this.updateThresholdData();\n    this.worldMap.legend.update();\n    this.render();\n  }\n\n  // eslint class-methods-use-this: 0\n  link(scope, elem, attrs, ctrl) {\n    mapRenderer(scope, elem, attrs, ctrl);\n  }\n\n}\n\nWorldmapCtrl.templateUrl = 'partials/module.html';\n"]}