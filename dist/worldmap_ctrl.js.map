{"version":3,"sources":["../src/worldmap_ctrl.js"],"names":["MetricsPanelCtrl","TimeSeries","kbn","_","PLUGIN_PATH","PANEL_DEFAULTS","DEFAULT_POLLUTANTS","MAP_LOCATIONS","ICON_TYPES","getDatasources","getValidDatasources","getCityCoordinates","getSelectedCity","mapRenderer","DataFormatter","dataFormatter","WorldmapCtrl","$scope","$injector","contextSrv","setMapProvider","defaultsDeep","panel","iconTypes","defaultPollutants","events","on","onInitEditMode","bind","onDataError","onDataReceived","handleClickAddPollutant","addPollutant","handleRemovePollutants","removePollutants","pollutants","push","index","splice","refresh","addEditorTab","dataList","length","console","log","dashboard","snapshot","locations","snapshotLocationData","layerNames","Set","map","elem","target","split","series","seriesHandler","data","getValues","render","error","warn","message","Error","seriesData","datapoints","alias","flotpairs","getFlotPairs","nullPointMode","worldMap","remove","tileServer","user","lightTheme","saturationClass","mapCenter","setNewCoords","then","catch","info","mapCenterLatitude","mapCenterLongitude","mapCenterMoved","templateSrv","variables","city","coordinates","latitude","longitude","setZoom","initialZoom","showLegend","removeLegend","clearLayers","updateThresholdData","legend","update","scope","attrs","ctrl","templateUrl"],"mappings":"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","file":"worldmap_ctrl.js","sourcesContent":["/* eslint import/no-extraneous-dependencies: 0 */\n\n/* Grafana Specific */\nimport {MetricsPanelCtrl} from 'app/plugins/sdk';\nimport TimeSeries from 'app/core/time_series2';\nimport kbn from 'app/core/utils/kbn';\n/* Vendor specific */\nimport _ from 'lodash';\n/* App specific */\nimport { PLUGIN_PATH, PANEL_DEFAULTS, DEFAULT_POLLUTANTS, MAP_LOCATIONS, ICON_TYPES } from './definitions'\nimport { getDatasources, getValidDatasources } from './utils/datasource';\n\nimport { getCityCoordinates, getSelectedCity } from './utils/map_utils';\n\nimport mapRenderer from './map_renderer';\nimport DataFormatter from './utils/data_formatter';\n\nimport './css/worldmap-panel.css!';\nimport './vendor/leaflet/leaflet.css!';\n\nlet dataFormatter = new DataFormatter();\n\nexport default class WorldmapCtrl extends MetricsPanelCtrl {\n\n  constructor($scope, $injector, contextSrv) {\n    super($scope, $injector);\n    this.setMapProvider(contextSrv);\n    _.defaultsDeep(this.panel, PANEL_DEFAULTS);\n    this.iconTypes = ICON_TYPES;\n    this.defaultPollutants = DEFAULT_POLLUTANTS;\n//this.panel.pollutants=[['', '', '']]\n    this.events.on('init-edit-mode', this.onInitEditMode.bind(this));\n    this.events.on('data-error', this.onDataError.bind(this));\n    this.events.on('data-received', this.onDataReceived.bind(this));  //process resultset as a result of the execution of all queries\n    this.events.on('data-snapshot-load', this.onDataReceived.bind(this));\n    //this.handleDatasourceParamsChange = this.applyDatasourceParamsChange.bind(this)\n    //this.handleMapLayerIconsChange = this.changeMapLayerIcons.bind(this)\n\n    this.handleClickAddPollutant = this.addPollutant.bind(this)\n    this.handleRemovePollutants = this.removePollutants.bind(this)\n  }\n\n  addPollutant() {\n    this.panel.pollutants.push(['','',''])\n  }\n  removePollutants(index) {\n    this.panel.pollutants.splice(index, 1)\n    this.refresh();\n  }\n  onInitEditMode() {\n    this.addEditorTab('Worldmap', `${PLUGIN_PATH}partials/editor.html`, 2);\n  }\n\n  /* \n  * Process the resultset\n  * @dataList: The resultset from the executed query \n  */\n  onDataReceived(dataList) {\n    if (!dataList || dataList.length==0) {\n//      throw new Error('Please verify your setting. No values Returned')\n      return;    //no result sets  \n    }\n    \n    console.log('dataList')\n    console.log(dataList)\n\n    if (this.dashboard.snapshot && this.locations) {\n      this.panel.snapshotLocationData = this.locations;\n    }\n    this.layerNames = [...new Set(dataList.map((elem)=>elem.target.split(':')[0]))]\n    this.series = dataList.map(this.seriesHandler.bind(this));\n\n    //parsed data goes here\n    console.log('this.series')\n    console.log(this.series)\n    this.data = dataFormatter.getValues(this.series, this.panel.pollutants);\n    console.log('this.data')\n    console.log(this.data)\n    this.render();\n  }\n\n  onDataError(error) {    \n    if(error && error.data && error.data.error) {\n      console.warn('Error: ')\n      console.warn(error.data.error.message)\n      throw new Error('Please verify your setting. No values Returned.'+error.data.error.message)\n    }\n    this.onDataReceived([]);\n  }\n\n  // onDataSnapshotLoad(snapshotData) {\n  //   this.onDataReceived(snapshotData);\n  // }\n\n  seriesHandler(seriesData) {\n    let series = new TimeSeries({\n      datapoints: seriesData.datapoints,\n      alias: seriesData.target,\n    });\n\n    series.flotpairs = series.getFlotPairs(this.panel.nullPointMode);\n    return series;\n  }\n\n/*  changeMapLayerIcons(mapLayer) {\n    console.log('mapLayer')\n    console.log(mapLayer)\n    //this.panel.layersIcons[mapLayer]=mapLayer\n\n    console.log('panel')\n\n    console.log(this.panel.layersIcons)\n\n    this.render()\n  }*/\n\n  onPanelTeardown() {\n    if (this.worldMap) this.worldMap.remove();\n  }\n\n  setMapProvider(contextSrv) {\n    this.tileServer = contextSrv.user.lightTheme ? 'CartoDB Positron' : 'CartoDB Dark';\n    this.saturationClass = this.tileServer === 'CartoDB Dark' ? 'map-darken' : ''; \n  }\n\n  setNewMapCenter() {    \n    if (this.panel.mapCenter === 'cityenv') {// && this.isADiferentCity()\n      this.setNewCoords()\n        .then(()=>this.render())\n        .catch(error => console.log(error))\n\n      return ;\n    }\n\n    if (this.panel.mapCenter !== 'custom') { // center at continent or area\n      console.info('centering !== custom')\n      this.panel.mapCenterLatitude = MAP_LOCATIONS[this.panel.mapCenter].mapCenterLatitude;\n      this.panel.mapCenterLongitude = MAP_LOCATIONS[this.panel.mapCenter].mapCenterLongitude;\n    }\n\n    this.mapCenterMoved = true;\n    this.render();\n  }\n\n  isADiferentCity() {\n    return getSelectedCity(this.templateSrv.variables) !== this.panel.city\n  }\n\n  setNewCoords() {\n    let city = getSelectedCity(this.templateSrv.variables)\n    \n    return getCityCoordinates(city)\n      .then(coordinates => {\n        this.panel.city = city;\n        this.panel.mapCenterLatitude = coordinates.latitude;\n        this.panel.mapCenterLongitude = coordinates.longitude;\n      })\n  }\n\n  setZoom() {\n    this.worldMap.setZoom(this.panel.initialZoom);\n  }\n\n  toggleLegend() {\n    if (!this.panel.showLegend) {\n      this.worldMap.removeLegend();\n    }\n    this.render();\n  }\n\n  toggleStickyLabels() {\n    this.worldMap.clearLayers();\n    this.render();\n  }\n\n  changeThresholds() {\n    this.updateThresholdData();\n    this.worldMap.legend.update();\n    this.render();\n  }\n\n  // eslint class-methods-use-this: 0\n  link(scope, elem, attrs, ctrl) {\n    mapRenderer(scope, elem, attrs, ctrl);\n  }\n\n}\n\nWorldmapCtrl.templateUrl = 'partials/module.html';\n"]}