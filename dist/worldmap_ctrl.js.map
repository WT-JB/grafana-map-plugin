{"version":3,"sources":["../src/worldmap_ctrl.js"],"names":["MetricsPanelCtrl","TimeSeries","kbn","_","panelDefaults","mapCenters","mapRenderer","DataFormatter","WorldmapCtrl","$scope","$injector","contextSrv","setMapProvider","defaults","panel","dataFormatter","events","on","onInitEditMode","bind","onDataReceived","tileServer","user","lightTheme","setMapSaturationClass","saturationClass","map","remove","addEditorTab","dataList","dashboard","snapshot","locations","snapshotLocationData","data","series","seriesHandler","setValues","render","snapshotData","seriesData","datapoints","alias","target","flotpairs","getFlotPairs","nullPointMode","mapCenter","mapCenterLatitude","mapCenterLongitude","mapCenterMoved","setZoom","initialZoom","showLegend","removeLegend","clearCircles","updateThresholdData","legend","update","console","log","scope","elem","attrs","ctrl","templateUrl"],"mappings":"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","file":"worldmap_ctrl.js","sourcesContent":["/* eslint import/no-extraneous-dependencies: 0 */\n\n/* GRafana Specific */\nimport {MetricsPanelCtrl} from 'app/plugins/sdk';\nimport TimeSeries from 'app/core/time_series2';\nimport kbn from 'app/core/utils/kbn';\n/* Vendor specific */\nimport _ from 'lodash';\n/* App specific */\nimport { panelDefaults, mapCenters } from './definitions'\nimport mapRenderer from './map_renderer';\nimport DataFormatter from './data_formatter';\nimport './css/worldmap-panel.css!';\nimport './vendor/leaflet/leaflet.css!';\n\nexport default class WorldmapCtrl extends MetricsPanelCtrl {\n\n  constructor($scope, $injector, contextSrv) {\n    super($scope, $injector);\n\n    this.setMapProvider(contextSrv);\n    _.defaults(this.panel, panelDefaults);\n\n    this.dataFormatter = new DataFormatter(this, kbn);\n\n    this.events.on('init-edit-mode', this.onInitEditMode.bind(this));\n    this.events.on('data-received', this.onDataReceived.bind(this));\n    // this.events.on('panel-teardown', this.onPanelTeardown.bind(this));\n    // this.events.on('data-snapshot-load', this.onDataSnapshotLoad.bind(this));\n\n    // this.loadLocationDataFromFile();\n  }\n\n  setMapProvider(contextSrv) {\n    this.tileServer = contextSrv.user.lightTheme ? 'CartoDB Positron' : 'CartoDB Dark';\n    this.setMapSaturationClass();\n  }\n\n  setMapSaturationClass() {\n    this.saturationClass = this.tileServer === 'CartoDB Dark' ? 'map-darken' : '';    \n  }\n\n  onPanelTeardown() {\n    if (this.map) this.map.remove();\n  }\n\n  onInitEditMode() {\n    this.addEditorTab('Worldmap', 'public/plugins/grafana-traffic-env-panel/partials/editor.html', 2);\n  }\n\n  onDataReceived(dataList) {\n    if (!dataList) return;\n\n    if (this.dashboard.snapshot && this.locations) {\n      this.panel.snapshotLocationData = this.locations;\n    }\n\n    const data = [];\n    this.series = dataList.map(this.seriesHandler.bind(this));\n    this.dataFormatter.setValues(data);\n    this.data = data;\n    this.render();\n  }\n\n  onDataSnapshotLoad(snapshotData) {\n    this.onDataReceived(snapshotData);\n  }\n\n  seriesHandler(seriesData) {\n    const series = new TimeSeries({\n      datapoints: seriesData.datapoints,\n      alias: seriesData.target,\n    });\n\n    series.flotpairs = series.getFlotPairs(this.panel.nullPointMode);\n    return series;\n  }\n\n  setNewMapCenter() {\n    if (this.panel.mapCenter !== 'custom') {\n      this.panel.mapCenterLatitude = mapCenters[this.panel.mapCenter].mapCenterLatitude;\n      this.panel.mapCenterLongitude = mapCenters[this.panel.mapCenter].mapCenterLongitude;\n    }\n    this.mapCenterMoved = true;\n    this.render();\n  }\n\n  setZoom() {\n    this.map.setZoom(this.panel.initialZoom);\n  }\n\n  toggleLegend() {\n    if (!this.panel.showLegend) {\n      this.map.removeLegend();\n    }\n    this.render();\n  }\n\n  toggleStickyLabels() {\n    this.map.clearCircles();\n    this.render();\n  }\n\n  changeThresholds() {\n    this.updateThresholdData();\n    this.map.legend.update();\n    this.render();\n  }\n\n  setPollutants() {\n    console.log(\"SET POLL\");\n  }\n\n  // eslint class-methods-use-this: 0\n  link(scope, elem, attrs, ctrl) {\n    mapRenderer(scope, elem, attrs, ctrl);\n  }\n\n}\n\nWorldmapCtrl.templateUrl = 'partials/module.html';\n"]}