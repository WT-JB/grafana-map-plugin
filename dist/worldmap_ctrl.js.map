{"version":3,"sources":["../src/worldmap_ctrl.js"],"names":["dataFormatter","WorldmapCtrl","$scope","$injector","contextSrv","setMapProvider","panel","mapLocationsLabels","Object","keys","iconTypes","defaultMetrics","markerColors","environmentVars","templateSrv","variables","map","elem","name","events","on","onInitEditMode","bind","onDataError","onDataReceived","onPanelTeardown","handleClickAddMetric","addMetric","handleRemoveMetric","removeMetric","metrics","push","index","splice","refresh","addEditorTab","dataList","dashboard","snapshot","locations","snapshotLocationData","console","debug","length","data","getValues","layerNames","render","error","warn","message","worldMap","remove","tileServer","user","lightTheme","saturationClass","log","navigator","geolocation","getCurrentPosition","position","coordinates","coords","recenterMap","mapCenter","setLocationByUserGeolocation","setNewCoords","mapCenterLatitude","mapCenterLongitude","mapCenterMoved","info","latitude","longitude","cityEnvVariable","city","then","catch","setZoom","initialZoom","showLegend","removeLegend","clearLayers","updateThresholdData","legend","update","scope","attrs","ctrl","templateUrl"],"mappings":"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","file":"worldmap_ctrl.js","sourcesContent":["/* eslint import/no-extraneous-dependencies: 0 */\n\n/* Grafana Specific */\nimport {MetricsPanelCtrl} from 'app/plugins/sdk';\nimport TimeSeries from 'app/core/time_series2';\nimport kbn from 'app/core/utils/kbn';\n/* Vendor specific */\nimport { defaultsDeep } from 'lodash';\n/* App specific */\nimport { PLUGIN_PATH, PANEL_DEFAULTS, DEFAULT_METRICS, MAP_LOCATIONS, ICON_TYPES, MARKER_COLORS } from './definitions'\nimport { getDatasources, getValidDatasources } from './utils/datasource';\n\nimport { getCityCoordinates, getSelectedCity, geolocationOptions } from './utils/map_utils';\n\nimport mapRenderer from './map_renderer';\nimport { DataFormatter, dataRecievedIsTheSame } from './utils/data_utils';\n\nimport './css/worldmap-panel.css!';\nimport './vendor/leaflet/leaflet.css!';\n\nlet dataFormatter = new DataFormatter();\n\nexport default class WorldmapCtrl extends MetricsPanelCtrl {\n\n  constructor($scope, $injector, contextSrv) {\n    super($scope, $injector);\n    this.setMapProvider(contextSrv);\n    defaultsDeep(this.panel, PANEL_DEFAULTS);\n\n    //helper vars definitions to be used in editor\n    this.mapLocationsLabels = [...Object.keys(MAP_LOCATIONS), 'Location Variable', 'Custom', 'User Geolocation'];\n    this.iconTypes = ICON_TYPES;\n    this.defaultMetrics = DEFAULT_METRICS;\n    this.markerColors = MARKER_COLORS;\n    this.environmentVars = this.templateSrv.variables.map((elem)=>elem.name)\n\n    //bind grafana events\n    this.events.on('init-edit-mode', this.onInitEditMode.bind(this));\n    this.events.on('data-error', this.onDataError.bind(this));\n    this.events.on('data-received', this.onDataReceived.bind(this));  //process resultset as a result of the execution of all queries\n    this.events.on('panel-teardown', this.onPanelTeardown.bind(this));\n    this.events.on('data-snapshot-load', this.onDataReceived.bind(this));\n\n    //bind specific editor events\n    this.handleClickAddMetric = this.addMetric.bind(this)\n    this.handleRemoveMetric = this.removeMetric.bind(this)\n  }\n\n  //adds a empty line in order to allow adding new metric in editor\n  addMetric() {\n    this.panel.metrics.push(['','',''])\n  }\n  //removes specific metric in editor\n  removeMetric(index) {\n    this.panel.metrics.splice(index, 1)\n    this.refresh();\n  }\n  //process the event of clicking the Worldmap Tab\n  onInitEditMode() {\n    this.addEditorTab('Worldmap', `${PLUGIN_PATH}partials/editor.html`, 2);\n  }\n\n  /* \n  * Process the resultset\n  * @dataList: The resultset from the executed query \n  */\n  onDataReceived(dataList) {\n    //console.debug('dataList:')\n    //console.debug(dataList)\n\n    if (this.dashboard.snapshot && this.locations) {\n      this.panel.snapshotLocationData = this.locations;\n    }\n\n    if (!dataList) {\n      console.debug('No dataList recieved but continuing...')\n      return ;\n    }\n    if(dataList.length===0){\n      console.debug('Empty dataList. returning...')\n      return ;\n    }\n\n    this.data = dataFormatter.getValues(dataList);//, this.panel.metrics);\n    this.layerNames = Object.keys(this.data);\n    this.render();\n  }\n\n  onDataError(error) {    \n    if(error && error.data && error.data.error) {\n      console.warn('Error: '+error.data.error.message)\n    }\n    this.onDataReceived([]);\n  }\n\n  onPanelTeardown() {\n    if (this.worldMap) {\n      //console.debug('Cleaning map')\n      this.worldMap.map.remove();\n    }\n  }\n\n  setMapProvider(contextSrv) {\n    this.tileServer = contextSrv.user.lightTheme ? 'CartoDB Positron' : 'CartoDB Dark';\n    this.saturationClass = this.tileServer === 'CartoDB Dark' ? 'map-darken' : ''; \n  }\n\n  setLocationByUserGeolocation(render=false) {\n    console.log('User Geolocation')\n    if (navigator.geolocation) {\n        navigator.geolocation.getCurrentPosition(\n          (position) => {\n            const coordinates = position.coords\n            this.recenterMap(coordinates);\n            if(render)\n              this.render()\n          },\n          (error) => console.log('Unable to get location!'),\n          geolocationOptions\n        );\n      } else {\n        console.log('Geolocation is not supported by this browser.');\n      }\n  }\n\n  //var watchID = navigator.geolocation.watchPosition\n  //navigator.geolocation.clearWatch(watchID)\n  setNewMapCenter() {\n    console.debug(this.panel.mapCenter)\n    if('User Geolocation'===this.panel.mapCenter) {\n      this.setLocationByUserGeolocation(true);\n    } else\n    if('Location Variable'===this.panel.mapCenter) {// && this.isADiferentCity()\n      this.setNewCoords()        \n    } else\n    if('Custom'===this.panel.mapCenter) {\n      console.log(this.panel.mapCenterLatitude)\n      console.log(this.panel.mapCenterLongitude)\n      this.mapCenterMoved = true;\n      this.render();\n    }\n    else { // center at continent or area\n      console.info('centering at City/Continent location')\n      const coordinates = {latitude: MAP_LOCATIONS[this.panel.mapCenter].mapCenterLatitude, longitude: MAP_LOCATIONS[this.panel.mapCenter].mapCenterLongitude}\n      this.recenterMap(coordinates);\n      this.render();\n    }\n  }\n\n  isADiferentCity() {\n    return (getSelectedCity(this.templateSrv.variables, this.panel.cityEnvVariable)!==this.panel.city)\n  }\n\n  setNewCoords() {\n    const city = getSelectedCity(this.templateSrv.variables, this.panel.cityEnvVariable)\n    console.debug('selecting new city: '+city)\n    return getCityCoordinates(city)\n      .then(coordinates => {\n        this.panel.city = city;\n        if(coordinates) {          \n          this.recenterMap(coordinates);\n          this.render();\n        } else\n          console.log('Coordinates not available for the selected location '+city)\n      })\n      .catch(error => console.warn(error))\n  }\n\n  recenterMap(coordinates) {\n    console.debug('recenter at new coordinates')\n    //console.debug(coordinates)\n    this.panel.mapCenterLatitude = coordinates.latitude;\n    this.panel.mapCenterLongitude = coordinates.longitude;\n    this.mapCenterMoved = true;\n  }\n\n  setZoom() {\n    this.worldMap.setZoom(this.panel.initialZoom);\n  }\n\n  toggleLegend() {\n    if (!this.panel.showLegend) {\n      this.worldMap.removeLegend();\n    }\n    this.render();\n  }\n\n  toggleStickyLabels() {\n    this.worldMap.clearLayers();\n    this.render();\n  }\n\n  changeThresholds() {\n    this.updateThresholdData();\n    this.worldMap.legend.update();\n    this.render();\n  }\n\n  // eslint class-methods-use-this: 0\n  link(scope, elem, attrs, ctrl) {\n    mapRenderer(scope, elem, attrs, ctrl);\n  }\n\n}\n\nWorldmapCtrl.templateUrl = 'partials/module.html';\n"]}